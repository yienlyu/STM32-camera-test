
STM32-camera-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090bc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098bc  080098bc  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c4  080098c4  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080098cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          00000d0c  200000cc  200000cc  000200cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dd8  20000dd8  000200cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dbb9  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003207  00000000  00000000  0003dcb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  00040ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f0  00000000  00000000  000423c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b882  00000000  00000000  000437b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001867a  00000000  00000000  0006f03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104020  00000000  00000000  000876b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018b6d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057bc  00000000  00000000  0018b728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000cc 	.word	0x200000cc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009250 	.word	0x08009250

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000d0 	.word	0x200000d0
 80001e8:	08009250 	.word	0x08009250

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 ffd1 	bl	8001498 <mfxstm32l152_GetInstance>
 80004f6:	4603      	mov	r3, r0
 80004f8:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	2bff      	cmp	r3, #255	; 0xff
 80004fe:	d10e      	bne.n	800051e <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000500:	2000      	movs	r0, #0
 8000502:	f000 ffc9 	bl	8001498 <mfxstm32l152_GetInstance>
 8000506:	4603      	mov	r3, r0
 8000508:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800050a:	7bbb      	ldrb	r3, [r7, #14]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d806      	bhi.n	800051e <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000510:	7bbb      	ldrb	r3, [r7, #14]
 8000512:	88fa      	ldrh	r2, [r7, #6]
 8000514:	b2d1      	uxtb	r1, r2
 8000516:	4a09      	ldr	r2, [pc, #36]	; (800053c <mfxstm32l152_Init+0x58>)
 8000518:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800051a:	f003 ffa9 	bl	8004470 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	2102      	movs	r1, #2
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f8db 	bl	80006de <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000528:	88fb      	ldrh	r3, [r7, #6]
 800052a:	2101      	movs	r1, #1
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f8fc 	bl	800072a <mfxstm32l152_SetIrqOutPinType>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000e8 	.word	0x200000e8

08000540 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 ffc3 	bl	80014d8 <mfxstm32l152_ReleaseInstance>
 8000552:	4603      	mov	r3, r0
 8000554:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	2bff      	cmp	r3, #255	; 0xff
 800055a:	d001      	beq.n	8000560 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 800055c:	f003 ff98 	bl	8004490 <MFX_IO_DeInit>
  }
}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	2280      	movs	r2, #128	; 0x80
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	4618      	mov	r0, r3
 800057a:	f004 f82b 	bl	80045d4 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 800057e:	200a      	movs	r0, #10
 8000580:	f004 f86a 	bl	8004658 <MFX_IO_Delay>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	2240      	movs	r2, #64	; 0x40
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4618      	mov	r0, r3
 800059e:	f004 f819 	bl	80045d4 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80005a2:	f003 ffdf 	bl	8004564 <MFX_IO_EnableWakeupPin>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b084      	sub	sp, #16
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4603      	mov	r3, r0
 80005b6:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 ff6c 	bl	8001498 <mfxstm32l152_GetInstance>
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	2bff      	cmp	r3, #255	; 0xff
 80005c8:	d101      	bne.n	80005ce <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 80005ca:	f003 ffcb 	bl	8004564 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 80005ce:	f003 ffed 	bl	80045ac <MFX_IO_Wakeup>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f004 f837 	bl	8004658 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 80005ea:	f003 ff41 	bl	8004470 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 f802 	bl	80045fc <MFX_IO_Read>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	b29b      	uxth	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	80fb      	strh	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	2142      	movs	r1, #66	; 0x42
 8000620:	4618      	mov	r0, r3
 8000622:	f003 ffeb 	bl	80045fc <MFX_IO_Read>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800062a:	7bfa      	ldrb	r2, [r7, #15]
 800062c:	797b      	ldrb	r3, [r7, #5]
 800062e:	4313      	orrs	r3, r2
 8000630:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000632:	7bfa      	ldrb	r2, [r7, #15]
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	2142      	movs	r1, #66	; 0x42
 8000638:	4618      	mov	r0, r3
 800063a:	f003 ffcb 	bl	80045d4 <MFX_IO_Write>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	4603      	mov	r3, r0
 800064e:	460a      	mov	r2, r1
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	4613      	mov	r3, r2
 8000654:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2142      	movs	r1, #66	; 0x42
 800065e:	4618      	mov	r0, r3
 8000660:	f003 ffcc 	bl	80045fc <MFX_IO_Read>
 8000664:	4603      	mov	r3, r0
 8000666:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8000668:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800066c:	43db      	mvns	r3, r3
 800066e:	b25a      	sxtb	r2, r3
 8000670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000674:	4013      	ands	r3, r2
 8000676:	b25b      	sxtb	r3, r3
 8000678:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	2142      	movs	r1, #66	; 0x42
 8000680:	4618      	mov	r0, r3
 8000682:	f003 ffa7 	bl	80045d4 <MFX_IO_Write>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	460a      	mov	r2, r1
 8000698:	80fb      	strh	r3, [r7, #6]
 800069a:	4613      	mov	r3, r2
 800069c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	2108      	movs	r1, #8
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 ffaa 	bl	80045fc <MFX_IO_Read>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	4013      	ands	r3, r2
 80006b0:	b2db      	uxtb	r3, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	460a      	mov	r2, r1
 80006c4:	80fb      	strh	r3, [r7, #6]
 80006c6:	4613      	mov	r3, r2
 80006c8:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 80006ca:	797a      	ldrb	r2, [r7, #5]
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	2144      	movs	r1, #68	; 0x44
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 ff7f 	bl	80045d4 <MFX_IO_Write>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b084      	sub	sp, #16
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	460a      	mov	r2, r1
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	4613      	mov	r3, r2
 80006ec:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	2141      	movs	r1, #65	; 0x41
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 ff80 	bl	80045fc <MFX_IO_Read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	f023 0302 	bic.w	r3, r3, #2
 8000706:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000708:	7bfa      	ldrb	r2, [r7, #15]
 800070a:	797b      	ldrb	r3, [r7, #5]
 800070c:	4313      	orrs	r3, r2
 800070e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000710:	7bfa      	ldrb	r2, [r7, #15]
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	2141      	movs	r1, #65	; 0x41
 8000716:	4618      	mov	r0, r3
 8000718:	f003 ff5c 	bl	80045d4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f003 ff9b 	bl	8004658 <MFX_IO_Delay>

}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	460a      	mov	r2, r1
 8000734:	80fb      	strh	r3, [r7, #6]
 8000736:	4613      	mov	r3, r2
 8000738:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	2141      	movs	r1, #65	; 0x41
 8000742:	4618      	mov	r0, r3
 8000744:	f003 ff5a 	bl	80045fc <MFX_IO_Read>
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	f023 0301 	bic.w	r3, r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000754:	7bfa      	ldrb	r2, [r7, #15]
 8000756:	797b      	ldrb	r3, [r7, #5]
 8000758:	4313      	orrs	r3, r2
 800075a:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 800075c:	7bfa      	ldrb	r2, [r7, #15]
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2141      	movs	r1, #65	; 0x41
 8000762:	4618      	mov	r0, r3
 8000764:	f003 ff36 	bl	80045d4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f003 ff75 	bl	8004658 <MFX_IO_Delay>

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b084      	sub	sp, #16
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	6039      	str	r1, [r7, #0]
 8000780:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	4618      	mov	r0, r3
 8000788:	f003 ff38 	bl	80045fc <MFX_IO_Read>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800079e:	d304      	bcc.n	80007aa <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	73fb      	strb	r3, [r7, #15]
 80007a8:	e003      	b.n	80007b2 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	f023 0308 	bic.w	r3, r3, #8
 80007b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	88fb      	ldrh	r3, [r7, #6]
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 ff0b 	bl	80045d4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f003 ff4a 	bl	8004658 <MFX_IO_Delay>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	80fb      	strh	r3, [r7, #6]
 80007d8:	4613      	mov	r3, r2
 80007da:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	2b17      	cmp	r3, #23
 80007e4:	f200 82d4 	bhi.w	8000d90 <mfxstm32l152_IO_Config+0x5c4>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <mfxstm32l152_IO_Config+0x24>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000881 	.word	0x08000881
 80007f4:	08000911 	.word	0x08000911
 80007f8:	080009d1 	.word	0x080009d1
 80007fc:	08000ac1 	.word	0x08000ac1
 8000800:	08000bb1 	.word	0x08000bb1
 8000804:	08000ca1 	.word	0x08000ca1
 8000808:	08000851 	.word	0x08000851
 800080c:	08000851 	.word	0x08000851
 8000810:	080008b1 	.word	0x080008b1
 8000814:	080008e1 	.word	0x080008e1
 8000818:	08000d91 	.word	0x08000d91
 800081c:	080009a1 	.word	0x080009a1
 8000820:	08000971 	.word	0x08000971
 8000824:	08000d91 	.word	0x08000d91
 8000828:	08000941 	.word	0x08000941
 800082c:	08000911 	.word	0x08000911
 8000830:	08000a21 	.word	0x08000a21
 8000834:	08000a71 	.word	0x08000a71
 8000838:	08000b11 	.word	0x08000b11
 800083c:	08000b61 	.word	0x08000b61
 8000840:	08000c01 	.word	0x08000c01
 8000844:	08000c51 	.word	0x08000c51
 8000848:	08000cf1 	.word	0x08000cf1
 800084c:	08000d41 	.word	0x08000d41
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	6839      	ldr	r1, [r7, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fb67 	bl	8000f28 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	2200      	movs	r2, #0
 800085e:	6839      	ldr	r1, [r7, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fa9d 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000866:	88f8      	ldrh	r0, [r7, #6]
 8000868:	2300      	movs	r3, #0
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	2164      	movs	r1, #100	; 0x64
 800086e:	f000 fe57 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000872:	88f8      	ldrh	r0, [r7, #6]
 8000874:	2300      	movs	r3, #0
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	2168      	movs	r1, #104	; 0x68
 800087a:	f000 fe51 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    break;
 800087e:	e28a      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	6839      	ldr	r1, [r7, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fb4f 	bl	8000f28 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	2200      	movs	r2, #0
 800088e:	6839      	ldr	r1, [r7, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fa85 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000896:	88f8      	ldrh	r0, [r7, #6]
 8000898:	2300      	movs	r3, #0
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	2164      	movs	r1, #100	; 0x64
 800089e:	f000 fe3f 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80008a2:	88f8      	ldrh	r0, [r7, #6]
 80008a4:	2301      	movs	r3, #1
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	2168      	movs	r1, #104	; 0x68
 80008aa:	f000 fe39 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    break;
 80008ae:	e272      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	6839      	ldr	r1, [r7, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fb37 	bl	8000f28 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	2200      	movs	r2, #0
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fa6d 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80008c6:	88f8      	ldrh	r0, [r7, #6]
 80008c8:	2301      	movs	r3, #1
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	2164      	movs	r1, #100	; 0x64
 80008ce:	f000 fe27 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80008d2:	88f8      	ldrh	r0, [r7, #6]
 80008d4:	2301      	movs	r3, #1
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	2168      	movs	r1, #104	; 0x68
 80008da:	f000 fe21 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    break;
 80008de:	e25a      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	6839      	ldr	r1, [r7, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fb1f 	bl	8000f28 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	2200      	movs	r2, #0
 80008ee:	6839      	ldr	r1, [r7, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fa55 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80008f6:	88f8      	ldrh	r0, [r7, #6]
 80008f8:	2301      	movs	r3, #1
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	2164      	movs	r1, #100	; 0x64
 80008fe:	f000 fe0f 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000902:	88f8      	ldrh	r0, [r7, #6]
 8000904:	2300      	movs	r3, #0
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	2168      	movs	r1, #104	; 0x68
 800090a:	f000 fe09 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    break;
 800090e:	e242      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fb07 	bl	8000f28 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	2201      	movs	r2, #1
 800091e:	6839      	ldr	r1, [r7, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fa3d 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000926:	88f8      	ldrh	r0, [r7, #6]
 8000928:	2300      	movs	r3, #0
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	2164      	movs	r1, #100	; 0x64
 800092e:	f000 fdf7 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000932:	88f8      	ldrh	r0, [r7, #6]
 8000934:	2300      	movs	r3, #0
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	2168      	movs	r1, #104	; 0x68
 800093a:	f000 fdf1 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    break;
 800093e:	e22a      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	6839      	ldr	r1, [r7, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 faef 	bl	8000f28 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	2201      	movs	r2, #1
 800094e:	6839      	ldr	r1, [r7, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fa25 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000956:	88f8      	ldrh	r0, [r7, #6]
 8000958:	2300      	movs	r3, #0
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	2164      	movs	r1, #100	; 0x64
 800095e:	f000 fddf 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000962:	88f8      	ldrh	r0, [r7, #6]
 8000964:	2301      	movs	r3, #1
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	2168      	movs	r1, #104	; 0x68
 800096a:	f000 fdd9 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    break;
 800096e:	e212      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fad7 	bl	8000f28 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	2201      	movs	r2, #1
 800097e:	6839      	ldr	r1, [r7, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fa0d 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000986:	88f8      	ldrh	r0, [r7, #6]
 8000988:	2301      	movs	r3, #1
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	2164      	movs	r1, #100	; 0x64
 800098e:	f000 fdc7 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000992:	88f8      	ldrh	r0, [r7, #6]
 8000994:	2300      	movs	r3, #0
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	2168      	movs	r1, #104	; 0x68
 800099a:	f000 fdc1 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    break;
 800099e:	e1fa      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	6839      	ldr	r1, [r7, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fabf 	bl	8000f28 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2201      	movs	r2, #1
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f9f5 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80009b6:	88f8      	ldrh	r0, [r7, #6]
 80009b8:	2301      	movs	r3, #1
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	2164      	movs	r1, #100	; 0x64
 80009be:	f000 fdaf 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80009c2:	88f8      	ldrh	r0, [r7, #6]
 80009c4:	2301      	movs	r3, #1
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	2168      	movs	r1, #104	; 0x68
 80009ca:	f000 fda9 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    break;
 80009ce:	e1e2      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fa7a 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	2200      	movs	r2, #0
 80009dc:	6839      	ldr	r1, [r7, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f9de 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80009e4:	88f8      	ldrh	r0, [r7, #6]
 80009e6:	2300      	movs	r3, #0
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	2164      	movs	r1, #100	; 0x64
 80009ec:	f000 fd98 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80009f0:	88f8      	ldrh	r0, [r7, #6]
 80009f2:	2301      	movs	r3, #1
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	2168      	movs	r1, #104	; 0x68
 80009f8:	f000 fd92 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	2201      	movs	r2, #1
 8000a00:	6839      	ldr	r1, [r7, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f9de 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	6839      	ldr	r1, [r7, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f9ed 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fa75 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000a1e:	e1ba      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fa52 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	6839      	ldr	r1, [r7, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f9b6 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000a34:	88f8      	ldrh	r0, [r7, #6]
 8000a36:	2301      	movs	r3, #1
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	2164      	movs	r1, #100	; 0x64
 8000a3c:	f000 fd70 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000a40:	88f8      	ldrh	r0, [r7, #6]
 8000a42:	2301      	movs	r3, #1
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	2168      	movs	r1, #104	; 0x68
 8000a48:	f000 fd6a 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f9b6 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f9c5 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	6839      	ldr	r1, [r7, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fa4d 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000a6e:	e192      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fa2a 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	6839      	ldr	r1, [r7, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f98e 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000a84:	88f8      	ldrh	r0, [r7, #6]
 8000a86:	2301      	movs	r3, #1
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	2164      	movs	r1, #100	; 0x64
 8000a8c:	f000 fd48 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000a90:	88f8      	ldrh	r0, [r7, #6]
 8000a92:	2300      	movs	r3, #0
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	2168      	movs	r1, #104	; 0x68
 8000a98:	f000 fd42 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	6839      	ldr	r1, [r7, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f98e 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	6839      	ldr	r1, [r7, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f99d 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	6839      	ldr	r1, [r7, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fa25 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000abe:	e16a      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fa02 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	2200      	movs	r2, #0
 8000acc:	6839      	ldr	r1, [r7, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f966 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000ad4:	88f8      	ldrh	r0, [r7, #6]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	2164      	movs	r1, #100	; 0x64
 8000adc:	f000 fd20 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000ae0:	88f8      	ldrh	r0, [r7, #6]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	2168      	movs	r1, #104	; 0x68
 8000ae8:	f000 fd1a 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	2201      	movs	r2, #1
 8000af0:	6839      	ldr	r1, [r7, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f966 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	2200      	movs	r2, #0
 8000afc:	6839      	ldr	r1, [r7, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f975 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	6839      	ldr	r1, [r7, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f9fd 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000b0e:	e142      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f9da 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	6839      	ldr	r1, [r7, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f93e 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000b24:	88f8      	ldrh	r0, [r7, #6]
 8000b26:	2301      	movs	r3, #1
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	2164      	movs	r1, #100	; 0x64
 8000b2c:	f000 fcf8 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000b30:	88f8      	ldrh	r0, [r7, #6]
 8000b32:	2301      	movs	r3, #1
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	2168      	movs	r1, #104	; 0x68
 8000b38:	f000 fcf2 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f93e 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	6839      	ldr	r1, [r7, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f94d 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f9d5 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000b5e:	e11a      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f9b2 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	6839      	ldr	r1, [r7, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f916 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000b74:	88f8      	ldrh	r0, [r7, #6]
 8000b76:	2301      	movs	r3, #1
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	2164      	movs	r1, #100	; 0x64
 8000b7c:	f000 fcd0 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000b80:	88f8      	ldrh	r0, [r7, #6]
 8000b82:	2300      	movs	r3, #0
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	2168      	movs	r1, #104	; 0x68
 8000b88:	f000 fcca 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	6839      	ldr	r1, [r7, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f916 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	6839      	ldr	r1, [r7, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f925 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f9ad 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000bae:	e0f2      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f98a 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	6839      	ldr	r1, [r7, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f8ee 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000bc4:	88f8      	ldrh	r0, [r7, #6]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	2164      	movs	r1, #100	; 0x64
 8000bcc:	f000 fca8 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000bd0:	88f8      	ldrh	r0, [r7, #6]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	2168      	movs	r1, #104	; 0x68
 8000bd8:	f000 fca2 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	2200      	movs	r2, #0
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f8ee 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	2200      	movs	r2, #0
 8000bec:	6839      	ldr	r1, [r7, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f8fd 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	6839      	ldr	r1, [r7, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f985 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000bfe:	e0ca      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f962 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	6839      	ldr	r1, [r7, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f8c6 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c14:	88f8      	ldrh	r0, [r7, #6]
 8000c16:	2301      	movs	r3, #1
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	2164      	movs	r1, #100	; 0x64
 8000c1c:	f000 fc80 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000c20:	88f8      	ldrh	r0, [r7, #6]
 8000c22:	2301      	movs	r3, #1
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	2168      	movs	r1, #104	; 0x68
 8000c28:	f000 fc7a 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6839      	ldr	r1, [r7, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f8c6 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f8d5 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	6839      	ldr	r1, [r7, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f95d 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000c4e:	e0a2      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f93a 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	6839      	ldr	r1, [r7, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f89e 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c64:	88f8      	ldrh	r0, [r7, #6]
 8000c66:	2301      	movs	r3, #1
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	2164      	movs	r1, #100	; 0x64
 8000c6c:	f000 fc58 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c70:	88f8      	ldrh	r0, [r7, #6]
 8000c72:	2300      	movs	r3, #0
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	2168      	movs	r1, #104	; 0x68
 8000c78:	f000 fc52 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	6839      	ldr	r1, [r7, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f89e 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	6839      	ldr	r1, [r7, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f8ad 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	6839      	ldr	r1, [r7, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f935 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000c9e:	e07a      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f912 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	2200      	movs	r2, #0
 8000cac:	6839      	ldr	r1, [r7, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f876 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000cb4:	88f8      	ldrh	r0, [r7, #6]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	2164      	movs	r1, #100	; 0x64
 8000cbc:	f000 fc30 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000cc0:	88f8      	ldrh	r0, [r7, #6]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	2168      	movs	r1, #104	; 0x68
 8000cc8:	f000 fc2a 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	6839      	ldr	r1, [r7, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f876 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	6839      	ldr	r1, [r7, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f885 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	6839      	ldr	r1, [r7, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f90d 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000cee:	e052      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f8ea 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	6839      	ldr	r1, [r7, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f84e 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d04:	88f8      	ldrh	r0, [r7, #6]
 8000d06:	2301      	movs	r3, #1
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	2164      	movs	r1, #100	; 0x64
 8000d0c:	f000 fc08 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d10:	88f8      	ldrh	r0, [r7, #6]
 8000d12:	2301      	movs	r3, #1
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	2168      	movs	r1, #104	; 0x68
 8000d18:	f000 fc02 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	6839      	ldr	r1, [r7, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f84e 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f85d 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	6839      	ldr	r1, [r7, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f8e5 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000d3e:	e02a      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f8c2 	bl	8000ecc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f826 	bl	8000da0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d54:	88f8      	ldrh	r0, [r7, #6]
 8000d56:	2301      	movs	r3, #1
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	2164      	movs	r1, #100	; 0x64
 8000d5c:	f000 fbe0 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000d60:	88f8      	ldrh	r0, [r7, #6]
 8000d62:	2300      	movs	r3, #0
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	2168      	movs	r1, #104	; 0x68
 8000d68:	f000 fbda 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f826 	bl	8000dc4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f835 	bl	8000dee <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	6839      	ldr	r1, [r7, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f8bd 	bl	8000f08 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000d8e:	e002      	b.n	8000d96 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8000d90:	797b      	ldrb	r3, [r7, #5]
 8000d92:	73fb      	strb	r3, [r7, #15]
    break;
 8000d94:	bf00      	nop
  }

  return error_code;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	80fb      	strh	r3, [r7, #6]
 8000dac:	4613      	mov	r3, r2
 8000dae:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8000db0:	797b      	ldrb	r3, [r7, #5]
 8000db2:	88f8      	ldrh	r0, [r7, #6]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	2160      	movs	r1, #96	; 0x60
 8000db8:	f000 fbb2 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	80fb      	strh	r3, [r7, #6]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	88f8      	ldrh	r0, [r7, #6]
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	214c      	movs	r1, #76	; 0x4c
 8000ddc:	f000 fba0 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f003 fc39 	bl	8004658 <MFX_IO_Delay>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	6039      	str	r1, [r7, #0]
 8000df8:	80fb      	strh	r3, [r7, #6]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8000dfe:	797b      	ldrb	r3, [r7, #5]
 8000e00:	88f8      	ldrh	r0, [r7, #6]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	2150      	movs	r1, #80	; 0x50
 8000e06:	f000 fb8b 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f003 fc24 	bl	8004658 <MFX_IO_Delay>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	80fb      	strh	r3, [r7, #6]
 8000e24:	4613      	mov	r3, r2
 8000e26:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8000e28:	797b      	ldrb	r3, [r7, #5]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8000e2e:	88f8      	ldrh	r0, [r7, #6]
 8000e30:	2301      	movs	r3, #1
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	216c      	movs	r1, #108	; 0x6c
 8000e36:	f000 fb73 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8000e3a:	e005      	b.n	8000e48 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8000e3c:	88f8      	ldrh	r0, [r7, #6]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	2170      	movs	r1, #112	; 0x70
 8000e44:	f000 fb6c 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	2110      	movs	r1, #16
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fbc1 	bl	80045fc <MFX_IO_Read>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	2111      	movs	r1, #17
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fbb5 	bl	80045fc <MFX_IO_Read>
 8000e92:	4603      	mov	r3, r0
 8000e94:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	2112      	movs	r1, #18
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fba9 	bl	80045fc <MFX_IO_Read>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	021a      	lsls	r2, r3, #8
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	441a      	add	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	041b      	lsls	r3, r3, #16
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	4013      	ands	r3, r2
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8000ed6:	f003 fb17 	bl	8004508 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fb92 	bl	8000608 <mfxstm32l152_EnableITSource>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fba3 	bl	8000646 <mfxstm32l152_DisableITSource>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8000f14:	88f8      	ldrh	r0, [r7, #6]
 8000f16:	2301      	movs	r3, #1
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	2148      	movs	r1, #72	; 0x48
 8000f1c:	f000 fb00 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8000f34:	88f8      	ldrh	r0, [r7, #6]
 8000f36:	2300      	movs	r3, #0
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	2148      	movs	r1, #72	; 0x48
 8000f3c:	f000 faf0 	bl	8001520 <mfxstm32l152_reg24_setPinValue>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	210c      	movs	r1, #12
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 fb45 	bl	80045fc <MFX_IO_Read>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	210d      	movs	r1, #13
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fb37 	bl	80045fc <MFX_IO_Read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	041b      	lsls	r3, r3, #16
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	210e      	movs	r1, #14
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fb2b 	bl	80045fc <MFX_IO_Read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	89bb      	ldrh	r3, [r7, #12]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	4413      	add	r3, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	041b      	lsls	r3, r3, #16
 8000fb8:	4413      	add	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	4013      	ands	r3, r2
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	6039      	str	r1, [r7, #0]
 8000fd4:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	0c1b      	lsrs	r3, r3, #16
 8000fe4:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2154      	movs	r1, #84	; 0x54
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 faee 	bl	80045d4 <MFX_IO_Write>
  }
  if (pin_8_15)
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8000ffe:	7bba      	ldrb	r2, [r7, #14]
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	2155      	movs	r1, #85	; 0x55
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fae5 	bl	80045d4 <MFX_IO_Write>
  }
  if (pin_16_23)
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	2156      	movs	r1, #86	; 0x56
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fadc 	bl	80045d4 <MFX_IO_Write>
  }
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fade 	bl	80045fc <MFX_IO_Read>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	b29b      	uxth	r3, r3
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fabc 	bl	80045d4 <MFX_IO_Write>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8001064:	b084      	sub	sp, #16
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	4604      	mov	r4, r0
 800106e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001076:	4623      	mov	r3, r4
 8001078:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	2140      	movs	r1, #64	; 0x40
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fab6 	bl	80045fc <MFX_IO_Read>
 8001090:	4603      	mov	r3, r0
 8001092:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10b      	bne.n	80010b6 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	7bba      	ldrb	r2, [r7, #14]
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fa8f 	bl	80045d4 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 80010b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f003 030e 	and.w	r3, r3, #14
 80010c2:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 80010c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	b25a      	sxtb	r2, r3
 80010d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 80010da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fa6a 	bl	80045d4 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001100:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001104:	b25b      	sxtb	r3, r3
 8001106:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800110a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 800110c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001110:	b25b      	sxtb	r3, r3
 8001112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001116:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001118:	4313      	orrs	r3, r2
 800111a:	b25b      	sxtb	r3, r3
 800111c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	2181      	movs	r1, #129	; 0x81
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fa53 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 800112e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	b29b      	uxth	r3, r3
 8001134:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	b29b      	uxth	r3, r3
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	2182      	movs	r1, #130	; 0x82
 8001140:	4618      	mov	r0, r3
 8001142:	f003 fa47 	bl	80045d4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001146:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001148:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	2183      	movs	r1, #131	; 0x83
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fa3d 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 800115a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	2184      	movs	r1, #132	; 0x84
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fa31 	bl	80045d4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8001172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001174:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	b29b      	uxth	r3, r3
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	2185      	movs	r1, #133	; 0x85
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fa27 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8001186:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	b29b      	uxth	r3, r3
 800118c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	2186      	movs	r1, #134	; 0x86
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fa1b 	bl	80045d4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 800119e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011a0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	2187      	movs	r1, #135	; 0x87
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fa11 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 80011b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	2188      	movs	r1, #136	; 0x88
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fa05 	bl	80045d4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 80011ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011cc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	2189      	movs	r1, #137	; 0x89
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 f9fb 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 80011de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	218a      	movs	r1, #138	; 0x8a
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 f9ef 	bl	80045d4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 80011f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80011f8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b29b      	uxth	r3, r3
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	218b      	movs	r1, #139	; 0x8b
 8001204:	4618      	mov	r0, r3
 8001206:	f003 f9e5 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 800120a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800120c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	2190      	movs	r1, #144	; 0x90
 8001218:	4618      	mov	r0, r3
 800121a:	f003 f9db 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 800121e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001220:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	b29b      	uxth	r3, r3
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	2191      	movs	r1, #145	; 0x91
 800122c:	4618      	mov	r0, r3
 800122e:	f003 f9d1 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001232:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001234:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	b29b      	uxth	r3, r3
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	2192      	movs	r1, #146	; 0x92
 8001240:	4618      	mov	r0, r3
 8001242:	f003 f9c7 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001246:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001248:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	b29b      	uxth	r3, r3
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	2193      	movs	r1, #147	; 0x93
 8001254:	4618      	mov	r0, r3
 8001256:	f003 f9bd 	bl	80045d4 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 800125a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800125c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	b29b      	uxth	r3, r3
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	2194      	movs	r1, #148	; 0x94
 8001268:	4618      	mov	r0, r3
 800126a:	f003 f9b3 	bl	80045d4 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 800126e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	b29b      	uxth	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	218c      	movs	r1, #140	; 0x8c
 8001280:	4618      	mov	r0, r3
 8001282:	f003 f9a7 	bl	80045d4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8001286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001288:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	218d      	movs	r1, #141	; 0x8d
 8001294:	4618      	mov	r0, r3
 8001296:	f003 f99d 	bl	80045d4 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 800129a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	b29b      	uxth	r3, r3
 80012a0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	218e      	movs	r1, #142	; 0x8e
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 f991 	bl	80045d4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 80012b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012b4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	218f      	movs	r1, #143	; 0x8f
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f987 	bl	80045d4 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 80012c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80012ca:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	2196      	movs	r1, #150	; 0x96
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 f97c 	bl	80045d4 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80012dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012e6:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 80012e8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012f2:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	b29b      	uxth	r3, r3
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	2197      	movs	r1, #151	; 0x97
 8001304:	4618      	mov	r0, r3
 8001306:	f003 f965 	bl	80045d4 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800130a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800130e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	b29b      	uxth	r3, r3
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	2198      	movs	r1, #152	; 0x98
 800131a:	4618      	mov	r0, r3
 800131c:	f003 f95a 	bl	80045d4 <MFX_IO_Write>
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800132a:	b004      	add	sp, #16
 800132c:	4770      	bx	lr

0800132e <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	6039      	str	r1, [r7, #0]
 8001338:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	b298      	uxth	r0, r3
 8001340:	f107 020c 	add.w	r2, r7, #12
 8001344:	2303      	movs	r3, #3
 8001346:	2114      	movs	r1, #20
 8001348:	f003 f96c 	bl	8004624 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 800134c:	7b3b      	ldrb	r3, [r7, #12]
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	7b7b      	ldrb	r3, [r7, #13]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4313      	orrs	r3, r2
 8001356:	7bba      	ldrb	r2, [r7, #14]
 8001358:	4313      	orrs	r3, r2
 800135a:	461a      	mov	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	601a      	str	r2, [r3, #0]

}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001372:	f003 f8c9 	bl	8004508 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f944 	bl	8000608 <mfxstm32l152_EnableITSource>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	2102      	movs	r1, #2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f98f 	bl	80006ba <mfxstm32l152_ClearGlobalIT>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	2102      	movs	r1, #2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f96b 	bl	800068e <mfxstm32l152_GlobalITStatus>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	2102      	movs	r1, #2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f938 	bl	8000646 <mfxstm32l152_DisableITSource>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	2103      	movs	r1, #3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 f903 	bl	80045fc <MFX_IO_Read>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	b29b      	uxth	r3, r3
 8001410:	2104      	movs	r1, #4
 8001412:	4618      	mov	r0, r3
 8001414:	f003 f8f2 	bl	80045fc <MFX_IO_Read>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800142c:	f003 f86c 	bl	8004508 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	2104      	movs	r1, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f8e7 	bl	8000608 <mfxstm32l152_EnableITSource>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f932 	bl	80006ba <mfxstm32l152_ClearGlobalIT>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	2104      	movs	r1, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f90e 	bl	800068e <mfxstm32l152_GlobalITStatus>
 8001472:	4603      	mov	r3, r0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	2104      	movs	r1, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f8db 	bl	8000646 <mfxstm32l152_DisableITSource>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e00b      	b.n	80014c0 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <mfxstm32l152_GetInstance+0x3c>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	88fa      	ldrh	r2, [r7, #6]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d101      	bne.n	80014ba <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	e006      	b.n	80014c8 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	3301      	adds	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d9f0      	bls.n	80014a8 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 80014c6:	23ff      	movs	r3, #255	; 0xff
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	200000e8 	.word	0x200000e8

080014d8 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	e00f      	b.n	8001508 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <mfxstm32l152_ReleaseInstance+0x44>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	88fa      	ldrh	r2, [r7, #6]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d105      	bne.n	8001502 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <mfxstm32l152_ReleaseInstance+0x44>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	54d1      	strb	r1, [r2, r3]
      return idx;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	e006      	b.n	8001510 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	3301      	adds	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d9ec      	bls.n	80014e8 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800150e:	23ff      	movs	r3, #255	; 0xff
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	200000e8 	.word	0x200000e8

08001520 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	603a      	str	r2, [r7, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
 800152e:	460b      	mov	r3, r1
 8001530:	717b      	strb	r3, [r7, #5]
 8001532:	4613      	mov	r3, r2
 8001534:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	0c1b      	lsrs	r3, r3, #16
 8001548:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01e      	beq.n	800158e <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8001550:	797a      	ldrb	r2, [r7, #5]
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f003 f850 	bl	80045fc <MFX_IO_Read>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001560:	793b      	ldrb	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	4313      	orrs	r3, r2
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e008      	b.n	8001582 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8001570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001574:	43db      	mvns	r3, r3
 8001576:	b25a      	sxtb	r2, r3
 8001578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157c:	4013      	ands	r3, r2
 800157e:	b25b      	sxtb	r3, r3
 8001580:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	7979      	ldrb	r1, [r7, #5]
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	4618      	mov	r0, r3
 800158a:	f003 f823 	bl	80045d4 <MFX_IO_Write>
  }

  if (pin_8_15)
 800158e:	7b7b      	ldrb	r3, [r7, #13]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d022      	beq.n	80015da <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8001594:	797b      	ldrb	r3, [r7, #5]
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 f82c 	bl	80045fc <MFX_IO_Read>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80015a8:	793b      	ldrb	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e008      	b.n	80015ca <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 80015b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015bc:	43db      	mvns	r3, r3
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	4013      	ands	r3, r2
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80015ca:	797b      	ldrb	r3, [r7, #5]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b2d9      	uxtb	r1, r3
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fffd 	bl	80045d4 <MFX_IO_Write>
  }

  if (pin_16_23)
 80015da:	7b3b      	ldrb	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d022      	beq.n	8001626 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80015e0:	797b      	ldrb	r3, [r7, #5]
 80015e2:	3302      	adds	r3, #2
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 f806 	bl	80045fc <MFX_IO_Read>
 80015f0:	4603      	mov	r3, r0
 80015f2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80015f4:	793b      	ldrb	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	7b3b      	ldrb	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e008      	b.n	8001616 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001604:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	b25a      	sxtb	r2, r3
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	4013      	ands	r3, r2
 8001612:	b25b      	sxtb	r3, r3
 8001614:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001616:	797b      	ldrb	r3, [r7, #5]
 8001618:	3302      	adds	r3, #2
 800161a:	b2d9      	uxtb	r1, r3
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	4618      	mov	r0, r3
 8001622:	f002 ffd7 	bl	80045d4 <MFX_IO_Write>
  }
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d103      	bne.n	8001648 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e02c      	b.n	80016a2 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	891a      	ldrh	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <OV5640_RegisterBusIO+0x7c>)
 800167c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <OV5640_RegisterBusIO+0x80>)
 8001682:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4798      	blx	r3
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	e002      	b.n	80016a2 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	08002ec3 	.word	0x08002ec3
 80016b0:	08002ef5 	.word	0x08002ef5

080016b4 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d165      	bne.n	800179a <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d80e      	bhi.n	80016f2 <OV5640_Init+0x3e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00f      	beq.n	80016fa <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d00c      	beq.n	80016fa <OV5640_Init+0x46>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d009      	beq.n	80016fa <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b07      	cmp	r3, #7
 80016ea:	d006      	beq.n	80016fa <OV5640_Init+0x46>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d003      	beq.n	80016fa <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	e04f      	b.n	800179a <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e01f      	b.n	8001740 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001706:	d018      	beq.n	800173a <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001708:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <OV5640_Init+0xf0>)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	885b      	ldrh	r3, [r3, #2]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f103 0018 	add.w	r0, r3, #24
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <OV5640_Init+0xf0>)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001724:	f107 0217 	add.w	r2, r7, #23
 8001728:	2301      	movs	r3, #1
 800172a:	f001 fc13 	bl	8002f54 <ov5640_write_reg>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001738:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3301      	adds	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2bfd      	cmp	r3, #253	; 0xfd
 8001744:	d9dc      	bls.n	8001700 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d126      	bne.n	800179a <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 f9e0 	bl	8001b14 <OV5640_SetResolution>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	e01b      	b.n	800179a <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 f833 	bl	80017d0 <OV5640_SetPixelFormat>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	e010      	b.n	800179a <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001778:	2300      	movs	r3, #0
 800177a:	2201      	movs	r2, #1
 800177c:	2101      	movs	r1, #1
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 fb64 	bl	8001e4c <OV5640_SetPolarities>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e003      	b.n	800179a <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 800179a:	69bb      	ldr	r3, [r7, #24]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	080092b0 	.word	0x080092b0

080017a8 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d103      	bne.n	80017c2 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00f      	beq.n	8001804 <OV5640_SetPixelFormat+0x34>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d00c      	beq.n	8001804 <OV5640_SetPixelFormat+0x34>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d009      	beq.n	8001804 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b07      	cmp	r3, #7
 80017f4:	d006      	beq.n	8001804 <OV5640_SetPixelFormat+0x34>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d003      	beq.n	8001804 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e16a      	b.n	8001ada <OV5640_SetPixelFormat+0x30a>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3b01      	subs	r3, #1
 8001808:	2b07      	cmp	r3, #7
 800180a:	f200 80c3 	bhi.w	8001994 <OV5640_SetPixelFormat+0x1c4>
 800180e:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <OV5640_SetPixelFormat+0x44>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	0800188d 	.word	0x0800188d
 8001818:	08001835 	.word	0x08001835
 800181c:	08001995 	.word	0x08001995
 8001820:	08001995 	.word	0x08001995
 8001824:	08001995 	.word	0x08001995
 8001828:	08001995 	.word	0x08001995
 800182c:	080018e5 	.word	0x080018e5
 8001830:	0800193d 	.word	0x0800193d
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	e024      	b.n	8001884 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001840:	d01d      	beq.n	800187e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001842:	4aa8      	ldr	r2, [pc, #672]	; (8001ae4 <OV5640_SetPixelFormat+0x314>)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	885b      	ldrh	r3, [r3, #2]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f103 0018 	add.w	r0, r3, #24
 8001856:	4aa3      	ldr	r2, [pc, #652]	; (8001ae4 <OV5640_SetPixelFormat+0x314>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800185e:	f107 020f 	add.w	r2, r7, #15
 8001862:	2301      	movs	r3, #1
 8001864:	f001 fb76 	bl	8002f54 <ov5640_write_reg>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e003      	b.n	800187e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001876:	2101      	movs	r1, #1
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f001 fb08 	bl	8002e8e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	3301      	adds	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d9d7      	bls.n	800183a <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800188a:	e0af      	b.n	80019ec <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	e024      	b.n	80018dc <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001898:	d01d      	beq.n	80018d6 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800189a:	4a93      	ldr	r2, [pc, #588]	; (8001ae8 <OV5640_SetPixelFormat+0x318>)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	885b      	ldrh	r3, [r3, #2]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f103 0018 	add.w	r0, r3, #24
 80018ae:	4a8e      	ldr	r2, [pc, #568]	; (8001ae8 <OV5640_SetPixelFormat+0x318>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80018b6:	f107 020f 	add.w	r2, r7, #15
 80018ba:	2301      	movs	r3, #1
 80018bc:	f001 fb4a 	bl	8002f54 <ov5640_write_reg>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e003      	b.n	80018d6 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80018ce:	2101      	movs	r1, #1
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f001 fadc 	bl	8002e8e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	3301      	adds	r3, #1
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d9d7      	bls.n	8001892 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80018e2:	e083      	b.n	80019ec <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	e024      	b.n	8001934 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018f0:	d01d      	beq.n	800192e <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80018f2:	4a7e      	ldr	r2, [pc, #504]	; (8001aec <OV5640_SetPixelFormat+0x31c>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	885b      	ldrh	r3, [r3, #2]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f103 0018 	add.w	r0, r3, #24
 8001906:	4a79      	ldr	r2, [pc, #484]	; (8001aec <OV5640_SetPixelFormat+0x31c>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800190e:	f107 020f 	add.w	r2, r7, #15
 8001912:	2301      	movs	r3, #1
 8001914:	f001 fb1e 	bl	8002f54 <ov5640_write_reg>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e003      	b.n	800192e <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001926:	2101      	movs	r1, #1
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f001 fab0 	bl	8002e8e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	3301      	adds	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d9d7      	bls.n	80018ea <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 800193a:	e057      	b.n	80019ec <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e024      	b.n	800198c <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001948:	d01d      	beq.n	8001986 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800194a:	4a69      	ldr	r2, [pc, #420]	; (8001af0 <OV5640_SetPixelFormat+0x320>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	885b      	ldrh	r3, [r3, #2]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f103 0018 	add.w	r0, r3, #24
 800195e:	4a64      	ldr	r2, [pc, #400]	; (8001af0 <OV5640_SetPixelFormat+0x320>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001966:	f107 020f 	add.w	r2, r7, #15
 800196a:	2301      	movs	r3, #1
 800196c:	f001 faf2 	bl	8002f54 <ov5640_write_reg>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e003      	b.n	8001986 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800197e:	2101      	movs	r1, #1
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f001 fa84 	bl	8002e8e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	3301      	adds	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d9d7      	bls.n	8001942 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001992:	e02b      	b.n	80019ec <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	e024      	b.n	80019e4 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a0:	d01d      	beq.n	80019de <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80019a2:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <OV5640_SetPixelFormat+0x324>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	885b      	ldrh	r3, [r3, #2]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f103 0018 	add.w	r0, r3, #24
 80019b6:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <OV5640_SetPixelFormat+0x324>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019be:	f107 020f 	add.w	r2, r7, #15
 80019c2:	2301      	movs	r3, #1
 80019c4:	f001 fac6 	bl	8002f54 <ov5640_write_reg>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e003      	b.n	80019de <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80019d6:	2101      	movs	r1, #1
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 fa58 	bl	8002e8e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3301      	adds	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d9d7      	bls.n	800199a <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80019ea:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d173      	bne.n	8001ada <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 0018 	add.w	r0, r3, #24
 80019f8:	f107 020f 	add.w	r2, r7, #15
 80019fc:	2301      	movs	r3, #1
 80019fe:	f643 0121 	movw	r1, #14369	; 0x3821
 8001a02:	f001 fa90 	bl	8002f26 <ov5640_read_reg>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e062      	b.n	8001ada <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	f043 0320 	orr.w	r3, r3, #32
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f103 0018 	add.w	r0, r3, #24
 8001a24:	f107 020f 	add.w	r2, r7, #15
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f643 0121 	movw	r1, #14369	; 0x3821
 8001a2e:	f001 fa91 	bl	8002f54 <ov5640_write_reg>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e04c      	b.n	8001ada <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f103 0018 	add.w	r0, r3, #24
 8001a46:	f107 020f 	add.w	r2, r7, #15
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f243 0102 	movw	r1, #12290	; 0x3002
 8001a50:	f001 fa69 	bl	8002f26 <ov5640_read_reg>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e03b      	b.n	8001ada <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	f023 031c 	bic.w	r3, r3, #28
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 0018 	add.w	r0, r3, #24
 8001a72:	f107 020f 	add.w	r2, r7, #15
 8001a76:	2301      	movs	r3, #1
 8001a78:	f243 0102 	movw	r1, #12290	; 0x3002
 8001a7c:	f001 fa6a 	bl	8002f54 <ov5640_write_reg>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e025      	b.n	8001ada <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f103 0018 	add.w	r0, r3, #24
 8001a94:	f107 020f 	add.w	r2, r7, #15
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f243 0106 	movw	r1, #12294	; 0x3006
 8001a9e:	f001 fa42 	bl	8002f26 <ov5640_read_reg>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e014      	b.n	8001ada <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f103 0018 	add.w	r0, r3, #24
 8001ac0:	f107 020f 	add.w	r2, r7, #15
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f243 0106 	movw	r1, #12294	; 0x3006
 8001aca:	f001 fa43 	bl	8002f54 <ov5640_write_reg>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ad8:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001ada:	697b      	ldr	r3, [r7, #20]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	080096a8 	.word	0x080096a8
 8001ae8:	080096b0 	.word	0x080096b0
 8001aec:	080096b8 	.word	0x080096b8
 8001af0:	080096c0 	.word	0x080096c0
 8001af4:	080096c8 	.word	0x080096c8

08001af8 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d903      	bls.n	8001b30 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e0d8      	b.n	8001ce2 <OV5640_SetResolution+0x1ce>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	f200 80d1 	bhi.w	8001cda <OV5640_SetResolution+0x1c6>
 8001b38:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <OV5640_SetResolution+0x2c>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b55 	.word	0x08001b55
 8001b44:	08001ba3 	.word	0x08001ba3
 8001b48:	08001bf1 	.word	0x08001bf1
 8001b4c:	08001c3f 	.word	0x08001c3f
 8001b50:	08001c8d 	.word	0x08001c8d
  {
    /* Initialize OV5640 */
    switch (Resolution)
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	e01f      	b.n	8001b9a <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b60:	d018      	beq.n	8001b94 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001b62:	4a62      	ldr	r2, [pc, #392]	; (8001cec <OV5640_SetResolution+0x1d8>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	885b      	ldrh	r3, [r3, #2]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f103 0018 	add.w	r0, r3, #24
 8001b76:	4a5d      	ldr	r2, [pc, #372]	; (8001cec <OV5640_SetResolution+0x1d8>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b7e:	f107 020f 	add.w	r2, r7, #15
 8001b82:	2301      	movs	r3, #1
 8001b84:	f001 f9e6 	bl	8002f54 <ov5640_write_reg>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b92:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3301      	adds	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d9dc      	bls.n	8001b5a <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001ba0:	e09f      	b.n	8001ce2 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	e01f      	b.n	8001be8 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bae:	d018      	beq.n	8001be2 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	; (8001cf0 <OV5640_SetResolution+0x1dc>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	885b      	ldrh	r3, [r3, #2]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 0018 	add.w	r0, r3, #24
 8001bc4:	4a4a      	ldr	r2, [pc, #296]	; (8001cf0 <OV5640_SetResolution+0x1dc>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001bcc:	f107 020f 	add.w	r2, r7, #15
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f001 f9bf 	bl	8002f54 <ov5640_write_reg>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001be0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3301      	adds	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d9dc      	bls.n	8001ba8 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001bee:	e078      	b.n	8001ce2 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e01f      	b.n	8001c36 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfc:	d018      	beq.n	8001c30 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001bfe:	4a3d      	ldr	r2, [pc, #244]	; (8001cf4 <OV5640_SetResolution+0x1e0>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	885b      	ldrh	r3, [r3, #2]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f103 0018 	add.w	r0, r3, #24
 8001c12:	4a38      	ldr	r2, [pc, #224]	; (8001cf4 <OV5640_SetResolution+0x1e0>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c1a:	f107 020f 	add.w	r2, r7, #15
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f001 f998 	bl	8002f54 <ov5640_write_reg>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c2e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	3301      	adds	r3, #1
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d9dc      	bls.n	8001bf6 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001c3c:	e051      	b.n	8001ce2 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	e01f      	b.n	8001c84 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c4a:	d018      	beq.n	8001c7e <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001c4c:	4a2a      	ldr	r2, [pc, #168]	; (8001cf8 <OV5640_SetResolution+0x1e4>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	885b      	ldrh	r3, [r3, #2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f103 0018 	add.w	r0, r3, #24
 8001c60:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <OV5640_SetResolution+0x1e4>)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c68:	f107 020f 	add.w	r2, r7, #15
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f001 f971 	bl	8002f54 <ov5640_write_reg>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	3301      	adds	r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d9dc      	bls.n	8001c44 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001c8a:	e02a      	b.n	8001ce2 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	e01f      	b.n	8001cd2 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c98:	d018      	beq.n	8001ccc <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001c9a:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <OV5640_SetResolution+0x1e8>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	885b      	ldrh	r3, [r3, #2]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f103 0018 	add.w	r0, r3, #24
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <OV5640_SetResolution+0x1e8>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cb6:	f107 020f 	add.w	r2, r7, #15
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f001 f94a 	bl	8002f54 <ov5640_write_reg>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cca:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d9dc      	bls.n	8001c92 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001cd8:	e003      	b.n	8001ce2 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cde:	617b      	str	r3, [r7, #20]
        break;
 8001ce0:	bf00      	nop
    }
  }

  return ret;
 8001ce2:	697b      	ldr	r3, [r7, #20]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	080096d0 	.word	0x080096d0
 8001cf0:	080096e0 	.word	0x080096e0
 8001cf4:	080096f0 	.word	0x080096f0
 8001cf8:	08009700 	.word	0x08009700
 8001cfc:	08009710 	.word	0x08009710

08001d00 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f103 0018 	add.w	r0, r3, #24
 8001d10:	f107 020f 	add.w	r2, r7, #15
 8001d14:	2301      	movs	r3, #1
 8001d16:	f643 0108 	movw	r1, #14344	; 0x3808
 8001d1a:	f001 f904 	bl	8002f26 <ov5640_read_reg>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e08a      	b.n	8001e42 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f103 0018 	add.w	r0, r3, #24
 8001d3a:	f107 020f 	add.w	r2, r7, #15
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f643 0109 	movw	r1, #14345	; 0x3809
 8001d44:	f001 f8ef 	bl	8002f26 <ov5640_read_reg>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e075      	b.n	8001e42 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	8a7b      	ldrh	r3, [r7, #18]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f103 0018 	add.w	r0, r3, #24
 8001d66:	f107 020f 	add.w	r2, r7, #15
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f643 010a 	movw	r1, #14346	; 0x380a
 8001d70:	f001 f8d9 	bl	8002f26 <ov5640_read_reg>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e05f      	b.n	8001e42 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f103 0018 	add.w	r0, r3, #24
 8001d90:	f107 020f 	add.w	r2, r7, #15
 8001d94:	2301      	movs	r3, #1
 8001d96:	f643 010b 	movw	r1, #14347	; 0x380b
 8001d9a:	f001 f8c4 	bl	8002f26 <ov5640_read_reg>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e04a      	b.n	8001e42 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	8a3b      	ldrh	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001db6:	8a7b      	ldrh	r3, [r7, #18]
 8001db8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001dbc:	d109      	bne.n	8001dd2 <OV5640_GetResolution+0xd2>
 8001dbe:	8a3b      	ldrh	r3, [r7, #16]
 8001dc0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001dc4:	d105      	bne.n	8001dd2 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e037      	b.n	8001e42 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001dd2:	8a7b      	ldrh	r3, [r7, #18]
 8001dd4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001dd8:	d109      	bne.n	8001dee <OV5640_GetResolution+0xee>
 8001dda:	8a3b      	ldrh	r3, [r7, #16]
 8001ddc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001de0:	d105      	bne.n	8001dee <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2203      	movs	r2, #3
 8001de6:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e029      	b.n	8001e42 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001dee:	8a7b      	ldrh	r3, [r7, #18]
 8001df0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001df4:	d109      	bne.n	8001e0a <OV5640_GetResolution+0x10a>
 8001df6:	8a3b      	ldrh	r3, [r7, #16]
 8001df8:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001dfc:	d105      	bne.n	8001e0a <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2202      	movs	r2, #2
 8001e02:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e01b      	b.n	8001e42 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001e0a:	8a7b      	ldrh	r3, [r7, #18]
 8001e0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e10:	d108      	bne.n	8001e24 <OV5640_GetResolution+0x124>
 8001e12:	8a3b      	ldrh	r3, [r7, #16]
 8001e14:	2bf0      	cmp	r3, #240	; 0xf0
 8001e16:	d105      	bne.n	8001e24 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e00e      	b.n	8001e42 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001e24:	8a7b      	ldrh	r3, [r7, #18]
 8001e26:	2ba0      	cmp	r3, #160	; 0xa0
 8001e28:	d108      	bne.n	8001e3c <OV5640_GetResolution+0x13c>
 8001e2a:	8a3b      	ldrh	r3, [r7, #16]
 8001e2c:	2b78      	cmp	r3, #120	; 0x78
 8001e2e:	d105      	bne.n	8001e3c <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e002      	b.n	8001e42 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e40:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001e42:	697b      	ldr	r3, [r7, #20]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d011      	beq.n	8001e88 <OV5640_SetPolarities+0x3c>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <OV5640_SetPolarities+0x24>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d10b      	bne.n	8001e88 <OV5640_SetPolarities+0x3c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <OV5640_SetPolarities+0x3c>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d006      	beq.n	8001e90 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e01e      	b.n	8001ece <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	015b      	lsls	r3, r3, #5
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f103 0018 	add.w	r0, r3, #24
 8001eb4:	f107 0213 	add.w	r2, r7, #19
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f244 7140 	movw	r1, #18240	; 0x4740
 8001ebe:	f001 f849 	bl	8002f54 <ov5640_write_reg>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ecc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001ece:	697b      	ldr	r3, [r7, #20]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f103 0018 	add.w	r0, r3, #24
 8001ef2:	f107 020b 	add.w	r2, r7, #11
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f243 0108 	movw	r1, #12296	; 0x3008
 8001efc:	f001 f82a 	bl	8002f54 <ov5640_write_reg>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e032      	b.n	8001f74 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001f0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 ffbb 	bl	8002e8e <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f103 0018 	add.w	r0, r3, #24
 8001f1e:	f107 020b 	add.w	r2, r7, #11
 8001f22:	2301      	movs	r3, #1
 8001f24:	f243 010a 	movw	r1, #12298	; 0x300a
 8001f28:	f000 fffd 	bl	8002f26 <ov5640_read_reg>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e01c      	b.n	8001f74 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	021a      	lsls	r2, r3, #8
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f103 0018 	add.w	r0, r3, #24
 8001f48:	f107 020b 	add.w	r2, r7, #11
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f243 010b 	movw	r1, #12299	; 0x300b
 8001f52:	f000 ffe8 	bl	8002f26 <ov5640_read_reg>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	e007      	b.n	8001f74 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	7afa      	ldrb	r2, [r7, #11]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001f74:	68fb      	ldr	r3, [r7, #12]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e01f      	b.n	8001fd6 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2201      	movs	r2, #1
 8001fac:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f103 0018 	add.w	r0, r3, #24
 8001ff8:	f107 020f 	add.w	r2, r7, #15
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f243 4106 	movw	r1, #13318	; 0x3406
 8002002:	f000 ffa7 	bl	8002f54 <ov5640_write_reg>
 8002006:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 800200e:	2346      	movs	r3, #70	; 0x46
 8002010:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 0018 	add.w	r0, r3, #24
 8002018:	f107 020f 	add.w	r2, r7, #15
 800201c:	2301      	movs	r3, #1
 800201e:	f245 1190 	movw	r1, #20880	; 0x5190
 8002022:	f000 ff97 	bl	8002f54 <ov5640_write_reg>
 8002026:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 800202e:	23f8      	movs	r3, #248	; 0xf8
 8002030:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f103 0018 	add.w	r0, r3, #24
 8002038:	f107 020f 	add.w	r2, r7, #15
 800203c:	2301      	movs	r3, #1
 800203e:	f245 1191 	movw	r1, #20881	; 0x5191
 8002042:	f000 ff87 	bl	8002f54 <ov5640_write_reg>
 8002046:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 800204e:	2304      	movs	r3, #4
 8002050:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f103 0018 	add.w	r0, r3, #24
 8002058:	f107 020f 	add.w	r2, r7, #15
 800205c:	2301      	movs	r3, #1
 800205e:	f245 1192 	movw	r1, #20882	; 0x5192
 8002062:	f000 ff77 	bl	8002f54 <ov5640_write_reg>
 8002066:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80db 	bne.w	8002226 <OV5640_SetLightMode+0x242>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	3b01      	subs	r3, #1
 8002074:	2b07      	cmp	r3, #7
 8002076:	f200 80af 	bhi.w	80021d8 <OV5640_SetLightMode+0x1f4>
 800207a:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <OV5640_SetLightMode+0x9c>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	080020a1 	.word	0x080020a1
 8002084:	080020ef 	.word	0x080020ef
 8002088:	080021d9 	.word	0x080021d9
 800208c:	0800218b 	.word	0x0800218b
 8002090:	080021d9 	.word	0x080021d9
 8002094:	080021d9 	.word	0x080021d9
 8002098:	080021d9 	.word	0x080021d9
 800209c:	0800213d 	.word	0x0800213d
  {
    switch (LightMode)
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	e01f      	b.n	80020e6 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ac:	d018      	beq.n	80020e0 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80020ae:	4a61      	ldr	r2, [pc, #388]	; (8002234 <OV5640_SetLightMode+0x250>)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	885b      	ldrh	r3, [r3, #2]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f103 0018 	add.w	r0, r3, #24
 80020c2:	4a5c      	ldr	r2, [pc, #368]	; (8002234 <OV5640_SetLightMode+0x250>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80020ca:	f107 020f 	add.w	r2, r7, #15
 80020ce:	2301      	movs	r3, #1
 80020d0:	f000 ff40 	bl	8002f54 <ov5640_write_reg>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020de:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3301      	adds	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d9dc      	bls.n	80020a6 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 80020ec:	e09c      	b.n	8002228 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	e01f      	b.n	8002134 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020fa:	d018      	beq.n	800212e <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80020fc:	4a4e      	ldr	r2, [pc, #312]	; (8002238 <OV5640_SetLightMode+0x254>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	885b      	ldrh	r3, [r3, #2]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 0018 	add.w	r0, r3, #24
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <OV5640_SetLightMode+0x254>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002118:	f107 020f 	add.w	r2, r7, #15
 800211c:	2301      	movs	r3, #1
 800211e:	f000 ff19 	bl	8002f54 <ov5640_write_reg>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	3301      	adds	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d9dc      	bls.n	80020f4 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 800213a:	e075      	b.n	8002228 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e01f      	b.n	8002182 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002148:	d018      	beq.n	800217c <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <OV5640_SetLightMode+0x258>)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	885b      	ldrh	r3, [r3, #2]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f103 0018 	add.w	r0, r3, #24
 800215e:	4a37      	ldr	r2, [pc, #220]	; (800223c <OV5640_SetLightMode+0x258>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002166:	f107 020f 	add.w	r2, r7, #15
 800216a:	2301      	movs	r3, #1
 800216c:	f000 fef2 	bl	8002f54 <ov5640_write_reg>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800217a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	3301      	adds	r3, #1
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b06      	cmp	r3, #6
 8002186:	d9dc      	bls.n	8002142 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002188:	e04e      	b.n	8002228 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e01f      	b.n	80021d0 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002196:	d018      	beq.n	80021ca <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002198:	4a29      	ldr	r2, [pc, #164]	; (8002240 <OV5640_SetLightMode+0x25c>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	885b      	ldrh	r3, [r3, #2]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f103 0018 	add.w	r0, r3, #24
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <OV5640_SetLightMode+0x25c>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021b4:	f107 020f 	add.w	r2, r7, #15
 80021b8:	2301      	movs	r3, #1
 80021ba:	f000 fecb 	bl	8002f54 <ov5640_write_reg>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	3301      	adds	r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d9dc      	bls.n	8002190 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 80021d6:	e027      	b.n	8002228 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	e01f      	b.n	800221e <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d018      	beq.n	8002218 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <OV5640_SetLightMode+0x260>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	885b      	ldrh	r3, [r3, #2]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f103 0018 	add.w	r0, r3, #24
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <OV5640_SetLightMode+0x260>)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002202:	f107 020f 	add.w	r2, r7, #15
 8002206:	2301      	movs	r3, #1
 8002208:	f000 fea4 	bl	8002f54 <ov5640_write_reg>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002216:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	3301      	adds	r3, #1
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d9dc      	bls.n	80021de <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8002224:	e000      	b.n	8002228 <OV5640_SetLightMode+0x244>
    }
  }
 8002226:	bf00      	nop
  return ret;
 8002228:	697b      	ldr	r3, [r7, #20]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	08009720 	.word	0x08009720
 8002238:	0800973c 	.word	0x0800973c
 800223c:	08009758 	.word	0x08009758
 8002240:	08009774 	.word	0x08009774
 8002244:	08009790 	.word	0x08009790

08002248 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	2b1f      	cmp	r3, #31
 8002258:	f200 81c0 	bhi.w	80025dc <OV5640_SetColorEffect+0x394>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <OV5640_SetColorEffect+0x1c>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	080022e5 	.word	0x080022e5
 8002268:	0800236f 	.word	0x0800236f
 800226c:	080025dd 	.word	0x080025dd
 8002270:	080023f9 	.word	0x080023f9
 8002274:	080025dd 	.word	0x080025dd
 8002278:	080025dd 	.word	0x080025dd
 800227c:	080025dd 	.word	0x080025dd
 8002280:	08002483 	.word	0x08002483
 8002284:	080025dd 	.word	0x080025dd
 8002288:	080025dd 	.word	0x080025dd
 800228c:	080025dd 	.word	0x080025dd
 8002290:	080025dd 	.word	0x080025dd
 8002294:	080025dd 	.word	0x080025dd
 8002298:	080025dd 	.word	0x080025dd
 800229c:	080025dd 	.word	0x080025dd
 80022a0:	0800250d 	.word	0x0800250d
 80022a4:	080025dd 	.word	0x080025dd
 80022a8:	080025dd 	.word	0x080025dd
 80022ac:	080025dd 	.word	0x080025dd
 80022b0:	080025dd 	.word	0x080025dd
 80022b4:	080025dd 	.word	0x080025dd
 80022b8:	080025dd 	.word	0x080025dd
 80022bc:	080025dd 	.word	0x080025dd
 80022c0:	080025dd 	.word	0x080025dd
 80022c4:	080025dd 	.word	0x080025dd
 80022c8:	080025dd 	.word	0x080025dd
 80022cc:	080025dd 	.word	0x080025dd
 80022d0:	080025dd 	.word	0x080025dd
 80022d4:	080025dd 	.word	0x080025dd
 80022d8:	080025dd 	.word	0x080025dd
 80022dc:	080025dd 	.word	0x080025dd
 80022e0:	08002595 	.word	0x08002595
  uint8_t tmp;

  switch (Effect)
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 80022e4:	23ff      	movs	r3, #255	; 0xff
 80022e6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0018 	add.w	r0, r3, #24
 80022ee:	f107 020b 	add.w	r2, r7, #11
 80022f2:	2301      	movs	r3, #1
 80022f4:	f245 0101 	movw	r1, #20481	; 0x5001
 80022f8:	f000 fe2c 	bl	8002f54 <ov5640_write_reg>
 80022fc:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10c      	bne.n	800231e <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002304:	2318      	movs	r3, #24
 8002306:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f103 0018 	add.w	r0, r3, #24
 800230e:	f107 020b 	add.w	r2, r7, #11
 8002312:	2301      	movs	r3, #1
 8002314:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002318:	f000 fe1c 	bl	8002f54 <ov5640_write_reg>
 800231c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10c      	bne.n	800233e <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8002324:	23a0      	movs	r3, #160	; 0xa0
 8002326:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f103 0018 	add.w	r0, r3, #24
 800232e:	f107 020b 	add.w	r2, r7, #11
 8002332:	2301      	movs	r3, #1
 8002334:	f245 5183 	movw	r1, #21891	; 0x5583
 8002338:	f000 fe0c 	bl	8002f54 <ov5640_write_reg>
 800233c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10c      	bne.n	800235e <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002344:	2340      	movs	r3, #64	; 0x40
 8002346:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f103 0018 	add.w	r0, r3, #24
 800234e:	f107 020b 	add.w	r2, r7, #11
 8002352:	2301      	movs	r3, #1
 8002354:	f245 5184 	movw	r1, #21892	; 0x5584
 8002358:	f000 fdfc 	bl	8002f54 <ov5640_write_reg>
 800235c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 815f 	beq.w	8002624 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800236a:	60fb      	str	r3, [r7, #12]
      }
      break;
 800236c:	e15a      	b.n	8002624 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 800236e:	23ff      	movs	r3, #255	; 0xff
 8002370:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f103 0018 	add.w	r0, r3, #24
 8002378:	f107 020b 	add.w	r2, r7, #11
 800237c:	2301      	movs	r3, #1
 800237e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002382:	f000 fde7 	bl	8002f54 <ov5640_write_reg>
 8002386:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 800238e:	2318      	movs	r3, #24
 8002390:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f103 0018 	add.w	r0, r3, #24
 8002398:	f107 020b 	add.w	r2, r7, #11
 800239c:	2301      	movs	r3, #1
 800239e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023a2:	f000 fdd7 	bl	8002f54 <ov5640_write_reg>
 80023a6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f103 0018 	add.w	r0, r3, #24
 80023b8:	f107 020b 	add.w	r2, r7, #11
 80023bc:	2301      	movs	r3, #1
 80023be:	f245 5183 	movw	r1, #21891	; 0x5583
 80023c2:	f000 fdc7 	bl	8002f54 <ov5640_write_reg>
 80023c6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 80023ce:	23c0      	movs	r3, #192	; 0xc0
 80023d0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f103 0018 	add.w	r0, r3, #24
 80023d8:	f107 020b 	add.w	r2, r7, #11
 80023dc:	2301      	movs	r3, #1
 80023de:	f245 5184 	movw	r1, #21892	; 0x5584
 80023e2:	f000 fdb7 	bl	8002f54 <ov5640_write_reg>
 80023e6:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 811c 	beq.w	8002628 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80023f6:	e117      	b.n	8002628 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 80023f8:	23ff      	movs	r3, #255	; 0xff
 80023fa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f103 0018 	add.w	r0, r3, #24
 8002402:	f107 020b 	add.w	r2, r7, #11
 8002406:	2301      	movs	r3, #1
 8002408:	f245 0101 	movw	r1, #20481	; 0x5001
 800240c:	f000 fda2 	bl	8002f54 <ov5640_write_reg>
 8002410:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10c      	bne.n	8002432 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002418:	2318      	movs	r3, #24
 800241a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 0018 	add.w	r0, r3, #24
 8002422:	f107 020b 	add.w	r2, r7, #11
 8002426:	2301      	movs	r3, #1
 8002428:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800242c:	f000 fd92 	bl	8002f54 <ov5640_write_reg>
 8002430:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10c      	bne.n	8002452 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8002438:	2360      	movs	r3, #96	; 0x60
 800243a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f103 0018 	add.w	r0, r3, #24
 8002442:	f107 020b 	add.w	r2, r7, #11
 8002446:	2301      	movs	r3, #1
 8002448:	f245 5183 	movw	r1, #21891	; 0x5583
 800244c:	f000 fd82 	bl	8002f54 <ov5640_write_reg>
 8002450:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10c      	bne.n	8002472 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002458:	2360      	movs	r3, #96	; 0x60
 800245a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f103 0018 	add.w	r0, r3, #24
 8002462:	f107 020b 	add.w	r2, r7, #11
 8002466:	2301      	movs	r3, #1
 8002468:	f245 5184 	movw	r1, #21892	; 0x5584
 800246c:	f000 fd72 	bl	8002f54 <ov5640_write_reg>
 8002470:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80d9 	beq.w	800262c <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002480:	e0d4      	b.n	800262c <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8002482:	23ff      	movs	r3, #255	; 0xff
 8002484:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f103 0018 	add.w	r0, r3, #24
 800248c:	f107 020b 	add.w	r2, r7, #11
 8002490:	2301      	movs	r3, #1
 8002492:	f245 0101 	movw	r1, #20481	; 0x5001
 8002496:	f000 fd5d 	bl	8002f54 <ov5640_write_reg>
 800249a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80024a2:	2318      	movs	r3, #24
 80024a4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f103 0018 	add.w	r0, r3, #24
 80024ac:	f107 020b 	add.w	r2, r7, #11
 80024b0:	2301      	movs	r3, #1
 80024b2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024b6:	f000 fd4d 	bl	8002f54 <ov5640_write_reg>
 80024ba:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f103 0018 	add.w	r0, r3, #24
 80024cc:	f107 020b 	add.w	r2, r7, #11
 80024d0:	2301      	movs	r3, #1
 80024d2:	f245 5183 	movw	r1, #21891	; 0x5583
 80024d6:	f000 fd3d 	bl	8002f54 <ov5640_write_reg>
 80024da:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f103 0018 	add.w	r0, r3, #24
 80024ec:	f107 020b 	add.w	r2, r7, #11
 80024f0:	2301      	movs	r3, #1
 80024f2:	f245 5184 	movw	r1, #21892	; 0x5584
 80024f6:	f000 fd2d 	bl	8002f54 <ov5640_write_reg>
 80024fa:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8096 	beq.w	8002630 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002508:	60fb      	str	r3, [r7, #12]
      }
      break;
 800250a:	e091      	b.n	8002630 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 800250c:	23ff      	movs	r3, #255	; 0xff
 800250e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f103 0018 	add.w	r0, r3, #24
 8002516:	f107 020b 	add.w	r2, r7, #11
 800251a:	2301      	movs	r3, #1
 800251c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002520:	f000 fd18 	bl	8002f54 <ov5640_write_reg>
 8002524:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 800252c:	2318      	movs	r3, #24
 800252e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f103 0018 	add.w	r0, r3, #24
 8002536:	f107 020b 	add.w	r2, r7, #11
 800253a:	2301      	movs	r3, #1
 800253c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002540:	f000 fd08 	bl	8002f54 <ov5640_write_reg>
 8002544:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10c      	bne.n	8002566 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 800254c:	2340      	movs	r3, #64	; 0x40
 800254e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f103 0018 	add.w	r0, r3, #24
 8002556:	f107 020b 	add.w	r2, r7, #11
 800255a:	2301      	movs	r3, #1
 800255c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002560:	f000 fcf8 	bl	8002f54 <ov5640_write_reg>
 8002564:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10c      	bne.n	8002586 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 800256c:	23a0      	movs	r3, #160	; 0xa0
 800256e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f103 0018 	add.w	r0, r3, #24
 8002576:	f107 020b 	add.w	r2, r7, #11
 800257a:	2301      	movs	r3, #1
 800257c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002580:	f000 fce8 	bl	8002f54 <ov5640_write_reg>
 8002584:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d053      	beq.n	8002634 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002590:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002592:	e04f      	b.n	8002634 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002594:	23ff      	movs	r3, #255	; 0xff
 8002596:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0018 	add.w	r0, r3, #24
 800259e:	f107 020b 	add.w	r2, r7, #11
 80025a2:	2301      	movs	r3, #1
 80025a4:	f245 0101 	movw	r1, #20481	; 0x5001
 80025a8:	f000 fcd4 	bl	8002f54 <ov5640_write_reg>
 80025ac:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10c      	bne.n	80025ce <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 80025b4:	2340      	movs	r3, #64	; 0x40
 80025b6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f103 0018 	add.w	r0, r3, #24
 80025be:	f107 020b 	add.w	r2, r7, #11
 80025c2:	2301      	movs	r3, #1
 80025c4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025c8:	f000 fcc4 	bl	8002f54 <ov5640_write_reg>
 80025cc:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d031      	beq.n	8002638 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80025da:	e02d      	b.n	8002638 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 80025dc:	237f      	movs	r3, #127	; 0x7f
 80025de:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f103 0018 	add.w	r0, r3, #24
 80025e6:	f107 020b 	add.w	r2, r7, #11
 80025ea:	2301      	movs	r3, #1
 80025ec:	f245 0101 	movw	r1, #20481	; 0x5001
 80025f0:	f000 fcb0 	bl	8002f54 <ov5640_write_reg>
 80025f4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10c      	bne.n	8002616 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 80025fc:	2300      	movs	r3, #0
 80025fe:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f103 0018 	add.w	r0, r3, #24
 8002606:	f107 020b 	add.w	r2, r7, #11
 800260a:	2301      	movs	r3, #1
 800260c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002610:	f000 fca0 	bl	8002f54 <ov5640_write_reg>
 8002614:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00f      	beq.n	800263c <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002620:	60fb      	str	r3, [r7, #12]
      }

      break;
 8002622:	e00b      	b.n	800263c <OV5640_SetColorEffect+0x3f4>
      break;
 8002624:	bf00      	nop
 8002626:	e00a      	b.n	800263e <OV5640_SetColorEffect+0x3f6>
      break;
 8002628:	bf00      	nop
 800262a:	e008      	b.n	800263e <OV5640_SetColorEffect+0x3f6>
      break;
 800262c:	bf00      	nop
 800262e:	e006      	b.n	800263e <OV5640_SetColorEffect+0x3f6>
      break;
 8002630:	bf00      	nop
 8002632:	e004      	b.n	800263e <OV5640_SetColorEffect+0x3f6>
      break;
 8002634:	bf00      	nop
 8002636:	e002      	b.n	800263e <OV5640_SetColorEffect+0x3f6>
      break;
 8002638:	bf00      	nop
 800263a:	e000      	b.n	800263e <OV5640_SetColorEffect+0x3f6>
      break;
 800263c:	bf00      	nop
  }

  return ret;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8002652:	4a34      	ldr	r2, [pc, #208]	; (8002724 <OV5640_SetBrightness+0xdc>)
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	ca07      	ldmia	r2, {r0, r1, r2}
 800265a:	c303      	stmia	r3!, {r0, r1}
 800265c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800265e:	23ff      	movs	r3, #255	; 0xff
 8002660:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f103 0018 	add.w	r0, r3, #24
 8002668:	f107 020f 	add.w	r2, r7, #15
 800266c:	2301      	movs	r3, #1
 800266e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002672:	f000 fc6f 	bl	8002f54 <ov5640_write_reg>
 8002676:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d112      	bne.n	80026a4 <OV5640_SetBrightness+0x5c>
  {
    tmp = brightness_level[Level + 4];
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	3304      	adds	r3, #4
 8002682:	f107 0220 	add.w	r2, r7, #32
 8002686:	4413      	add	r3, r2
 8002688:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800268c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f103 0018 	add.w	r0, r3, #24
 8002694:	f107 020f 	add.w	r2, r7, #15
 8002698:	2301      	movs	r3, #1
 800269a:	f245 5187 	movw	r1, #21895	; 0x5587
 800269e:	f000 fc59 	bl	8002f54 <ov5640_write_reg>
 80026a2:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <OV5640_SetBrightness+0x7c>
  {
    tmp = 0x04;
 80026aa:	2304      	movs	r3, #4
 80026ac:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f103 0018 	add.w	r0, r3, #24
 80026b4:	f107 020f 	add.w	r2, r7, #15
 80026b8:	2301      	movs	r3, #1
 80026ba:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80026be:	f000 fc49 	bl	8002f54 <ov5640_write_reg>
 80026c2:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d127      	bne.n	800271a <OV5640_SetBrightness+0xd2>
  {
    if (Level < 0)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da12      	bge.n	80026f6 <OV5640_SetBrightness+0xae>
    {
      tmp = 0x01;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f103 0018 	add.w	r0, r3, #24
 80026da:	f107 020f 	add.w	r2, r7, #15
 80026de:	2301      	movs	r3, #1
 80026e0:	f245 5188 	movw	r1, #21896	; 0x5588
 80026e4:	f000 fc36 	bl	8002f54 <ov5640_write_reg>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d015      	beq.n	800271a <OV5640_SetBrightness+0xd2>
      {
        ret = OV5640_ERROR;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	e011      	b.n	800271a <OV5640_SetBrightness+0xd2>
      }
    }
    else
    {
      tmp = 0x09;
 80026f6:	2309      	movs	r3, #9
 80026f8:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f103 0018 	add.w	r0, r3, #24
 8002700:	f107 020f 	add.w	r2, r7, #15
 8002704:	2301      	movs	r3, #1
 8002706:	f245 5188 	movw	r1, #21896	; 0x5588
 800270a:	f000 fc23 	bl	8002f54 <ov5640_write_reg>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <OV5640_SetBrightness+0xd2>
      {
        ret = OV5640_ERROR;
 8002714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002718:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 800271a:	69fb      	ldr	r3, [r7, #28]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	08009268 	.word	0x08009268

08002728 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8002732:	4a31      	ldr	r2, [pc, #196]	; (80027f8 <OV5640_SetSaturation+0xd0>)
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	ca07      	ldmia	r2, {r0, r1, r2}
 800273a:	c303      	stmia	r3!, {r0, r1}
 800273c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800273e:	23ff      	movs	r3, #255	; 0xff
 8002740:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f103 0018 	add.w	r0, r3, #24
 8002748:	f107 020f 	add.w	r2, r7, #15
 800274c:	2301      	movs	r3, #1
 800274e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002752:	f000 fbff 	bl	8002f54 <ov5640_write_reg>
 8002756:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d112      	bne.n	8002784 <OV5640_SetSaturation+0x5c>
  {
    tmp = saturation_level[Level + 4];
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	3304      	adds	r3, #4
 8002762:	f107 0220 	add.w	r2, r7, #32
 8002766:	4413      	add	r3, r2
 8002768:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800276c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f103 0018 	add.w	r0, r3, #24
 8002774:	f107 020f 	add.w	r2, r7, #15
 8002778:	2301      	movs	r3, #1
 800277a:	f245 5183 	movw	r1, #21891	; 0x5583
 800277e:	f000 fbe9 	bl	8002f54 <ov5640_write_reg>
 8002782:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <OV5640_SetSaturation+0x78>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 0018 	add.w	r0, r3, #24
 8002790:	f107 020f 	add.w	r2, r7, #15
 8002794:	2301      	movs	r3, #1
 8002796:	f245 5184 	movw	r1, #21892	; 0x5584
 800279a:	f000 fbdb 	bl	8002f54 <ov5640_write_reg>
 800279e:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <OV5640_SetSaturation+0x98>
  {
    tmp = 0x02;
 80027a6:	2302      	movs	r3, #2
 80027a8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f103 0018 	add.w	r0, r3, #24
 80027b0:	f107 020f 	add.w	r2, r7, #15
 80027b4:	2301      	movs	r3, #1
 80027b6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027ba:	f000 fbcb 	bl	8002f54 <ov5640_write_reg>
 80027be:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <OV5640_SetSaturation+0xb8>
  {
    tmp = 0x41;
 80027c6:	2341      	movs	r3, #65	; 0x41
 80027c8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 0018 	add.w	r0, r3, #24
 80027d0:	f107 020f 	add.w	r2, r7, #15
 80027d4:	2301      	movs	r3, #1
 80027d6:	f245 5188 	movw	r1, #21896	; 0x5588
 80027da:	f000 fbbb 	bl	8002f54 <ov5640_write_reg>
 80027de:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <OV5640_SetSaturation+0xc4>
  {
    ret = OV5640_ERROR;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ea:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80027ec:	69fb      	ldr	r3, [r7, #28]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	08009274 	.word	0x08009274

080027fc <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8002806:	4a31      	ldr	r2, [pc, #196]	; (80028cc <OV5640_SetContrast+0xd0>)
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	ca07      	ldmia	r2, {r0, r1, r2}
 800280e:	c303      	stmia	r3!, {r0, r1}
 8002810:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002812:	23ff      	movs	r3, #255	; 0xff
 8002814:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 0018 	add.w	r0, r3, #24
 800281c:	f107 020f 	add.w	r2, r7, #15
 8002820:	2301      	movs	r3, #1
 8002822:	f245 0101 	movw	r1, #20481	; 0x5001
 8002826:	f000 fb95 	bl	8002f54 <ov5640_write_reg>
 800282a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8002832:	2304      	movs	r3, #4
 8002834:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f103 0018 	add.w	r0, r3, #24
 800283c:	f107 020f 	add.w	r2, r7, #15
 8002840:	2301      	movs	r3, #1
 8002842:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002846:	f000 fb85 	bl	8002f54 <ov5640_write_reg>
 800284a:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d112      	bne.n	8002878 <OV5640_SetContrast+0x7c>
  {
    tmp = contrast_level[Level + 4];
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	3304      	adds	r3, #4
 8002856:	f107 0220 	add.w	r2, r7, #32
 800285a:	4413      	add	r3, r2
 800285c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002860:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f103 0018 	add.w	r0, r3, #24
 8002868:	f107 020f 	add.w	r2, r7, #15
 800286c:	2301      	movs	r3, #1
 800286e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002872:	f000 fb6f 	bl	8002f54 <ov5640_write_reg>
 8002876:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <OV5640_SetContrast+0x98>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f103 0018 	add.w	r0, r3, #24
 8002884:	f107 020f 	add.w	r2, r7, #15
 8002888:	2301      	movs	r3, #1
 800288a:	f245 5185 	movw	r1, #21893	; 0x5585
 800288e:	f000 fb61 	bl	8002f54 <ov5640_write_reg>
 8002892:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <OV5640_SetContrast+0xb8>
  {
    tmp = 0x41;
 800289a:	2341      	movs	r3, #65	; 0x41
 800289c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f103 0018 	add.w	r0, r3, #24
 80028a4:	f107 020f 	add.w	r2, r7, #15
 80028a8:	2301      	movs	r3, #1
 80028aa:	f245 5188 	movw	r1, #21896	; 0x5588
 80028ae:	f000 fb51 	bl	8002f54 <ov5640_write_reg>
 80028b2:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <OV5640_SetContrast+0xc4>
  {
    ret = OV5640_ERROR;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028be:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80028c0:	69fb      	ldr	r3, [r7, #28]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	08009280 	.word	0x08009280

080028d0 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08e      	sub	sp, #56	; 0x38
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80028da:	4a3e      	ldr	r2, [pc, #248]	; (80029d4 <OV5640_SetHueDegree+0x104>)
 80028dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80028e6:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <OV5640_SetHueDegree+0x108>)
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80028f2:	4a3a      	ldr	r2, [pc, #232]	; (80029dc <OV5640_SetHueDegree+0x10c>)
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80028fe:	23ff      	movs	r3, #255	; 0xff
 8002900:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f103 0018 	add.w	r0, r3, #24
 8002908:	f107 020f 	add.w	r2, r7, #15
 800290c:	2301      	movs	r3, #1
 800290e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002912:	f000 fb1f 	bl	8002f54 <ov5640_write_reg>
 8002916:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f103 0018 	add.w	r0, r3, #24
 8002928:	f107 020f 	add.w	r2, r7, #15
 800292c:	2301      	movs	r3, #1
 800292e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002932:	f000 fb0f 	bl	8002f54 <ov5640_write_reg>
 8002936:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293a:	2b00      	cmp	r3, #0
 800293c:	d112      	bne.n	8002964 <OV5640_SetHueDegree+0x94>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	3306      	adds	r3, #6
 8002942:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002946:	4413      	add	r3, r2
 8002948:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800294c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f103 0018 	add.w	r0, r3, #24
 8002954:	f107 020f 	add.w	r2, r7, #15
 8002958:	2301      	movs	r3, #1
 800295a:	f245 5181 	movw	r1, #21889	; 0x5581
 800295e:	f000 faf9 	bl	8002f54 <ov5640_write_reg>
 8002962:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	2b00      	cmp	r3, #0
 8002968:	d112      	bne.n	8002990 <OV5640_SetHueDegree+0xc0>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3306      	adds	r3, #6
 800296e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002972:	4413      	add	r3, r2
 8002974:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002978:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f103 0018 	add.w	r0, r3, #24
 8002980:	f107 020f 	add.w	r2, r7, #15
 8002984:	2301      	movs	r3, #1
 8002986:	f245 5182 	movw	r1, #21890	; 0x5582
 800298a:	f000 fae3 	bl	8002f54 <ov5640_write_reg>
 800298e:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	2b00      	cmp	r3, #0
 8002994:	d112      	bne.n	80029bc <OV5640_SetHueDegree+0xec>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	3306      	adds	r3, #6
 800299a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800299e:	4413      	add	r3, r2
 80029a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029a4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f103 0018 	add.w	r0, r3, #24
 80029ac:	f107 020f 	add.w	r2, r7, #15
 80029b0:	2301      	movs	r3, #1
 80029b2:	f245 5188 	movw	r1, #21896	; 0x5588
 80029b6:	f000 facd 	bl	8002f54 <ov5640_write_reg>
 80029ba:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 80029bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <OV5640_SetHueDegree+0xf8>
  {
    ret = OV5640_ERROR;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 80029c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3738      	adds	r7, #56	; 0x38
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	0800928c 	.word	0x0800928c
 80029d8:	08009298 	.word	0x08009298
 80029dc:	080092a4 	.word	0x080092a4

080029e0 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f103 0018 	add.w	r0, r3, #24
 80029f4:	f107 020b 	add.w	r2, r7, #11
 80029f8:	2301      	movs	r3, #1
 80029fa:	f643 0120 	movw	r1, #14368	; 0x3820
 80029fe:	f000 fa92 	bl	8002f26 <ov5640_read_reg>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e0cb      	b.n	8002ba8 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	f023 0306 	bic.w	r3, r3, #6
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f103 0018 	add.w	r0, r3, #24
 8002a20:	f107 020a 	add.w	r2, r7, #10
 8002a24:	2301      	movs	r3, #1
 8002a26:	f643 0121 	movw	r1, #14369	; 0x3821
 8002a2a:	f000 fa7c 	bl	8002f26 <ov5640_read_reg>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e0b5      	b.n	8002ba8 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002a40:	7abb      	ldrb	r3, [r7, #10]
 8002a42:	f023 0306 	bic.w	r3, r3, #6
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d056      	beq.n	8002afe <OV5640_MirrorFlipConfig+0x11e>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d87f      	bhi.n	8002b56 <OV5640_MirrorFlipConfig+0x176>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d029      	beq.n	8002ab0 <OV5640_MirrorFlipConfig+0xd0>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d179      	bne.n	8002b56 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f103 0018 	add.w	r0, r3, #24
 8002a68:	f107 020b 	add.w	r2, r7, #11
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002a72:	f000 fa6f 	bl	8002f54 <ov5640_write_reg>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a80:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002a82:	e08a      	b.n	8002b9a <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002a84:	7abb      	ldrb	r3, [r7, #10]
 8002a86:	f043 0306 	orr.w	r3, r3, #6
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f103 0018 	add.w	r0, r3, #24
 8002a94:	f107 020a 	add.w	r2, r7, #10
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f643 0121 	movw	r1, #14369	; 0x3821
 8002a9e:	f000 fa59 	bl	8002f54 <ov5640_write_reg>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d078      	beq.n	8002b9a <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aac:	60fb      	str	r3, [r7, #12]
          break;
 8002aae:	e074      	b.n	8002b9a <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	f043 0306 	orr.w	r3, r3, #6
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f103 0018 	add.w	r0, r3, #24
 8002ac0:	f107 020b 	add.w	r2, r7, #11
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f643 0120 	movw	r1, #14368	; 0x3820
 8002aca:	f000 fa43 	bl	8002f54 <ov5640_write_reg>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad8:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002ada:	e060      	b.n	8002b9e <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f103 0018 	add.w	r0, r3, #24
 8002ae2:	f107 020a 	add.w	r2, r7, #10
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f643 0121 	movw	r1, #14369	; 0x3821
 8002aec:	f000 fa32 	bl	8002f54 <ov5640_write_reg>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d053      	beq.n	8002b9e <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002afa:	60fb      	str	r3, [r7, #12]
          break;
 8002afc:	e04f      	b.n	8002b9e <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002afe:	7afb      	ldrb	r3, [r7, #11]
 8002b00:	f043 0306 	orr.w	r3, r3, #6
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f103 0018 	add.w	r0, r3, #24
 8002b0e:	f107 020b 	add.w	r2, r7, #11
 8002b12:	2301      	movs	r3, #1
 8002b14:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b18:	f000 fa1c 	bl	8002f54 <ov5640_write_reg>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b26:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002b28:	e03b      	b.n	8002ba2 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002b2a:	7abb      	ldrb	r3, [r7, #10]
 8002b2c:	f043 0306 	orr.w	r3, r3, #6
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 0018 	add.w	r0, r3, #24
 8002b3a:	f107 020a 	add.w	r2, r7, #10
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b44:	f000 fa06 	bl	8002f54 <ov5640_write_reg>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d029      	beq.n	8002ba2 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b52:	60fb      	str	r3, [r7, #12]
          break;
 8002b54:	e025      	b.n	8002ba2 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f103 0018 	add.w	r0, r3, #24
 8002b5c:	f107 020b 	add.w	r2, r7, #11
 8002b60:	2301      	movs	r3, #1
 8002b62:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b66:	f000 f9f5 	bl	8002f54 <ov5640_write_reg>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b74:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002b76:	e016      	b.n	8002ba6 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f103 0018 	add.w	r0, r3, #24
 8002b7e:	f107 020a 	add.w	r2, r7, #10
 8002b82:	2301      	movs	r3, #1
 8002b84:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b88:	f000 f9e4 	bl	8002f54 <ov5640_write_reg>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b96:	60fb      	str	r3, [r7, #12]
          break;
 8002b98:	e005      	b.n	8002ba6 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002b9a:	bf00      	nop
 8002b9c:	e004      	b.n	8002ba8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002ba6:	bf00      	nop
      }
    }
  }

  return ret;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff f89a 	bl	8001d00 <OV5640_GetResolution>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e04e      	b.n	8002c78 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b44      	cmp	r3, #68	; 0x44
 8002be2:	d112      	bne.n	8002c0a <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002be4:	2310      	movs	r3, #16
 8002be6:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f103 0018 	add.w	r0, r3, #24
 8002bee:	f107 020b 	add.w	r2, r7, #11
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002bf8:	f000 f9ac 	bl	8002f54 <ov5640_write_reg>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d03a      	beq.n	8002c78 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e036      	b.n	8002c78 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d802      	bhi.n	8002c16 <OV5640_ZoomConfig+0x64>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002c14:	e00a      	b.n	8002c2c <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d004      	beq.n	8002c24 <OV5640_ZoomConfig+0x72>
          break;
 8002c1a:	e007      	b.n	8002c2c <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	613b      	str	r3, [r7, #16]
          break;
 8002c22:	e003      	b.n	8002c2c <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	613b      	str	r3, [r7, #16]
          break;
 8002c2a:	bf00      	nop
      }

      tmp = 0x00;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f103 0018 	add.w	r0, r3, #24
 8002c36:	f107 020b 	add.w	r2, r7, #11
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002c40:	f000 f988 	bl	8002f54 <ov5640_write_reg>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e012      	b.n	8002c78 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f103 0018 	add.w	r0, r3, #24
 8002c5e:	f107 020b 	add.w	r2, r7, #11
 8002c62:	2301      	movs	r3, #1
 8002c64:	f245 6101 	movw	r1, #22017	; 0x5601
 8002c68:	f000 f974 	bl	8002f54 <ov5640_write_reg>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c76:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002c78:	697b      	ldr	r3, [r7, #20]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 80ce 	bne.w	8002e34 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f103 0018 	add.w	r0, r3, #24
 8002c9e:	f107 020b 	add.w	r2, r7, #11
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f243 0138 	movw	r1, #12344	; 0x3038
 8002ca8:	f000 f954 	bl	8002f54 <ov5640_write_reg>
 8002cac:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f103 0018 	add.w	r0, r3, #24
 8002cba:	f107 020b 	add.w	r2, r7, #11
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f243 0139 	movw	r1, #12345	; 0x3039
 8002cc4:	f000 f946 	bl	8002f54 <ov5640_write_reg>
 8002cc8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10c      	bne.n	8002cea <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002cd0:	237c      	movs	r3, #124	; 0x7c
 8002cd2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f103 0018 	add.w	r0, r3, #24
 8002cda:	f107 020b 	add.w	r2, r7, #11
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002ce4:	f000 f936 	bl	8002f54 <ov5640_write_reg>
 8002ce8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10c      	bne.n	8002d0a <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f103 0018 	add.w	r0, r3, #24
 8002cfa:	f107 020b 	add.w	r2, r7, #11
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002d04:	f000 f926 	bl	8002f54 <ov5640_write_reg>
 8002d08:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10c      	bne.n	8002d2a <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002d10:	2327      	movs	r3, #39	; 0x27
 8002d12:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f103 0018 	add.w	r0, r3, #24
 8002d1a:	f107 020b 	add.w	r2, r7, #11
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002d24:	f000 f916 	bl	8002f54 <ov5640_write_reg>
 8002d28:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10c      	bne.n	8002d4a <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002d30:	2300      	movs	r3, #0
 8002d32:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f103 0018 	add.w	r0, r3, #24
 8002d3a:	f107 020b 	add.w	r2, r7, #11
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002d44:	f000 f906 	bl	8002f54 <ov5640_write_reg>
 8002d48:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10c      	bne.n	8002d6a <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002d50:	23f6      	movs	r3, #246	; 0xf6
 8002d52:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f103 0018 	add.w	r0, r3, #24
 8002d5a:	f107 020b 	add.w	r2, r7, #11
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002d64:	f000 f8f6 	bl	8002f54 <ov5640_write_reg>
 8002d68:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10c      	bne.n	8002d8a <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002d70:	2304      	movs	r3, #4
 8002d72:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0018 	add.w	r0, r3, #24
 8002d7a:	f107 020b 	add.w	r2, r7, #11
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002d84:	f000 f8e6 	bl	8002f54 <ov5640_write_reg>
 8002d88:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f103 0018 	add.w	r0, r3, #24
 8002d96:	f107 020b 	add.w	r2, r7, #11
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002da0:	f000 f8d8 	bl	8002f54 <ov5640_write_reg>
 8002da4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10c      	bne.n	8002dc6 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002dac:	230b      	movs	r3, #11
 8002dae:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f103 0018 	add.w	r0, r3, #24
 8002db6:	f107 020b 	add.w	r2, r7, #11
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002dc0:	f000 f8c8 	bl	8002f54 <ov5640_write_reg>
 8002dc4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10c      	bne.n	8002de6 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002dcc:	2388      	movs	r3, #136	; 0x88
 8002dce:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f103 0018 	add.w	r0, r3, #24
 8002dd6:	f107 020b 	add.w	r2, r7, #11
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002de0:	f000 f8b8 	bl	8002f54 <ov5640_write_reg>
 8002de4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10c      	bne.n	8002e06 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002dec:	230b      	movs	r3, #11
 8002dee:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f103 0018 	add.w	r0, r3, #24
 8002df6:	f107 020b 	add.w	r2, r7, #11
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002e00:	f000 f8a8 	bl	8002f54 <ov5640_write_reg>
 8002e04:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10c      	bne.n	8002e26 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002e0c:	2388      	movs	r3, #136	; 0x88
 8002e0e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f103 0018 	add.w	r0, r3, #24
 8002e16:	f107 020b 	add.w	r2, r7, #11
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002e20:	f000 f898 	bl	8002f54 <ov5640_write_reg>
 8002e24:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d02b      	beq.n	8002e84 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e027      	b.n	8002e84 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f103 0018 	add.w	r0, r3, #24
 8002e3a:	f107 020b 	add.w	r2, r7, #11
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002e44:	f000 f86f 	bl	8002f26 <ov5640_read_reg>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e016      	b.n	8002e84 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f103 0018 	add.w	r0, r3, #24
 8002e6a:	f107 020b 	add.w	r2, r7, #11
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002e74:	f000 f86e 	bl	8002f54 <ov5640_write_reg>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e82:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002e84:	68fb      	ldr	r3, [r7, #12]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4798      	blx	r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002ea2:	bf00      	nop
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	4798      	blx	r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d8f5      	bhi.n	8002ea4 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ec2:	b590      	push	{r4, r7, lr}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	460b      	mov	r3, r1
 8002ed0:	817b      	strh	r3, [r7, #10]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	691c      	ldr	r4, [r3, #16]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	8918      	ldrh	r0, [r3, #8]
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	8979      	ldrh	r1, [r7, #10]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	47a0      	blx	r4
 8002eea:	4603      	mov	r3, r0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}

08002ef4 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	460b      	mov	r3, r1
 8002f02:	817b      	strh	r3, [r7, #10]
 8002f04:	4613      	mov	r3, r2
 8002f06:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	68dc      	ldr	r4, [r3, #12]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	8918      	ldrh	r0, [r3, #8]
 8002f14:	893b      	ldrh	r3, [r7, #8]
 8002f16:	8979      	ldrh	r1, [r7, #10]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	47a0      	blx	r4
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}

08002f26 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002f26:	b590      	push	{r4, r7, lr}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	461a      	mov	r2, r3
 8002f32:	460b      	mov	r3, r1
 8002f34:	817b      	strh	r3, [r7, #10]
 8002f36:	4613      	mov	r3, r2
 8002f38:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685c      	ldr	r4, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6898      	ldr	r0, [r3, #8]
 8002f42:	893b      	ldrh	r3, [r7, #8]
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	47a0      	blx	r4
 8002f4a:	4603      	mov	r3, r0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd90      	pop	{r4, r7, pc}

08002f54 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	460b      	mov	r3, r1
 8002f62:	817b      	strh	r3, [r7, #10]
 8002f64:	4613      	mov	r3, r2
 8002f66:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681c      	ldr	r4, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6898      	ldr	r0, [r3, #8]
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	8979      	ldrh	r1, [r7, #10]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	47a0      	blx	r4
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
	...

08002f84 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <BSP_I2C2_Init+0x64>)
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <BSP_I2C2_Init+0x68>)
 8002f92:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <BSP_I2C2_Init+0x6c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11f      	bne.n	8002fdc <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <BSP_I2C2_Init+0x6c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <BSP_I2C2_Init+0x6c>)
 8002fa4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8002fa6:	4810      	ldr	r0, [pc, #64]	; (8002fe8 <BSP_I2C2_Init+0x64>)
 8002fa8:	f003 fba1 	bl	80066ee <HAL_I2C_GetState>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d114      	bne.n	8002fdc <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <BSP_I2C2_Init+0x64>)
 8002fb4:	f000 fb60 	bl	8003678 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8002fb8:	f004 fd50 	bl	8007a5c <HAL_RCC_GetPCLK2Freq>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	490d      	ldr	r1, [pc, #52]	; (8002ff4 <BSP_I2C2_Init+0x70>)
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f8e3 	bl	800318c <I2C_GetTiming>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4807      	ldr	r0, [pc, #28]	; (8002fe8 <BSP_I2C2_Init+0x64>)
 8002fcc:	f000 f838 	bl	8003040 <MX_I2C2_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <BSP_I2C2_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002fd6:	f06f 0307 	mvn.w	r3, #7
 8002fda:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8002fdc:	687b      	ldr	r3, [r7, #4]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000bf4 	.word	0x20000bf4
 8002fec:	40005800 	.word	0x40005800
 8002ff0:	200000ec 	.word	0x200000ec
 8002ff4:	000186a0 	.word	0x000186a0

08002ff8 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <BSP_I2C2_DeInit+0x40>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3b01      	subs	r3, #1
 8003008:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <BSP_I2C2_DeInit+0x40>)
 800300a:	6013      	str	r3, [r2, #0]
  if (I2c2InitCounter == 0U)
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <BSP_I2C2_DeInit+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <BSP_I2C2_DeInit+0x44>)
 8003016:	f000 fb8d 	bl	8003734 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 800301a:	4808      	ldr	r0, [pc, #32]	; (800303c <BSP_I2C2_DeInit+0x44>)
 800301c:	f002 ffef 	bl	8005ffe <HAL_I2C_DeInit>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003026:	f06f 0307 	mvn.w	r3, #7
 800302a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800302c:	687b      	ldr	r3, [r7, #4]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200000ec 	.word	0x200000ec
 800303c:	20000bf4 	.word	0x20000bf4

08003040 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f002 ff2e 	bl	8005ee0 <HAL_I2C_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	e014      	b.n	80030ba <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f003 fdea 	bl	8006c70 <HAL_I2CEx_ConfigAnalogFilter>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e008      	b.n	80030ba <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80030a8:	2100      	movs	r1, #0
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f003 fe2b 	bl	8006d06 <HAL_I2CEx_ConfigDigitalFilter>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60ba      	str	r2, [r7, #8]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	81fb      	strh	r3, [r7, #14]
 80030d2:	460b      	mov	r3, r1
 80030d4:	81bb      	strh	r3, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80030da:	89b9      	ldrh	r1, [r7, #12]
 80030dc:	89f8      	ldrh	r0, [r7, #14]
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f000 fb47 	bl	8003778 <I2C2_WriteReg>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <BSP_I2C2_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00c      	b.n	8003110 <BSP_I2C2_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 80030f6:	4809      	ldr	r0, [pc, #36]	; (800311c <BSP_I2C2_WriteReg16+0x58>)
 80030f8:	f003 fb07 	bl	800670a <HAL_I2C_GetError>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d103      	bne.n	800310a <BSP_I2C2_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003102:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e002      	b.n	8003110 <BSP_I2C2_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800310a:	f06f 0303 	mvn.w	r3, #3
 800310e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003110:	697b      	ldr	r3, [r7, #20]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000bf4 	.word	0x20000bf4

08003120 <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60ba      	str	r2, [r7, #8]
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	81fb      	strh	r3, [r7, #14]
 800312e:	460b      	mov	r3, r1
 8003130:	81bb      	strh	r3, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if( I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003136:	89b9      	ldrh	r1, [r7, #12]
 8003138:	89f8      	ldrh	r0, [r7, #14]
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2202      	movs	r2, #2
 8003142:	f000 fb3f 	bl	80037c4 <I2C2_ReadReg>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <BSP_I2C2_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e00c      	b.n	800316c <BSP_I2C2_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003152:	4809      	ldr	r0, [pc, #36]	; (8003178 <BSP_I2C2_ReadReg16+0x58>)
 8003154:	f003 fad9 	bl	800670a <HAL_I2C_GetError>
 8003158:	4603      	mov	r3, r0
 800315a:	2b04      	cmp	r3, #4
 800315c:	d103      	bne.n	8003166 <BSP_I2C2_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800315e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e002      	b.n	800316c <BSP_I2C2_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003166:	f06f 0303 	mvn.w	r3, #3
 800316a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800316c:	697b      	ldr	r3, [r7, #20]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000bf4 	.word	0x20000bf4

0800317c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003180:	f001 fb5a 	bl	8004838 <HAL_GetTick>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d06b      	beq.n	8003278 <I2C_GetTiming+0xec>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d068      	beq.n	8003278 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e060      	b.n	800326e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80031ac:	4a35      	ldr	r2, [pc, #212]	; (8003284 <I2C_GetTiming+0xf8>)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3304      	adds	r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d352      	bcc.n	8003268 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80031c2:	4a30      	ldr	r2, [pc, #192]	; (8003284 <I2C_GetTiming+0xf8>)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3308      	adds	r3, #8
 80031d0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d847      	bhi.n	8003268 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80031d8:	6939      	ldr	r1, [r7, #16]
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f856 	bl	800328c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80031e0:	6939      	ldr	r1, [r7, #16]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f940 	bl	8003468 <I2C_Compute_SCLL_SCLH>
 80031e8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b7f      	cmp	r3, #127	; 0x7f
 80031ee:	d842      	bhi.n	8003276 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80031f0:	4925      	ldr	r1, [pc, #148]	; (8003288 <I2C_GetTiming+0xfc>)
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003202:	4821      	ldr	r0, [pc, #132]	; (8003288 <I2C_GetTiming+0xfc>)
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4403      	add	r3, r0
 8003210:	3304      	adds	r3, #4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800321a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800321c:	481a      	ldr	r0, [pc, #104]	; (8003288 <I2C_GetTiming+0xfc>)
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4403      	add	r3, r0
 800322a:	3308      	adds	r3, #8
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003234:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003236:	4814      	ldr	r0, [pc, #80]	; (8003288 <I2C_GetTiming+0xfc>)
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4403      	add	r3, r0
 8003244:	330c      	adds	r3, #12
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800324c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800324e:	480e      	ldr	r0, [pc, #56]	; (8003288 <I2C_GetTiming+0xfc>)
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4403      	add	r3, r0
 800325c:	3310      	adds	r3, #16
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003262:	430b      	orrs	r3, r1
 8003264:	617b      	str	r3, [r7, #20]
        }
        break;
 8003266:	e006      	b.n	8003276 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3301      	adds	r3, #1
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d99b      	bls.n	80031ac <I2C_GetTiming+0x20>
 8003274:	e000      	b.n	8003278 <I2C_GetTiming+0xec>
        break;
 8003276:	bf00      	nop
      }
    }
  }

  return ret;
 8003278:	697b      	ldr	r3, [r7, #20]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	080097ac 	.word	0x080097ac
 8003288:	200000f0 	.word	0x200000f0

0800328c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800328c:	b480      	push	{r7}
 800328e:	b08f      	sub	sp, #60	; 0x3c
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003296:	2310      	movs	r3, #16
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	085a      	lsrs	r2, r3, #1
 800329e:	4b6e      	ldr	r3, [pc, #440]	; (8003458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80032a0:	4413      	add	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80032aa:	2332      	movs	r3, #50	; 0x32
 80032ac:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80032ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80032b2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80032b4:	4a69      	ldr	r2, [pc, #420]	; (800345c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3324      	adds	r3, #36	; 0x24
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	4a65      	ldr	r2, [pc, #404]	; (800345c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	330c      	adds	r3, #12
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80032d8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80032da:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80032dc:	495f      	ldr	r1, [pc, #380]	; (800345c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	202c      	movs	r0, #44	; 0x2c
 80032e2:	fb00 f303 	mul.w	r3, r0, r3
 80032e6:	440b      	add	r3, r1
 80032e8:	3328      	adds	r3, #40	; 0x28
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3303      	adds	r3, #3
 80032ee:	69f9      	ldr	r1, [r7, #28]
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3310      	adds	r3, #16
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	4a54      	ldr	r2, [pc, #336]	; (800345c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3320      	adds	r3, #32
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800331c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800331e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003320:	494e      	ldr	r1, [pc, #312]	; (800345c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	202c      	movs	r0, #44	; 0x2c
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	440b      	add	r3, r1
 800332c:	3328      	adds	r3, #40	; 0x28
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3304      	adds	r3, #4
 8003332:	69f9      	ldr	r1, [r7, #28]
 8003334:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800333c:	4a47      	ldr	r2, [pc, #284]	; (800345c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3320      	adds	r3, #32
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	4a43      	ldr	r2, [pc, #268]	; (800345c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3314      	adds	r3, #20
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4403      	add	r3, r0
 8003360:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	2b00      	cmp	r3, #0
 8003366:	dc01      	bgt.n	800336c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b00      	cmp	r3, #0
 8003370:	dc01      	bgt.n	8003376 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003376:	2300      	movs	r3, #0
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
 800337a:	e062      	b.n	8003442 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
 8003380:	e059      	b.n	8003436 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	3301      	adds	r3, #1
 8003386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003388:	3201      	adds	r2, #1
 800338a:	fb02 f203 	mul.w	r2, r2, r3
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fb02 f303 	mul.w	r3, r2, r3
 8003394:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	429a      	cmp	r2, r3
 800339c:	d348      	bcc.n	8003430 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	e042      	b.n	800342a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	3301      	adds	r3, #1
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	fb02 f203 	mul.w	r2, r2, r3
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fb02 f303 	mul.w	r3, r2, r3
 80033b4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d332      	bcc.n	8003424 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d82e      	bhi.n	8003424 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80033c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d02a      	beq.n	8003424 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4924      	ldr	r1, [pc, #144]	; (8003464 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80033e2:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	491f      	ldr	r1, [pc, #124]	; (8003464 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	3304      	adds	r3, #4
 80033f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4919      	ldr	r1, [pc, #100]	; (8003464 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3308      	adds	r3, #8
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800341a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b7f      	cmp	r3, #127	; 0x7f
 8003422:	d812      	bhi.n	800344a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	3301      	adds	r3, #1
 8003428:	623b      	str	r3, [r7, #32]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d9b9      	bls.n	80033a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	3301      	adds	r3, #1
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	2b0f      	cmp	r3, #15
 800343a:	d9a2      	bls.n	8003382 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	3301      	adds	r3, #1
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	2b0f      	cmp	r3, #15
 8003446:	d999      	bls.n	800337c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003448:	e000      	b.n	800344c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800344a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800344c:	373c      	adds	r7, #60	; 0x3c
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	3b9aca00 	.word	0x3b9aca00
 800345c:	080097ac 	.word	0x080097ac
 8003460:	20000af0 	.word	0x20000af0
 8003464:	200000f0 	.word	0x200000f0

08003468 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003468:	b480      	push	{r7}
 800346a:	b093      	sub	sp, #76	; 0x4c
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003476:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	085a      	lsrs	r2, r3, #1
 800347c:	4b7a      	ldr	r3, [pc, #488]	; (8003668 <I2C_Compute_SCLL_SCLH+0x200>)
 800347e:	4413      	add	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	fbb3 f3f2 	udiv	r3, r3, r2
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003488:	4a78      	ldr	r2, [pc, #480]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	085a      	lsrs	r2, r3, #1
 8003498:	4b73      	ldr	r3, [pc, #460]	; (8003668 <I2C_Compute_SCLL_SCLH+0x200>)
 800349a:	4413      	add	r3, r2
 800349c:	4973      	ldr	r1, [pc, #460]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	202c      	movs	r0, #44	; 0x2c
 80034a2:	fb00 f202 	mul.w	r2, r0, r2
 80034a6:	440a      	add	r2, r1
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80034b0:	2332      	movs	r3, #50	; 0x32
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80034b4:	4a6d      	ldr	r2, [pc, #436]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3328      	adds	r3, #40	; 0x28
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80034cc:	4a67      	ldr	r2, [pc, #412]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a62      	ldr	r2, [pc, #392]	; (8003668 <I2C_Compute_SCLL_SCLH+0x200>)
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80034e4:	4a61      	ldr	r2, [pc, #388]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3308      	adds	r3, #8
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5c      	ldr	r2, [pc, #368]	; (8003668 <I2C_Compute_SCLL_SCLH+0x200>)
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	e0a3      	b.n	800364e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003506:	495a      	ldr	r1, [pc, #360]	; (8003670 <I2C_Compute_SCLL_SCLH+0x208>)
 8003508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003520:	2300      	movs	r3, #0
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003524:	e08c      	b.n	8003640 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	441a      	add	r2, r3
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	3301      	adds	r3, #1
 8003530:	6979      	ldr	r1, [r7, #20]
 8003532:	fb01 f103 	mul.w	r1, r1, r3
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	440b      	add	r3, r1
 800353c:	4413      	add	r3, r2
 800353e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003540:	4a4a      	ldr	r2, [pc, #296]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	3318      	adds	r3, #24
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	429a      	cmp	r2, r3
 8003554:	d971      	bls.n	800363a <I2C_Compute_SCLL_SCLH+0x1d2>
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	1ad2      	subs	r2, r2, r3
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003564:	429a      	cmp	r2, r3
 8003566:	d268      	bcs.n	800363a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003568:	2300      	movs	r3, #0
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
 800356c:	e062      	b.n	8003634 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	441a      	add	r2, r3
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	3301      	adds	r3, #1
 8003578:	6979      	ldr	r1, [r7, #20]
 800357a:	fb01 f103 	mul.w	r1, r1, r3
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	440b      	add	r3, r1
 8003584:	4413      	add	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	441a      	add	r2, r3
 800358e:	4937      	ldr	r1, [pc, #220]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	202c      	movs	r0, #44	; 0x2c
 8003594:	fb00 f303 	mul.w	r3, r0, r3
 8003598:	440b      	add	r3, r1
 800359a:	3320      	adds	r3, #32
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	441a      	add	r2, r3
 80035a0:	4932      	ldr	r1, [pc, #200]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	202c      	movs	r0, #44	; 0x2c
 80035a6:	fb00 f303 	mul.w	r3, r0, r3
 80035aa:	440b      	add	r3, r1
 80035ac:	3324      	adds	r3, #36	; 0x24
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d338      	bcc.n	800362e <I2C_Compute_SCLL_SCLH+0x1c6>
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d834      	bhi.n	800362e <I2C_Compute_SCLL_SCLH+0x1c6>
 80035c4:	4a29      	ldr	r2, [pc, #164]	; (800366c <I2C_Compute_SCLL_SCLH+0x204>)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	331c      	adds	r3, #28
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d329      	bcc.n	800362e <I2C_Compute_SCLL_SCLH+0x1c6>
 80035da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d225      	bcs.n	800362e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da02      	bge.n	80035f6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	425b      	negs	r3, r3
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d917      	bls.n	800362e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003602:	491b      	ldr	r1, [pc, #108]	; (8003670 <I2C_Compute_SCLL_SCLH+0x208>)
 8003604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3310      	adds	r3, #16
 8003612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003614:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003616:	4916      	ldr	r1, [pc, #88]	; (8003670 <I2C_Compute_SCLL_SCLH+0x208>)
 8003618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	330c      	adds	r3, #12
 8003626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003628:	601a      	str	r2, [r3, #0]
              ret = count;
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	3301      	adds	r3, #1
 8003632:	63bb      	str	r3, [r7, #56]	; 0x38
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	2bff      	cmp	r3, #255	; 0xff
 8003638:	d999      	bls.n	800356e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	3301      	adds	r3, #1
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003642:	2bff      	cmp	r3, #255	; 0xff
 8003644:	f67f af6f 	bls.w	8003526 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	3301      	adds	r3, #1
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003654:	429a      	cmp	r2, r3
 8003656:	f4ff af56 	bcc.w	8003506 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800365a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800365c:	4618      	mov	r0, r3
 800365e:	374c      	adds	r7, #76	; 0x4c
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	3b9aca00 	.word	0x3b9aca00
 800366c:	080097ac 	.word	0x080097ac
 8003670:	200000f0 	.word	0x200000f0
 8003674:	20000af0 	.word	0x20000af0

08003678 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <I2C2_MspInit+0xb4>)
 8003682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003684:	4a29      	ldr	r2, [pc, #164]	; (800372c <I2C2_MspInit+0xb4>)
 8003686:	f043 0308 	orr.w	r3, r3, #8
 800368a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <I2C2_MspInit+0xb4>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <I2C2_MspInit+0xb4>)
 800369a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369c:	4a23      	ldr	r2, [pc, #140]	; (800372c <I2C2_MspInit+0xb4>)
 800369e:	f043 0308 	orr.w	r3, r3, #8
 80036a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a4:	4b21      	ldr	r3, [pc, #132]	; (800372c <I2C2_MspInit+0xb4>)
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SCL_PIN;
 80036b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80036b6:	2312      	movs	r3, #18
 80036b8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80036be:	2302      	movs	r3, #2
 80036c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_AF;
 80036c2:	2304      	movs	r3, #4
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	4619      	mov	r1, r3
 80036cc:	4818      	ldr	r0, [pc, #96]	; (8003730 <I2C2_MspInit+0xb8>)
 80036ce:	f002 f96b 	bl	80059a8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SDA_PIN;
 80036d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80036d8:	2312      	movs	r3, #18
 80036da:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80036e0:	2302      	movs	r3, #2
 80036e2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_AF;
 80036e4:	2304      	movs	r3, #4
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	4619      	mov	r1, r3
 80036ee:	4810      	ldr	r0, [pc, #64]	; (8003730 <I2C2_MspInit+0xb8>)
 80036f0:	f002 f95a 	bl	80059a8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <I2C2_MspInit+0xb4>)
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	4a0c      	ldr	r2, [pc, #48]	; (800372c <I2C2_MspInit+0xb4>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <I2C2_MspInit+0xb4>)
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <I2C2_MspInit+0xb4>)
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	4a06      	ldr	r2, [pc, #24]	; (800372c <I2C2_MspInit+0xb4>)
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <I2C2_MspInit+0xb4>)
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	4a03      	ldr	r2, [pc, #12]	; (800372c <I2C2_MspInit+0xb4>)
 800371e:	f023 0302 	bic.w	r3, r3, #2
 8003722:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003724:	bf00      	nop
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	48000c00 	.word	0x48000c00

08003734 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 800373c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003740:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4619      	mov	r1, r3
 8003746:	480a      	ldr	r0, [pc, #40]	; (8003770 <I2C2_MspDeInit+0x3c>)
 8003748:	f002 fac0 	bl	8005ccc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800374c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003750:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4619      	mov	r1, r3
 8003756:	4806      	ldr	r0, [pc, #24]	; (8003770 <I2C2_MspDeInit+0x3c>)
 8003758:	f002 fab8 	bl	8005ccc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <I2C2_MspDeInit+0x40>)
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <I2C2_MspDeInit+0x40>)
 8003762:	f023 0302 	bic.w	r3, r3, #2
 8003766:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003768:	bf00      	nop
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	48000c00 	.word	0x48000c00
 8003774:	40021000 	.word	0x40021000

08003778 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af04      	add	r7, sp, #16
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	4603      	mov	r3, r0
 8003782:	81fb      	strh	r3, [r7, #14]
 8003784:	460b      	mov	r3, r1
 8003786:	81bb      	strh	r3, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800378c:	8978      	ldrh	r0, [r7, #10]
 800378e:	89ba      	ldrh	r2, [r7, #12]
 8003790:	89f9      	ldrh	r1, [r7, #14]
 8003792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	8b3b      	ldrh	r3, [r7, #24]
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4603      	mov	r3, r0
 80037a2:	4807      	ldr	r0, [pc, #28]	; (80037c0 <I2C2_WriteReg+0x48>)
 80037a4:	f002 fc6e 	bl	8006084 <HAL_I2C_Mem_Write>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e001      	b.n	80037b6 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80037b2:	f06f 0307 	mvn.w	r3, #7
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000bf4 	.word	0x20000bf4

080037c4 <I2C2_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af04      	add	r7, sp, #16
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	4603      	mov	r3, r0
 80037ce:	81fb      	strh	r3, [r7, #14]
 80037d0:	460b      	mov	r3, r1
 80037d2:	81bb      	strh	r3, [r7, #12]
 80037d4:	4613      	mov	r3, r2
 80037d6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80037d8:	8978      	ldrh	r0, [r7, #10]
 80037da:	89ba      	ldrh	r2, [r7, #12]
 80037dc:	89f9      	ldrh	r1, [r7, #14]
 80037de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e2:	9302      	str	r3, [sp, #8]
 80037e4:	8b3b      	ldrh	r3, [r7, #24]
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	4603      	mov	r3, r0
 80037ee:	4807      	ldr	r0, [pc, #28]	; (800380c <I2C2_ReadReg+0x48>)
 80037f0:	f002 fd5c 	bl	80062ac <HAL_I2C_Mem_Read>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e001      	b.n	8003802 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80037fe:	f06f 0307 	mvn.w	r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000bf4 	.word	0x20000bf4

08003810 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  BSP_IO_Init();
 8003820:	f000 ff26 	bl	8004670 <BSP_IO_Init>

  // Config PWR_EN_PIN
  BSP_IO_ConfigPin(CAMERA_PWR_EN_PIN, IO_MODE_OUTPUT);
 8003824:	2101      	movs	r1, #1
 8003826:	2040      	movs	r0, #64	; 0x40
 8003828:	f000 ff66 	bl	80046f8 <BSP_IO_ConfigPin>
  BSP_IO_WritePin(CAMERA_PWR_EN_PIN, IO_PIN_SET);  // redLED down
 800382c:	2101      	movs	r1, #1
 800382e:	2040      	movs	r0, #64	; 0x40
 8003830:	f000 ff7e 	bl	8004730 <BSP_IO_WritePin>
  BSP_IO_WritePin(CAMERA_PWR_EN_PIN, IO_PIN_RESET);  // redLED up
 8003834:	2100      	movs	r1, #0
 8003836:	2040      	movs	r0, #64	; 0x40
 8003838:	f000 ff7a 	bl	8004730 <BSP_IO_WritePin>

  if(Instance >= CAMERA_INSTANCES_NBR)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <BSP_CAMERA_Init+0x3a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003842:	f06f 0301 	mvn.w	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e09d      	b.n	8003986 <BSP_CAMERA_Init+0x176>
  else
  {
    /* DCMI Initialization */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /* Register the DCMI MSP Callbacks */
    if(Camera_Ctx[Instance].IsMspCallbacksValid == 0U)
 800384a:	4a51      	ldr	r2, [pc, #324]	; (8003990 <BSP_CAMERA_Init+0x180>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2134      	movs	r1, #52	; 0x34
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	3330      	adds	r3, #48	; 0x30
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d108      	bne.n	8003870 <BSP_CAMERA_Init+0x60>
    {
      if(BSP_CAMERA_RegisterDefaultMspCallbacks(Instance) != BSP_ERROR_NONE)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f8d2 	bl	8003a08 <BSP_CAMERA_RegisterDefaultMspCallbacks>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <BSP_CAMERA_Init+0x60>
      {
        return BSP_ERROR_MSP_FAILURE;
 800386a:	f06f 0309 	mvn.w	r3, #9
 800386e:	e08b      	b.n	8003988 <BSP_CAMERA_Init+0x178>
#else
    /* DCMI Initialization */
    DCMI_MspInit(&hcamera_dcmi);
#endif
    /* Initialize the camera driver structure */
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8003870:	4848      	ldr	r0, [pc, #288]	; (8003994 <BSP_CAMERA_Init+0x184>)
 8003872:	f000 f89d 	bl	80039b0 <MX_DCMI_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <BSP_CAMERA_Init+0x74>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800387c:	f06f 0303 	mvn.w	r3, #3
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e080      	b.n	8003986 <BSP_CAMERA_Init+0x176>
    }
    else if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003884:	2000      	movs	r0, #0
 8003886:	f000 f93f 	bl	8003b08 <BSP_CAMERA_HwReset>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <BSP_CAMERA_Init+0x88>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003890:	f06f 0307 	mvn.w	r3, #7
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e076      	b.n	8003986 <BSP_CAMERA_Init+0x176>
    else
    {
#if (USE_CAMERA_SENSOR_OV5640 == 1)
//      if(ret != BSP_ERROR_NONE)
//      {
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	68b8      	ldr	r0, [r7, #8]
 800389c:	f000 fb2c 	bl	8003ef8 <OV5640_Probe>
 80038a0:	6178      	str	r0, [r7, #20]
//      }
#endif
      if(ret != BSP_ERROR_NONE)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <BSP_CAMERA_Init+0xa0>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80038a8:	f06f 0306 	mvn.w	r3, #6
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e06a      	b.n	8003986 <BSP_CAMERA_Init+0x176>
      }
      else
      {
	    HSPolarity = DCMI_HSPOLARITY_HIGH;
 80038b0:	4b39      	ldr	r3, [pc, #228]	; (8003998 <BSP_CAMERA_Init+0x188>)
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	601a      	str	r2, [r3, #0]
	    /* Initialize the camera driver structure */
	    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 80038b6:	4837      	ldr	r0, [pc, #220]	; (8003994 <BSP_CAMERA_Init+0x184>)
 80038b8:	f000 f87a 	bl	80039b0 <MX_DCMI_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <BSP_CAMERA_Init+0xb8>
	    {
	  	  ret = BSP_ERROR_PERIPH_FAILURE;
 80038c2:	f06f 0303 	mvn.w	r3, #3
 80038c6:	617b      	str	r3, [r7, #20]
	    }

        if(ret == BSP_ERROR_NONE)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d108      	bne.n	80038e0 <BSP_CAMERA_Init+0xd0>
        {
          if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 80038ce:	2000      	movs	r0, #0
 80038d0:	f000 f91a 	bl	8003b08 <BSP_CAMERA_HwReset>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <BSP_CAMERA_Init+0xd0>
          {
            ret = BSP_ERROR_BUS_FAILURE;
 80038da:	f06f 0307 	mvn.w	r3, #7
 80038de:	617b      	str	r3, [r7, #20]
          }
        }

        if(ret == BSP_ERROR_NONE)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d13a      	bne.n	800395c <BSP_CAMERA_Init+0x14c>
        {
          Camera_Ctx[Instance].CameraId  = CameraId;
 80038e6:	4b2d      	ldr	r3, [pc, #180]	; (800399c <BSP_CAMERA_Init+0x18c>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4929      	ldr	r1, [pc, #164]	; (8003990 <BSP_CAMERA_Init+0x180>)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2034      	movs	r0, #52	; 0x34
 80038f0:	fb00 f303 	mul.w	r3, r0, r3
 80038f4:	440b      	add	r3, r1
 80038f6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
          /* Register DCMI LineEvent, FrameEvent and Error callbacks */
          if(HAL_DCMI_RegisterCallback(&hcamera_dcmi, HAL_DCMI_LINE_EVENT_CB_ID, DCMI_LineEventCallback) != HAL_OK)
 80038f8:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <BSP_CAMERA_Init+0x190>)
 80038fa:	2102      	movs	r1, #2
 80038fc:	4825      	ldr	r0, [pc, #148]	; (8003994 <BSP_CAMERA_Init+0x184>)
 80038fe:	f001 fb37 	bl	8004f70 <HAL_DCMI_RegisterCallback>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <BSP_CAMERA_Init+0x100>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8003908:	f06f 0303 	mvn.w	r3, #3
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e025      	b.n	800395c <BSP_CAMERA_Init+0x14c>
          }
          else if(HAL_DCMI_RegisterCallback(&hcamera_dcmi, HAL_DCMI_FRAME_EVENT_CB_ID, DCMI_FrameEventCallback) != HAL_OK)
 8003910:	4a24      	ldr	r2, [pc, #144]	; (80039a4 <BSP_CAMERA_Init+0x194>)
 8003912:	2100      	movs	r1, #0
 8003914:	481f      	ldr	r0, [pc, #124]	; (8003994 <BSP_CAMERA_Init+0x184>)
 8003916:	f001 fb2b 	bl	8004f70 <HAL_DCMI_RegisterCallback>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <BSP_CAMERA_Init+0x118>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8003920:	f06f 0303 	mvn.w	r3, #3
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e019      	b.n	800395c <BSP_CAMERA_Init+0x14c>
          }
          else if(HAL_DCMI_RegisterCallback(&hcamera_dcmi, HAL_DCMI_VSYNC_EVENT_CB_ID, DCMI_VsyncEventCallback) != HAL_OK)
 8003928:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <BSP_CAMERA_Init+0x198>)
 800392a:	2101      	movs	r1, #1
 800392c:	4819      	ldr	r0, [pc, #100]	; (8003994 <BSP_CAMERA_Init+0x184>)
 800392e:	f001 fb1f 	bl	8004f70 <HAL_DCMI_RegisterCallback>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <BSP_CAMERA_Init+0x130>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8003938:	f06f 0303 	mvn.w	r3, #3
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e00d      	b.n	800395c <BSP_CAMERA_Init+0x14c>
          }
          else if(HAL_DCMI_RegisterCallback(&hcamera_dcmi, HAL_DCMI_ERROR_CB_ID, DCMI_ErrorCallback) != HAL_OK)
 8003940:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <BSP_CAMERA_Init+0x19c>)
 8003942:	2103      	movs	r1, #3
 8003944:	4813      	ldr	r0, [pc, #76]	; (8003994 <BSP_CAMERA_Init+0x184>)
 8003946:	f001 fb13 	bl	8004f70 <HAL_DCMI_RegisterCallback>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <BSP_CAMERA_Init+0x148>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8003950:	f06f 0303 	mvn.w	r3, #3
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e001      	b.n	800395c <BSP_CAMERA_Init+0x14c>
          }
          else
          {
            ret = BSP_ERROR_NONE;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
        }
        if(ret == BSP_ERROR_NONE)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d111      	bne.n	8003986 <BSP_CAMERA_Init+0x176>
        {
          Camera_Ctx[Instance].Resolution  = Resolution;
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <BSP_CAMERA_Init+0x180>)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2134      	movs	r1, #52	; 0x34
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	3304      	adds	r3, #4
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <BSP_CAMERA_Init+0x180>)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2134      	movs	r1, #52	; 0x34
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3308      	adds	r3, #8
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* BSP status */
  return ret;
 8003986:	697b      	ldr	r3, [r7, #20]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000cc4 	.word	0x20000cc4
 8003994:	20000c48 	.word	0x20000c48
 8003998:	20000b24 	.word	0x20000b24
 800399c:	20000b28 	.word	0x20000b28
 80039a0:	08003e51 	.word	0x08003e51
 80039a4:	08003e67 	.word	0x08003e67
 80039a8:	08003e7d 	.word	0x08003e7d
 80039ac:	08003e93 	.word	0x08003e93

080039b0 <MX_DCMI_Init>:
  * @param  hdcmi  DCMI handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMI_Init(DCMI_HandleTypeDef* hdcmi)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <MX_DCMI_Init+0x50>)
 80039bc:	601a      	str	r2, [r3, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	615a      	str	r2, [r3, #20]
  hdcmi->Init.HSPolarity       = HSPolarity;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_DCMI_Init+0x54>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	611a      	str	r2, [r3, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	60da      	str	r2, [r3, #12]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	619a      	str	r2, [r3, #24]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	609a      	str	r2, [r3, #8]

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f001 f89b 	bl	8004b20 <HAL_DCMI_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_DCMI_Init+0x44>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <MX_DCMI_Init+0x46>
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	50050000 	.word	0x50050000
 8003a04:	20000b24 	.word	0x20000b24

08003a08 <BSP_CAMERA_RegisterDefaultMspCallbacks>:
  * @brief Default BSP CAMERA Msp Callbacks
  * @param Instance CAMERA Instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_RegisterDefaultMspCallbacks (uint32_t Instance)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a1a:	f06f 0301 	mvn.w	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e02a      	b.n	8003a78 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x70>
  }
  else
  {
    __HAL_DCMI_RESET_HANDLE_STATE(&hcamera_dcmi);
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x7c>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x7c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	675a      	str	r2, [r3, #116]	; 0x74
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x7c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Register MspInit/MspDeInit Callbacks */
    if(HAL_DCMI_RegisterCallback(&hcamera_dcmi, HAL_DCMI_MSPINIT_CB_ID, DCMI_MspInit) != HAL_OK)
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x80>)
 8003a38:	2104      	movs	r1, #4
 8003a3a:	4812      	ldr	r0, [pc, #72]	; (8003a84 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x7c>)
 8003a3c:	f001 fa98 	bl	8004f70 <HAL_DCMI_RegisterCallback>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <BSP_CAMERA_RegisterDefaultMspCallbacks+0x46>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a46:	f06f 0303 	mvn.w	r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e014      	b.n	8003a78 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x70>
    }
    else if(HAL_DCMI_RegisterCallback(&hcamera_dcmi, HAL_DCMI_MSPDEINIT_CB_ID, DCMI_MspDeInit) != HAL_OK)
 8003a4e:	4a0f      	ldr	r2, [pc, #60]	; (8003a8c <BSP_CAMERA_RegisterDefaultMspCallbacks+0x84>)
 8003a50:	2105      	movs	r1, #5
 8003a52:	480c      	ldr	r0, [pc, #48]	; (8003a84 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x7c>)
 8003a54:	f001 fa8c 	bl	8004f70 <HAL_DCMI_RegisterCallback>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x5e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a5e:	f06f 0303 	mvn.w	r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e008      	b.n	8003a78 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x70>
    }
    else
    {
      Camera_Ctx[Instance].IsMspCallbacksValid = 1;
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <BSP_CAMERA_RegisterDefaultMspCallbacks+0x88>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2134      	movs	r1, #52	; 0x34
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	3330      	adds	r3, #48	; 0x30
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    }
  }
  /* Return BSP status */
  return ret;
 8003a78:	68fb      	ldr	r3, [r7, #12]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000c48 	.word	0x20000c48
 8003a88:	08003c11 	.word	0x08003c11
 8003a8c:	08003dc1 	.word	0x08003dc1
 8003a90:	20000cc4 	.word	0x20000cc4

08003a94 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003aa6:	f06f 0301 	mvn.w	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e022      	b.n	8003af4 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hcamera_dcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003aae:	68bc      	ldr	r4, [r7, #8]
 8003ab0:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <BSP_CAMERA_Start+0x6c>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2134      	movs	r1, #52	; 0x34
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3304      	adds	r3, #4
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	490f      	ldr	r1, [pc, #60]	; (8003b00 <BSP_CAMERA_Start+0x6c>)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2034      	movs	r0, #52	; 0x34
 8003ac6:	fb00 f303 	mul.w	r3, r0, r3
 8003aca:	440b      	add	r3, r1
 8003acc:	3308      	adds	r3, #8
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 f84a 	bl	8003b6c <GetSize>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4622      	mov	r2, r4
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4809      	ldr	r0, [pc, #36]	; (8003b04 <BSP_CAMERA_Start+0x70>)
 8003ae0:	f001 f8cc 	bl	8004c7c <HAL_DCMI_Start_DMA>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003aea:	f06f 0303 	mvn.w	r3, #3
 8003aee:	e002      	b.n	8003af6 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003af4:	697b      	ldr	r3, [r7, #20]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd90      	pop	{r4, r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000cc4 	.word	0x20000cc4
 8003b04:	20000c48 	.word	0x20000c48

08003b08 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <BSP_CAMERA_HwReset+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b1a:	f06f 0301 	mvn.w	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e011      	b.n	8003b46 <BSP_CAMERA_HwReset+0x3e>
  }
  else
  {
    /* Init DCMI PWR_ENABLE Pin */
    /* Enable GPIO clock */
	BSP_IO_ConfigPin(CAMERA_PWR_EN_PIN, IO_MODE_OUTPUT);
 8003b22:	2101      	movs	r1, #1
 8003b24:	2040      	movs	r0, #64	; 0x40
 8003b26:	f000 fde7 	bl	80046f8 <BSP_IO_ConfigPin>
	BSP_IO_WritePin(CAMERA_PWR_EN_PIN, IO_PIN_SET);  // redLED down
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	2040      	movs	r0, #64	; 0x40
 8003b2e:	f000 fdff 	bl	8004730 <BSP_IO_WritePin>

    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8003b32:	2064      	movs	r0, #100	; 0x64
 8003b34:	f000 fe8c 	bl	8004850 <HAL_Delay>

    /* Assert the camera POWER_DOWN pin (active high) */
	BSP_IO_WritePin(CAMERA_PWR_EN_PIN, IO_PIN_RESET);  // redLED up
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2040      	movs	r0, #64	; 0x40
 8003b3c:	f000 fdf8 	bl	8004730 <BSP_IO_WritePin>
    HAL_Delay(20);
 8003b40:	2014      	movs	r0, #20
 8003b42:	f000 fe85 	bl	8004850 <HAL_Delay>
  }

  return ret;
 8003b46:	69fb      	ldr	r3, [r7, #28]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <DCMI_IRQHandler>:
  * @brief  This function handles DCMI interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_IRQHandler(uint32_t Instance)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 8003b58:	4803      	ldr	r0, [pc, #12]	; (8003b68 <DCMI_IRQHandler+0x18>)
 8003b5a:	f001 f961 	bl	8004e20 <HAL_DCMI_IRQHandler>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000c48 	.word	0x20000c48

08003b6c <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Camera pixel format
  * @retval capture size in 32-bit words.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d102      	bne.n	8003b86 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003b80:	2303      	movs	r3, #3
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	e001      	b.n	8003b8a <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003b86:	2302      	movs	r3, #2
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d834      	bhi.n	8003bfa <GetSize+0x8e>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <GetSize+0x2c>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bad 	.word	0x08003bad
 8003b9c:	08003bbd 	.word	0x08003bbd
 8003ba0:	08003bcd 	.word	0x08003bcd
 8003ba4:	08003bdd 	.word	0x08003bdd
 8003ba8:	08003bed 	.word	0x08003bed
  }
  /* Get capture size */
  switch (Resolution)
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	60fb      	str	r3, [r7, #12]
    break;
 8003bba:	e01f      	b.n	8003bfc <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	60fb      	str	r3, [r7, #12]
    break;
 8003bca:	e017      	b.n	8003bfc <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	025b      	lsls	r3, r3, #9
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	60fb      	str	r3, [r7, #12]
    break;
 8003bda:	e00f      	b.n	8003bfc <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	60fb      	str	r3, [r7, #12]
    break;
 8003bea:	e007      	b.n	8003bfc <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <GetSize+0xa0>)
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	60fb      	str	r3, [r7, #12]
    break;
 8003bf8:	e000      	b.n	8003bfc <GetSize+0x90>
  default:
    break;
 8003bfa:	bf00      	nop
  }

  return (int32_t)size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	0005dc00 	.word	0x0005dc00

08003c10 <DCMI_MspInit>:
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08e      	sub	sp, #56	; 0x38
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	  static DMA_HandleTypeDef hdma_handler;
	  GPIO_InitTypeDef gpio_init_structure;

	  /*** Enable peripherals and GPIO clocks ***/
	  /* Enable DCMI clock */
	  __HAL_RCC_DCMI_CLK_ENABLE();
 8003c18:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1c:	4a62      	ldr	r2, [pc, #392]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c24:	4b60      	ldr	r3, [pc, #384]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]

	  /* Enable DMA2 clock */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c30:	4b5d      	ldr	r3, [pc, #372]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c34:	4a5c      	ldr	r2, [pc, #368]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c36:	f043 0302 	orr.w	r3, r3, #2
 8003c3a:	6493      	str	r3, [r2, #72]	; 0x48
 8003c3c:	4b5a      	ldr	r3, [pc, #360]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	69fb      	ldr	r3, [r7, #28]

	  /* Enable GPIO clocks */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c48:	4b57      	ldr	r3, [pc, #348]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	4a56      	ldr	r2, [pc, #344]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c54:	4b54      	ldr	r3, [pc, #336]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c60:	4b51      	ldr	r3, [pc, #324]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c64:	4a50      	ldr	r2, [pc, #320]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c66:	f043 0310 	orr.w	r3, r3, #16
 8003c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c6c:	4b4e      	ldr	r3, [pc, #312]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c78:	4b4b      	ldr	r3, [pc, #300]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7c:	4a4a      	ldr	r2, [pc, #296]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c84:	4b48      	ldr	r3, [pc, #288]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c90:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	4a44      	ldr	r2, [pc, #272]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c9c:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <DCMI_MspInit+0x198>)
 8003c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]

	  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 8003ca8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003cac:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f003 fdf1 	bl	8007898 <HAL_RCC_MCOConfig>
	  __HAL_RCC_HSI48_ENABLE();
 8003cb6:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <DCMI_MspInit+0x198>)
 8003cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cbc:	4a3a      	ldr	r2, [pc, #232]	; (8003da8 <DCMI_MspInit+0x198>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	  HAL_Delay(10); // HSI48 should start in 10ms
 8003cc6:	200a      	movs	r0, #10
 8003cc8:	f000 fdc2 	bl	8004850 <HAL_Delay>


	  /*** Configure the GPIO ***/
	  /* Configure DCMI GPIO as alternate function */
	  gpio_init_structure.Pin       = GPIO_PIN_5;
 8003ccc:	2320      	movs	r3, #32
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
	  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
	  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
	  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8003cdc:	230a      	movs	r3, #10
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4831      	ldr	r0, [pc, #196]	; (8003dac <DCMI_MspInit+0x19c>)
 8003ce8:	f001 fe5e 	bl	80059a8 <HAL_GPIO_Init>


	  gpio_init_structure.Pin       = GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | \
 8003cec:	f645 7320 	movw	r3, #24352	; 0x5f20
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
	                                  GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14;
	  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
	  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
	  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8003cfe:	230a      	movs	r3, #10
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d06:	4619      	mov	r1, r3
 8003d08:	4829      	ldr	r0, [pc, #164]	; (8003db0 <DCMI_MspInit+0x1a0>)
 8003d0a:	f001 fe4d 	bl	80059a8 <HAL_GPIO_Init>

	  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 8003d0e:	23b0      	movs	r3, #176	; 0xb0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
	  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d12:	2302      	movs	r3, #2
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
	  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
	  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
	  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8003d1e:	230a      	movs	r3, #10
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d26:	4619      	mov	r1, r3
 8003d28:	4822      	ldr	r0, [pc, #136]	; (8003db4 <DCMI_MspInit+0x1a4>)
 8003d2a:	f001 fe3d 	bl	80059a8 <HAL_GPIO_Init>

	  /*** Configure the DMA ***/
	  /* Set the parameters to be configured */
	  hdma_handler.Instance                 = BSP_CAMERA_DMA_INSTANCE;
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <DCMI_MspInit+0x1ac>)
 8003d32:	601a      	str	r2, [r3, #0]

	  hdma_handler.Init.Request             = DMA_REQUEST_0;
 8003d34:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	605a      	str	r2, [r3, #4]
	  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
	  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
	  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;      /* Image captured by the DCMI is stored in memory */
 8003d46:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	611a      	str	r2, [r3, #16]
	  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d52:	615a      	str	r2, [r3, #20]
	  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]
	  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d5e:	2220      	movs	r2, #32
 8003d60:	61da      	str	r2, [r3, #28]
	  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d68:	621a      	str	r2, [r3, #32]

	  /* Associate the initialized DMA handle to the DCMI handle */
	  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8003d70:	4a11      	ldr	r2, [pc, #68]	; (8003db8 <DCMI_MspInit+0x1a8>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6293      	str	r3, [r2, #40]	; 0x28

	  /*** Configure the NVIC for DCMI and DMA ***/
	  /* NVIC configuration for DCMI transfer complete interrupt */
	  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	210f      	movs	r1, #15
 8003d7a:	2055      	movs	r0, #85	; 0x55
 8003d7c:	f000 fe8b 	bl	8004a96 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003d80:	2055      	movs	r0, #85	; 0x55
 8003d82:	f000 fea4 	bl	8004ace <HAL_NVIC_EnableIRQ>

	  /* NVIC configuration for DMA2D transfer complete interrupt */
	  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0x0F, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	210f      	movs	r1, #15
 8003d8a:	2044      	movs	r0, #68	; 0x44
 8003d8c:	f000 fe83 	bl	8004a96 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003d90:	2044      	movs	r0, #68	; 0x44
 8003d92:	f000 fe9c 	bl	8004ace <HAL_NVIC_EnableIRQ>

	  /* Configure the DMA stream */
	  HAL_DMA_Init(hdcmi->DMA_Handle);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 fae8 	bl	8005370 <HAL_DMA_Init>
}
 8003da0:	bf00      	nop
 8003da2:	3738      	adds	r7, #56	; 0x38
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	48001000 	.word	0x48001000
 8003db0:	48001c00 	.word	0x48001c00
 8003db4:	48002000 	.word	0x48002000
 8003db8:	20000b2c 	.word	0x20000b2c
 8003dbc:	4002046c 	.word	0x4002046c

08003dc0 <DCMI_MspDeInit>:
  * @brief  DeInitializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8003dc8:	2055      	movs	r0, #85	; 0x55
 8003dca:	f000 fe8e 	bl	8004aea <HAL_NVIC_DisableIRQ>

  /* Disable NVIC for DMA2 transfer complete interrupt */
//  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);

  /* Configure the DMA stream */
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 fb84 	bl	80054e0 <HAL_DMA_DeInit>

  /* DeInit DCMI GPIOs */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8003dd8:	2350      	movs	r3, #80	; 0x50
 8003dda:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4619      	mov	r1, r3
 8003de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de4:	f001 ff72 	bl	8005ccc <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8003de8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003dec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4619      	mov	r1, r3
 8003df2:	4812      	ldr	r0, [pc, #72]	; (8003e3c <DCMI_MspDeInit+0x7c>)
 8003df4:	f001 ff6a 	bl	8005ccc <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8003df8:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 8003dfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4619      	mov	r1, r3
 8003e02:	480f      	ldr	r0, [pc, #60]	; (8003e40 <DCMI_MspDeInit+0x80>)
 8003e04:	f001 ff62 	bl	8005ccc <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_3;
 8003e08:	2308      	movs	r3, #8
 8003e0a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	480c      	ldr	r0, [pc, #48]	; (8003e44 <DCMI_MspDeInit+0x84>)
 8003e12:	f001 ff5b 	bl	8005ccc <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_10;
 8003e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e1a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4809      	ldr	r0, [pc, #36]	; (8003e48 <DCMI_MspDeInit+0x88>)
 8003e22:	f001 ff53 	bl	8005ccc <HAL_GPIO_DeInit>



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <DCMI_MspDeInit+0x8c>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <DCMI_MspDeInit+0x8c>)
 8003e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e30:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003e32:	bf00      	nop
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	48000400 	.word	0x48000400
 8003e40:	48000800 	.word	0x48000800
 8003e44:	48000c00 	.word	0x48000c00
 8003e48:	48001800 	.word	0x48001800
 8003e4c:	40021000 	.word	0x40021000

08003e50 <DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
static void DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f000 f825 	bl	8003ea8 <BSP_CAMERA_LineEventCallback>
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
static void DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f000 f824 	bl	8003ebc <BSP_CAMERA_FrameEventCallback>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
static void DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003e84:	2000      	movs	r0, #0
 8003e86:	f000 f823 	bl	8003ed0 <BSP_CAMERA_VsyncEventCallback>
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
static void DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f000 f822 	bl	8003ee4 <BSP_CAMERA_ErrorCallback>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <BSP_CAMERA_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
   int32_t ret;
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;  // ok
 8003f02:	2378      	movs	r3, #120	; 0x78
 8003f04:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C2_Init;
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <OV5640_Probe+0xbc>)
 8003f08:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <OV5640_Probe+0xc0>)
 8003f0c:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg16;
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <OV5640_Probe+0xc4>)
 8003f10:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg16;
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <OV5640_Probe+0xc8>)
 8003f14:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003f16:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <OV5640_Probe+0xcc>)
 8003f18:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4829      	ldr	r0, [pc, #164]	; (8003fc8 <OV5640_Probe+0xd0>)
 8003f22:	f7fd fb85 	bl	8001630 <OV5640_RegisterBusIO>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f2c:	f06f 0304 	mvn.w	r3, #4
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
 8003f32:	e03a      	b.n	8003faa <OV5640_Probe+0xb2>
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 8003f34:	4925      	ldr	r1, [pc, #148]	; (8003fcc <OV5640_Probe+0xd4>)
 8003f36:	4824      	ldr	r0, [pc, #144]	; (8003fc8 <OV5640_Probe+0xd0>)
 8003f38:	f7fd ffce 	bl	8001ed8 <OV5640_ReadID>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <OV5640_Probe+0x52>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f42:	f06f 0304 	mvn.w	r3, #4
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	e02f      	b.n	8003faa <OV5640_Probe+0xb2>
  }
  else
  {
    if(CameraId != OV5640_ID)
 8003f4a:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <OV5640_Probe+0xd4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f245 6240 	movw	r2, #22080	; 0x5640
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <OV5640_Probe+0x66>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f56:	f06f 0306 	mvn.w	r3, #6
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	e025      	b.n	8003faa <OV5640_Probe+0xb2>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <OV5640_Probe+0xd8>)
 8003f60:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <OV5640_Probe+0xdc>)
 8003f62:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003f64:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <OV5640_Probe+0xe0>)
 8003f66:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <OV5640_Probe+0xd0>)
 8003f68:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <OV5640_Probe+0xd8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a19      	ldr	r2, [pc, #100]	; (8003fd8 <OV5640_Probe+0xe0>)
 8003f72:	6810      	ldr	r0, [r2, #0]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4798      	blx	r3
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <OV5640_Probe+0x90>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f80:	f06f 0304 	mvn.w	r3, #4
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	e010      	b.n	8003faa <OV5640_Probe+0xb2>
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <OV5640_Probe+0xd8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <OV5640_Probe+0xe0>)
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	4912      	ldr	r1, [pc, #72]	; (8003fdc <OV5640_Probe+0xe4>)
 8003f94:	4610      	mov	r0, r2
 8003f96:	4798      	blx	r3
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <OV5640_Probe+0xae>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f9e:	f06f 0304 	mvn.w	r3, #4
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	e001      	b.n	8003faa <OV5640_Probe+0xb2>
      }
      else
      {

        ret = BSP_ERROR_NONE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3728      	adds	r7, #40	; 0x28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	08002f85 	.word	0x08002f85
 8003fb8:	08002ff9 	.word	0x08002ff9
 8003fbc:	08003121 	.word	0x08003121
 8003fc0:	080030c5 	.word	0x080030c5
 8003fc4:	0800317d 	.word	0x0800317d
 8003fc8:	20000b74 	.word	0x20000b74
 8003fcc:	20000b28 	.word	0x20000b28
 8003fd0:	20000af8 	.word	0x20000af8
 8003fd4:	20000078 	.word	0x20000078
 8003fd8:	20000af4 	.word	0x20000af4
 8003fdc:	20000afc 	.word	0x20000afc

08003fe0 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  while (1);
 8003fe4:	e7fe      	b.n	8003fe4 <BSP_ErrorHandler+0x4>
	...

08003fe8 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d124      	bne.n	8004042 <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <BSP_LED_Init+0x90>)
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <BSP_LED_Init+0x90>)
 8003ffe:	f043 0302 	orr.w	r3, r3, #2
 8004002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004004:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <BSP_LED_Init+0x90>)
 8004006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	4a1a      	ldr	r2, [pc, #104]	; (800407c <BSP_LED_Init+0x94>)
 8004014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004018:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800401a:	2301      	movs	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004022:	2303      	movs	r3, #3
 8004024:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8004026:	f107 030c 	add.w	r3, r7, #12
 800402a:	4619      	mov	r1, r3
 800402c:	4814      	ldr	r0, [pc, #80]	; (8004080 <BSP_LED_Init+0x98>)
 800402e:	f001 fcbb 	bl	80059a8 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	b29b      	uxth	r3, r3
 8004036:	2201      	movs	r2, #1
 8004038:	4619      	mov	r1, r3
 800403a:	4811      	ldr	r0, [pc, #68]	; (8004080 <BSP_LED_Init+0x98>)
 800403c:	f001 ff38 	bl	8005eb0 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8004040:	e016      	b.n	8004070 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 8004042:	f000 fb15 	bl	8004670 <BSP_IO_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 800404c:	f7ff ffc8 	bl	8003fe0 <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <BSP_LED_Init+0x94>)
 8004054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fb4c 	bl	80046f8 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	4a06      	ldr	r2, [pc, #24]	; (800407c <BSP_LED_Init+0x94>)
 8004064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004068:	2101      	movs	r1, #1
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fb60 	bl	8004730 <BSP_IO_WritePin>
}
 8004070:	bf00      	nop
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40021000 	.word	0x40021000
 800407c:	08009830 	.word	0x08009830
 8004080:	48000400 	.word	0x48000400

08004084 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d109      	bne.n	80040a8 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <BSP_LED_On+0x3c>)
 8004098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800409c:	2200      	movs	r2, #0
 800409e:	4619      	mov	r1, r3
 80040a0:	4808      	ldr	r0, [pc, #32]	; (80040c4 <BSP_LED_On+0x40>)
 80040a2:	f001 ff05 	bl	8005eb0 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 80040a6:	e007      	b.n	80040b8 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <BSP_LED_On+0x3c>)
 80040ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fb3c 	bl	8004730 <BSP_IO_WritePin>
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	08009830 	.word	0x08009830
 80040c4:	48000400 	.word	0x48000400

080040c8 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 80040cc:	4812      	ldr	r0, [pc, #72]	; (8004118 <I2C2_Init+0x50>)
 80040ce:	f002 fb0e 	bl	80066ee <HAL_I2C_GetState>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d11d      	bne.n	8004114 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <I2C2_Init+0x50>)
 80040da:	4a10      	ldr	r2, [pc, #64]	; (800411c <I2C2_Init+0x54>)
 80040dc:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <I2C2_Init+0x50>)
 80040e0:	4a0f      	ldr	r2, [pc, #60]	; (8004120 <I2C2_Init+0x58>)
 80040e2:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <I2C2_Init+0x50>)
 80040e6:	2270      	movs	r2, #112	; 0x70
 80040e8:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <I2C2_Init+0x50>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <I2C2_Init+0x50>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <I2C2_Init+0x50>)
 80040f8:	22ff      	movs	r2, #255	; 0xff
 80040fa:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <I2C2_Init+0x50>)
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <I2C2_Init+0x50>)
 8004104:	2200      	movs	r2, #0
 8004106:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8004108:	4803      	ldr	r0, [pc, #12]	; (8004118 <I2C2_Init+0x50>)
 800410a:	f000 f80b 	bl	8004124 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 800410e:	4802      	ldr	r0, [pc, #8]	; (8004118 <I2C2_Init+0x50>)
 8004110:	f001 fee6 	bl	8005ee0 <HAL_I2C_Init>
  }
}
 8004114:	bf00      	nop
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000b9c 	.word	0x20000b9c
 800411c:	40005800 	.word	0x40005800
 8004120:	40403e5d 	.word	0x40403e5d

08004124 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b0ae      	sub	sp, #184	; 0xb8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a37      	ldr	r2, [pc, #220]	; (8004210 <I2C2_MspInit+0xec>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d168      	bne.n	8004208 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800413a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800413e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8004140:	f107 0318 	add.w	r3, r7, #24
 8004144:	4618      	mov	r0, r3
 8004146:	f003 fcff 	bl	8007b48 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800414a:	4b32      	ldr	r3, [pc, #200]	; (8004214 <I2C2_MspInit+0xf0>)
 800414c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414e:	4a31      	ldr	r2, [pc, #196]	; (8004214 <I2C2_MspInit+0xf0>)
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004156:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <I2C2_MspInit+0xf0>)
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8004162:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <I2C2_MspInit+0xf0>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4a2b      	ldr	r2, [pc, #172]	; (8004214 <I2C2_MspInit+0xf0>)
 8004168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800416e:	4b29      	ldr	r3, [pc, #164]	; (8004214 <I2C2_MspInit+0xf0>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800417a:	2310      	movs	r3, #16
 800417c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8004180:	2312      	movs	r3, #18
 8004182:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8004186:	2301      	movs	r3, #1
 8004188:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8004192:	2304      	movs	r3, #4
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8004198:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800419c:	4619      	mov	r1, r3
 800419e:	481e      	ldr	r0, [pc, #120]	; (8004218 <I2C2_MspInit+0xf4>)
 80041a0:	f001 fc02 	bl	80059a8 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 80041a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 80041ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041b0:	4619      	mov	r1, r3
 80041b2:	481a      	ldr	r0, [pc, #104]	; (800421c <I2C2_MspInit+0xf8>)
 80041b4:	f001 fbf8 	bl	80059a8 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <I2C2_MspInit+0xf0>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	4a15      	ldr	r2, [pc, #84]	; (8004214 <I2C2_MspInit+0xf0>)
 80041be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <I2C2_MspInit+0xf0>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <I2C2_MspInit+0xf0>)
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <I2C2_MspInit+0xf0>)
 80041d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041da:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <I2C2_MspInit+0xf0>)
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <I2C2_MspInit+0xf0>)
 80041e2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80041e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 80041e8:	2200      	movs	r2, #0
 80041ea:	2100      	movs	r1, #0
 80041ec:	2021      	movs	r0, #33	; 0x21
 80041ee:	f000 fc52 	bl	8004a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80041f2:	2021      	movs	r0, #33	; 0x21
 80041f4:	f000 fc6b 	bl	8004ace <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 80041f8:	2200      	movs	r2, #0
 80041fa:	2100      	movs	r1, #0
 80041fc:	2022      	movs	r0, #34	; 0x22
 80041fe:	f000 fc4a 	bl	8004a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8004202:	2022      	movs	r0, #34	; 0x22
 8004204:	f000 fc63 	bl	8004ace <HAL_NVIC_EnableIRQ>
  }
}
 8004208:	bf00      	nop
 800420a:	37b8      	adds	r7, #184	; 0xb8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40005800 	.word	0x40005800
 8004214:	40021000 	.word	0x40021000
 8004218:	48001c00 	.word	0x48001c00
 800421c:	48000400 	.word	0x48000400

08004220 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8004224:	4806      	ldr	r0, [pc, #24]	; (8004240 <I2C2_DeInit+0x20>)
 8004226:	f002 fa62 	bl	80066ee <HAL_I2C_GetState>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8004230:	4803      	ldr	r0, [pc, #12]	; (8004240 <I2C2_DeInit+0x20>)
 8004232:	f001 fee4 	bl	8005ffe <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8004236:	4802      	ldr	r0, [pc, #8]	; (8004240 <I2C2_DeInit+0x20>)
 8004238:	f000 f804 	bl	8004244 <I2C2_MspDeInit>
  }
}
 800423c:	bf00      	nop
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000b9c 	.word	0x20000b9c

08004244 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <I2C2_MspDeInit+0x8c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d138      	bne.n	80042c8 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8004256:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <I2C2_MspDeInit+0x90>)
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <I2C2_MspDeInit+0x90>)
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <I2C2_MspDeInit+0x90>)
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800426e:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <I2C2_MspDeInit+0x90>)
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <I2C2_MspDeInit+0x90>)
 8004274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800427a:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <I2C2_MspDeInit+0x90>)
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8004286:	2110      	movs	r1, #16
 8004288:	4813      	ldr	r0, [pc, #76]	; (80042d8 <I2C2_MspDeInit+0x94>)
 800428a:	f001 fd1f 	bl	8005ccc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 800428e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004292:	4812      	ldr	r0, [pc, #72]	; (80042dc <I2C2_MspDeInit+0x98>)
 8004294:	f001 fd1a 	bl	8005ccc <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <I2C2_MspDeInit+0x90>)
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <I2C2_MspDeInit+0x90>)
 800429e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042a2:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <I2C2_MspDeInit+0x90>)
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <I2C2_MspDeInit+0x90>)
 80042aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <I2C2_MspDeInit+0x90>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <I2C2_MspDeInit+0x90>)
 80042b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042ba:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80042bc:	2021      	movs	r0, #33	; 0x21
 80042be:	f000 fc14 	bl	8004aea <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80042c2:	2022      	movs	r0, #34	; 0x22
 80042c4:	f000 fc11 	bl	8004aea <HAL_NVIC_DisableIRQ>
  }
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40005800 	.word	0x40005800
 80042d4:	40021000 	.word	0x40021000
 80042d8:	48001c00 	.word	0x48001c00
 80042dc:	48000400 	.word	0x48000400

080042e0 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af04      	add	r7, sp, #16
 80042e6:	4604      	mov	r4, r0
 80042e8:	4608      	mov	r0, r1
 80042ea:	4611      	mov	r1, r2
 80042ec:	461a      	mov	r2, r3
 80042ee:	4623      	mov	r3, r4
 80042f0:	80fb      	strh	r3, [r7, #6]
 80042f2:	4603      	mov	r3, r0
 80042f4:	80bb      	strh	r3, [r7, #4]
 80042f6:	460b      	mov	r3, r1
 80042f8:	807b      	strh	r3, [r7, #2]
 80042fa:	4613      	mov	r3, r2
 80042fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004302:	b672      	cpsid	i
}
 8004304:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <I2C2_WriteData+0x5c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	8878      	ldrh	r0, [r7, #2]
 800430c:	88ba      	ldrh	r2, [r7, #4]
 800430e:	88f9      	ldrh	r1, [r7, #6]
 8004310:	9302      	str	r3, [sp, #8]
 8004312:	2301      	movs	r3, #1
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	1c7b      	adds	r3, r7, #1
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	4603      	mov	r3, r0
 800431c:	4808      	ldr	r0, [pc, #32]	; (8004340 <I2C2_WriteData+0x60>)
 800431e:	f001 feb1 	bl	8006084 <HAL_I2C_Mem_Write>
 8004322:	4603      	mov	r3, r0
 8004324:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004326:	b662      	cpsie	i
}
 8004328:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004330:	f000 f890 	bl	8004454 <I2C2_Error>
  }
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	bd90      	pop	{r4, r7, pc}
 800433c:	200000bc 	.word	0x200000bc
 8004340:	20000b9c 	.word	0x20000b9c

08004344 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af04      	add	r7, sp, #16
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
 800434e:	460b      	mov	r3, r1
 8004350:	80bb      	strh	r3, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800435a:	2300      	movs	r3, #0
 800435c:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800435e:	b672      	cpsid	i
}
 8004360:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <I2C2_ReadData+0x60>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	8878      	ldrh	r0, [r7, #2]
 8004368:	88ba      	ldrh	r2, [r7, #4]
 800436a:	88f9      	ldrh	r1, [r7, #6]
 800436c:	9302      	str	r3, [sp, #8]
 800436e:	2301      	movs	r3, #1
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	f107 030e 	add.w	r3, r7, #14
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4603      	mov	r3, r0
 800437a:	480b      	ldr	r0, [pc, #44]	; (80043a8 <I2C2_ReadData+0x64>)
 800437c:	f001 ff96 	bl	80062ac <HAL_I2C_Mem_Read>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004384:	b662      	cpsie	i
}
 8004386:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800438e:	f000 f861 	bl	8004454 <I2C2_Error>
    HAL_Delay(200);
 8004392:	20c8      	movs	r0, #200	; 0xc8
 8004394:	f000 fa5c 	bl	8004850 <HAL_Delay>
  }

  return value;
 8004398:	7bbb      	ldrb	r3, [r7, #14]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200000bc 	.word	0x200000bc
 80043a8:	20000b9c 	.word	0x20000b9c

080043ac <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80043bc:	2300      	movs	r3, #0
 80043be:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80043c0:	b672      	cpsid	i
}
 80043c2:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 80043c4:	88f9      	ldrh	r1, [r7, #6]
 80043c6:	2332      	movs	r3, #50	; 0x32
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	480a      	ldr	r0, [pc, #40]	; (80043f4 <I2C2_isDeviceReady+0x48>)
 80043cc:	f002 f888 	bl	80064e0 <HAL_I2C_IsDeviceReady>
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80043d4:	b662      	cpsie	i
}
 80043d6:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80043de:	f000 f839 	bl	8004454 <I2C2_Error>
    HAL_Delay(200);
 80043e2:	20c8      	movs	r0, #200	; 0xc8
 80043e4:	f000 fa34 	bl	8004850 <HAL_Delay>
  }

  return value;
 80043e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000b9c 	.word	0x20000b9c

080043f8 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af04      	add	r7, sp, #16
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	4603      	mov	r3, r0
 8004402:	81fb      	strh	r3, [r7, #14]
 8004404:	460b      	mov	r3, r1
 8004406:	81bb      	strh	r3, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8004410:	b672      	cpsid	i
}
 8004412:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <I2C2_ReadBuffer+0x54>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	8978      	ldrh	r0, [r7, #10]
 800441a:	89ba      	ldrh	r2, [r7, #12]
 800441c:	89f9      	ldrh	r1, [r7, #14]
 800441e:	9302      	str	r3, [sp, #8]
 8004420:	8c3b      	ldrh	r3, [r7, #32]
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4603      	mov	r3, r0
 800442a:	4809      	ldr	r0, [pc, #36]	; (8004450 <I2C2_ReadBuffer+0x58>)
 800442c:	f001 ff3e 	bl	80062ac <HAL_I2C_Mem_Read>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8004434:	b662      	cpsie	i
}
 8004436:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800443e:	f000 f809 	bl	8004454 <I2C2_Error>
  }

  return status;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	200000bc 	.word	0x200000bc
 8004450:	20000b9c 	.word	0x20000b9c

08004454 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8004458:	f7ff fdc2 	bl	8003fe0 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 800445c:	4803      	ldr	r0, [pc, #12]	; (800446c <I2C2_Error+0x18>)
 800445e:	f001 fdce 	bl	8005ffe <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8004462:	f7ff fe31 	bl	80040c8 <I2C2_Init>
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000b9c 	.word	0x20000b9c

08004470 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8004474:	f7ff fe28 	bl	80040c8 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8004478:	2104      	movs	r1, #4
 800447a:	2084      	movs	r0, #132	; 0x84
 800447c:	f7ff ff96 	bl	80043ac <I2C2_isDeviceReady>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8004486:	f7ff fdab 	bl	8003fe0 <BSP_ErrorHandler>
  }
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8004496:	4b19      	ldr	r3, [pc, #100]	; (80044fc <MFX_IO_DeInit+0x6c>)
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	4a18      	ldr	r2, [pc, #96]	; (80044fc <MFX_IO_DeInit+0x6c>)
 800449c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044a2:	4b16      	ldr	r3, [pc, #88]	; (80044fc <MFX_IO_DeInit+0x6c>)
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80044ae:	2340      	movs	r3, #64	; 0x40
 80044b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80044b2:	2301      	movs	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80044ba:	2302      	movs	r3, #2
 80044bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80044be:	f107 030c 	add.w	r3, r7, #12
 80044c2:	4619      	mov	r1, r3
 80044c4:	480e      	ldr	r0, [pc, #56]	; (8004500 <MFX_IO_DeInit+0x70>)
 80044c6:	f001 fa6f 	bl	80059a8 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80044ca:	2017      	movs	r0, #23
 80044cc:	f000 fb0d 	bl	8004aea <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <MFX_IO_DeInit+0x6c>)
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d4:	4a09      	ldr	r2, [pc, #36]	; (80044fc <MFX_IO_DeInit+0x6c>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <MFX_IO_DeInit+0x6c>)
 80044de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 80044e8:	2120      	movs	r1, #32
 80044ea:	4806      	ldr	r0, [pc, #24]	; (8004504 <MFX_IO_DeInit+0x74>)
 80044ec:	f001 fbee 	bl	8005ccc <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 80044f0:	f7ff fe96 	bl	8004220 <I2C2_DeInit>
}
 80044f4:	bf00      	nop
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000
 8004500:	48001c00 	.word	0x48001c00
 8004504:	48000800 	.word	0x48000800

08004508 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <MFX_IO_ITConfig+0x54>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <MFX_IO_ITConfig+0x54>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <MFX_IO_ITConfig+0x54>)
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8004526:	2320      	movs	r3, #32
 8004528:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8004532:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004536:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4808      	ldr	r0, [pc, #32]	; (8004560 <MFX_IO_ITConfig+0x58>)
 800453e:	f001 fa33 	bl	80059a8 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8004542:	220f      	movs	r2, #15
 8004544:	210f      	movs	r1, #15
 8004546:	2017      	movs	r0, #23
 8004548:	f000 faa5 	bl	8004a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800454c:	2017      	movs	r0, #23
 800454e:	f000 fabe 	bl	8004ace <HAL_NVIC_EnableIRQ>
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	48000800 	.word	0x48000800

08004564 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800456a:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <MFX_IO_EnableWakeupPin+0x40>)
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456e:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <MFX_IO_EnableWakeupPin+0x40>)
 8004570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <MFX_IO_EnableWakeupPin+0x40>)
 8004578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8004582:	2340      	movs	r3, #64	; 0x40
 8004584:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004586:	2301      	movs	r3, #1
 8004588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800458a:	2302      	movs	r3, #2
 800458c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4804      	ldr	r0, [pc, #16]	; (80045a8 <MFX_IO_EnableWakeupPin+0x44>)
 8004598:	f001 fa06 	bl	80059a8 <HAL_GPIO_Init>
}
 800459c:	bf00      	nop
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	48001c00 	.word	0x48001c00

080045ac <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 80045b0:	2201      	movs	r2, #1
 80045b2:	2140      	movs	r1, #64	; 0x40
 80045b4:	4806      	ldr	r0, [pc, #24]	; (80045d0 <MFX_IO_Wakeup+0x24>)
 80045b6:	f001 fc7b 	bl	8005eb0 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 80045ba:	2001      	movs	r0, #1
 80045bc:	f000 f948 	bl	8004850 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80045c0:	2200      	movs	r2, #0
 80045c2:	2140      	movs	r1, #64	; 0x40
 80045c4:	4802      	ldr	r0, [pc, #8]	; (80045d0 <MFX_IO_Wakeup+0x24>)
 80045c6:	f001 fc73 	bl	8005eb0 <HAL_GPIO_WritePin>
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	48001c00 	.word	0x48001c00

080045d4 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
 80045de:	460b      	mov	r3, r1
 80045e0:	717b      	strb	r3, [r7, #5]
 80045e2:	4613      	mov	r3, r2
 80045e4:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 80045e6:	797b      	ldrb	r3, [r7, #5]
 80045e8:	b299      	uxth	r1, r3
 80045ea:	793b      	ldrb	r3, [r7, #4]
 80045ec:	88f8      	ldrh	r0, [r7, #6]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f7ff fe76 	bl	80042e0 <I2C2_WriteData>
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	460a      	mov	r2, r1
 8004606:	80fb      	strh	r3, [r7, #6]
 8004608:	4613      	mov	r3, r2
 800460a:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800460c:	797b      	ldrb	r3, [r7, #5]
 800460e:	b299      	uxth	r1, r3
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	2201      	movs	r2, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fe95 	bl	8004344 <I2C2_ReadData>
 800461a:	4603      	mov	r3, r0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af02      	add	r7, sp, #8
 800462a:	60ba      	str	r2, [r7, #8]
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	81fb      	strh	r3, [r7, #14]
 8004632:	460b      	mov	r3, r1
 8004634:	737b      	strb	r3, [r7, #13]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800463a:	7b7b      	ldrb	r3, [r7, #13]
 800463c:	b299      	uxth	r1, r3
 800463e:	89f8      	ldrh	r0, [r7, #14]
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2201      	movs	r2, #1
 8004648:	f7ff fed6 	bl	80043f8 <I2C2_ReadBuffer>
 800464c:	4603      	mov	r3, r0
 800464e:	b29b      	uxth	r3, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f8f5 	bl	8004850 <HAL_Delay>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800467e:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <BSP_IO_Init+0x78>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d128      	bne.n	80046d8 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8004686:	4b19      	ldr	r3, [pc, #100]	; (80046ec <BSP_IO_Init+0x7c>)
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2084      	movs	r0, #132	; 0x84
 800468c:	4798      	blx	r3

    HAL_Delay(10);
 800468e:	200a      	movs	r0, #10
 8004690:	f000 f8de 	bl	8004850 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <BSP_IO_Init+0x80>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2084      	movs	r0, #132	; 0x84
 800469a:	4798      	blx	r3
 800469c:	4603      	mov	r3, r0
 800469e:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 80046a0:	79bb      	ldrb	r3, [r7, #6]
 80046a2:	2b7b      	cmp	r3, #123	; 0x7b
 80046a4:	d002      	beq.n	80046ac <BSP_IO_Init+0x3c>
 80046a6:	79bb      	ldrb	r3, [r7, #6]
 80046a8:	2b79      	cmp	r3, #121	; 0x79
 80046aa:	d117      	bne.n	80046dc <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <BSP_IO_Init+0x78>)
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <BSP_IO_Init+0x80>)
 80046b0:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <BSP_IO_Init+0x78>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00f      	beq.n	80046dc <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <BSP_IO_Init+0x78>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2084      	movs	r0, #132	; 0x84
 80046c4:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <BSP_IO_Init+0x78>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4909      	ldr	r1, [pc, #36]	; (80046f4 <BSP_IO_Init+0x84>)
 80046ce:	2084      	movs	r0, #132	; 0x84
 80046d0:	4798      	blx	r3

        ret = IO_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	71fb      	strb	r3, [r7, #7]
 80046d6:	e001      	b.n	80046dc <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 80046d8:	2303      	movs	r3, #3
 80046da:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 80046dc:	79fb      	ldrb	r3, [r7, #7]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000bf0 	.word	0x20000bf0
 80046ec:	2000002c 	.word	0x2000002c
 80046f0:	20000000 	.word	0x20000000
 80046f4:	000301ff 	.word	0x000301ff

080046f8 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <BSP_IO_ConfigPin+0x30>)
 800470c:	4013      	ands	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <BSP_IO_ConfigPin+0x34>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	68f9      	ldr	r1, [r7, #12]
 800471a:	2084      	movs	r0, #132	; 0x84
 800471c:	4798      	blx	r3

  return IO_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	000301ff 	.word	0x000301ff
 800472c:	20000bf0 	.word	0x20000bf0

08004730 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <BSP_IO_WritePin+0x30>)
 8004744:	4013      	ands	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <BSP_IO_WritePin+0x34>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	68f9      	ldr	r1, [r7, #12]
 8004752:	2084      	movs	r0, #132	; 0x84
 8004754:	4798      	blx	r3

}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	000301ff 	.word	0x000301ff
 8004764:	20000bf0 	.word	0x20000bf0

08004768 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004772:	2003      	movs	r0, #3
 8004774:	f000 f984 	bl	8004a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004778:	2000      	movs	r0, #0
 800477a:	f000 f80d 	bl	8004798 <HAL_InitTick>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	71fb      	strb	r3, [r7, #7]
 8004788:	e001      	b.n	800478e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800478a:	f004 fcab 	bl	80090e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800478e:	79fb      	ldrb	r3, [r7, #7]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80047a4:	4b17      	ldr	r3, [pc, #92]	; (8004804 <HAL_InitTick+0x6c>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d023      	beq.n	80047f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80047ac:	4b16      	ldr	r3, [pc, #88]	; (8004808 <HAL_InitTick+0x70>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4b14      	ldr	r3, [pc, #80]	; (8004804 <HAL_InitTick+0x6c>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	4619      	mov	r1, r3
 80047b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f99f 	bl	8004b06 <HAL_SYSTICK_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b0f      	cmp	r3, #15
 80047d2:	d809      	bhi.n	80047e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047d4:	2200      	movs	r2, #0
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047dc:	f000 f95b 	bl	8004a96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <HAL_InitTick+0x74>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e007      	b.n	80047f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e004      	b.n	80047f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
 80047f2:	e001      	b.n	80047f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200000c4 	.word	0x200000c4
 8004808:	200000c8 	.word	0x200000c8
 800480c:	200000c0 	.word	0x200000c0

08004810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_IncTick+0x20>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_IncTick+0x24>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4413      	add	r3, r2
 8004820:	4a04      	ldr	r2, [pc, #16]	; (8004834 <HAL_IncTick+0x24>)
 8004822:	6013      	str	r3, [r2, #0]
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	200000c4 	.word	0x200000c4
 8004834:	20000cf8 	.word	0x20000cf8

08004838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return uwTick;
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <HAL_GetTick+0x14>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000cf8 	.word	0x20000cf8

08004850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004858:	f7ff ffee 	bl	8004838 <HAL_GetTick>
 800485c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004868:	d005      	beq.n	8004876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_Delay+0x44>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004876:	bf00      	nop
 8004878:	f7ff ffde 	bl	8004838 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	429a      	cmp	r2, r3
 8004886:	d8f7      	bhi.n	8004878 <HAL_Delay+0x28>
  {
  }
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	200000c4 	.word	0x200000c4

08004898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048b4:	4013      	ands	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ca:	4a04      	ldr	r2, [pc, #16]	; (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	60d3      	str	r3, [r2, #12]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <__NVIC_GetPriorityGrouping+0x18>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 0307 	and.w	r3, r3, #7
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db0b      	blt.n	8004926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	4907      	ldr	r1, [pc, #28]	; (8004934 <__NVIC_EnableIRQ+0x38>)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2001      	movs	r0, #1
 800491e:	fa00 f202 	lsl.w	r2, r0, r2
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	e000e100 	.word	0xe000e100

08004938 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	2b00      	cmp	r3, #0
 8004948:	db12      	blt.n	8004970 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	490a      	ldr	r1, [pc, #40]	; (800497c <__NVIC_DisableIRQ+0x44>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2001      	movs	r0, #1
 800495a:	fa00 f202 	lsl.w	r2, r0, r2
 800495e:	3320      	adds	r3, #32
 8004960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004964:	f3bf 8f4f 	dsb	sy
}
 8004968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800496a:	f3bf 8f6f 	isb	sy
}
 800496e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	e000e100 	.word	0xe000e100

08004980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004990:	2b00      	cmp	r3, #0
 8004992:	db0a      	blt.n	80049aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	490c      	ldr	r1, [pc, #48]	; (80049cc <__NVIC_SetPriority+0x4c>)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	0112      	lsls	r2, r2, #4
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	440b      	add	r3, r1
 80049a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049a8:	e00a      	b.n	80049c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4908      	ldr	r1, [pc, #32]	; (80049d0 <__NVIC_SetPriority+0x50>)
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	3b04      	subs	r3, #4
 80049b8:	0112      	lsls	r2, r2, #4
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	440b      	add	r3, r1
 80049be:	761a      	strb	r2, [r3, #24]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	e000e100 	.word	0xe000e100
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f1c3 0307 	rsb	r3, r3, #7
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	bf28      	it	cs
 80049f2:	2304      	movcs	r3, #4
 80049f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d902      	bls.n	8004a04 <NVIC_EncodePriority+0x30>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	3b03      	subs	r3, #3
 8004a02:	e000      	b.n	8004a06 <NVIC_EncodePriority+0x32>
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43da      	mvns	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	401a      	ands	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	43d9      	mvns	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a2c:	4313      	orrs	r3, r2
         );
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3724      	adds	r7, #36	; 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
	...

08004a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a4c:	d301      	bcc.n	8004a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e00f      	b.n	8004a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a52:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <SysTick_Config+0x40>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a5a:	210f      	movs	r1, #15
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a60:	f7ff ff8e 	bl	8004980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <SysTick_Config+0x40>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a6a:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <SysTick_Config+0x40>)
 8004a6c:	2207      	movs	r2, #7
 8004a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	e000e010 	.word	0xe000e010

08004a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff ff05 	bl	8004898 <__NVIC_SetPriorityGrouping>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa8:	f7ff ff1a 	bl	80048e0 <__NVIC_GetPriorityGrouping>
 8004aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	6978      	ldr	r0, [r7, #20]
 8004ab4:	f7ff ff8e 	bl	80049d4 <NVIC_EncodePriority>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ff5d 	bl	8004980 <__NVIC_SetPriority>
}
 8004ac6:	bf00      	nop
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ff0d 	bl	80048fc <__NVIC_EnableIRQ>
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	4603      	mov	r3, r0
 8004af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ff1d 	bl	8004938 <__NVIC_DisableIRQ>
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ff94 	bl	8004a3c <SysTick_Config>
 8004b14:	4603      	mov	r3, r0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e089      	b.n	8004c46 <HAL_DCMI_Init+0x126>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d11a      	bne.n	8004b74 <HAL_DCMI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Init the DCMI Callback settings */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->FrameEventCallback = HAL_DCMI_FrameEventCallback; /* Legacy weak FrameEventCallback  */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a41      	ldr	r2, [pc, #260]	; (8004c50 <HAL_DCMI_Init+0x130>)
 8004b4a:	665a      	str	r2, [r3, #100]	; 0x64
    hdcmi->VsyncEventCallback = HAL_DCMI_VsyncEventCallback; /* Legacy weak VsyncEventCallback  */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a41      	ldr	r2, [pc, #260]	; (8004c54 <HAL_DCMI_Init+0x134>)
 8004b50:	669a      	str	r2, [r3, #104]	; 0x68
    hdcmi->LineEventCallback  = HAL_DCMI_LineEventCallback;  /* Legacy weak LineEventCallback   */
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a40      	ldr	r2, [pc, #256]	; (8004c58 <HAL_DCMI_Init+0x138>)
 8004b56:	66da      	str	r2, [r3, #108]	; 0x6c
    hdcmi->ErrorCallback      = HAL_DCMI_ErrorCallback;      /* Legacy weak ErrorCallback       */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a40      	ldr	r2, [pc, #256]	; (8004c5c <HAL_DCMI_Init+0x13c>)
 8004b5c:	671a      	str	r2, [r3, #112]	; 0x70

    if(hdcmi->MspInitCallback == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_DCMI_Init+0x4c>
    {
      /* Legacy weak MspInit Callback        */
      hdcmi->MspInitCallback = HAL_DCMI_MspInit;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <HAL_DCMI_Init+0x140>)
 8004b6a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4798      	blx	r3
    HAL_DCMI_MspInit(hdcmi);
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b8a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_DCMI_Init+0x7a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6819      	ldr	r1, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <HAL_DCMI_Init+0x144>)
 8004ba6:	400b      	ands	r3, r1
 8004ba8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004bbe:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004bca:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004bd6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004be2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004bee:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d112      	bne.n	8004c26 <HAL_DCMI_Init+0x106>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	7f1b      	ldrb	r3, [r3, #28]
 8004c04:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7f5b      	ldrb	r3, [r3, #29]
 8004c0a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004c0c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7f9b      	ldrb	r3, [r3, #30]
 8004c12:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004c14:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7fdb      	ldrb	r3, [r3, #31]
 8004c1c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004c22:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004c24:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 021f 	orr.w	r2, r2, #31
 8004c34:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	08004f5d 	.word	0x08004f5d
 8004c54:	08004f49 	.word	0x08004f49
 8004c58:	08004f35 	.word	0x08004f35
 8004c5c:	08004f21 	.word	0x08004f21
 8004c60:	08004c69 	.word	0x08004c69
 8004c64:	ffe0f007 	.word	0xffe0f007

08004c68 <HAL_DCMI_MspInit>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_MspInit() callback can be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_DCMI_Start_DMA+0x1c>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e0b8      	b.n	8004e0a <HAL_DCMI_Start_DMA+0x18e>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb2:	f023 0302 	bic.w	r3, r3, #2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	4a52      	ldr	r2, [pc, #328]	; (8004e14 <HAL_DCMI_Start_DMA+0x198>)
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd0:	4a51      	ldr	r2, [pc, #324]	; (8004e18 <HAL_DCMI_Start_DMA+0x19c>)
 8004cd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd8:	2200      	movs	r2, #0
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce2:	d21f      	bcs.n	8004d24 <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3328      	adds	r3, #40	; 0x28
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	f000 fc83 	bl	8005604 <HAL_DMA_Start_IT>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d075      	beq.n	8004df0 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e072      	b.n	8004e0a <HAL_DCMI_Start_DMA+0x18e>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	2220      	movs	r2, #32
 8004d2a:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d30:	4a3a      	ldr	r2, [pc, #232]	; (8004e1c <HAL_DCMI_Start_DMA+0x1a0>)
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 8004d40:	6838      	ldr	r0, [r7, #0]
 8004d42:	f000 fa8b 	bl	800525c <DCMI_TransferSize>
 8004d46:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e053      	b.n	8004e0a <HAL_DCMI_Start_DMA+0x18e>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	005a      	lsls	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	085a      	lsrs	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	6979      	ldr	r1, [r7, #20]
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	441a      	add	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3328      	adds	r3, #40	; 0x28
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f000 fc1d 	bl	8005604 <HAL_DMA_Start_IT>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00f      	beq.n	8004df0 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e00c      	b.n	8004e0a <HAL_DCMI_Start_DMA+0x18e>
  }

//  /* Enable Capture */
//  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	0800505d 	.word	0x0800505d
 8004e18:	0800522b 	.word	0x0800522b
 8004e1c:	08005191 	.word	0x08005191

08004e20 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	f043 0202 	orr.w	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d009      	beq.n	8004e6c <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e64:	f043 0201 	orr.w	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d014      	beq.n	8004e9e <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <HAL_DCMI_IRQHandler+0xfc>)
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fc1b 	bl	80056c4 <HAL_DMA_Abort_IT>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 f9c6 	bl	800522a <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2210      	movs	r2, #16
 8004eae:	615a      	str	r2, [r3, #20]

    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
    HAL_DCMI_LineEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_DCMI_IRQHandler+0xb2>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	615a      	str	r2, [r3, #20]

    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
    HAL_DCMI_VsyncEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01a      	beq.n	8004f12 <HAL_DCMI_IRQHandler+0xf2>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d10b      	bne.n	8004f02 <HAL_DCMI_IRQHandler+0xe2>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 021e 	bic.w	r2, r2, #30
 8004ef8:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	615a      	str	r2, [r3, #20]

    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	0800522b 	.word	0x0800522b

08004f20 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_ErrorCallback() callback can be implemented in the user file.
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_LineEventCallback() callback can be implemented in the user file.
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_VsyncEventCallback() callback can be implemented in the user file.
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_FrameEventCallback() callback can be implemented in the user file.
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_DCMI_RegisterCallback>:
  * @param CallbackID   dcmi Callback ID
  * @param pCallback    pointer to dcmi Callback function
  * @retval status
  */
HAL_StatusTypeDef HAL_DCMI_RegisterCallback(DCMI_HandleTypeDef *hdcmi, HAL_DCMI_CallbackIDTypeDef CallbackID, pDCMI_CallbackTypeDef pCallback)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]

  if(pCallback == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <HAL_DCMI_RegisterCallback+0x2a>
  {
    /* update the error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_INVALID_CALLBACK;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	659a      	str	r2, [r3, #88]	; 0x58
    /* update return status */
    status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
 8004f98:	e058      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>
  }
  else
  {
    if(hdcmi->State == HAL_DCMI_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d12d      	bne.n	8005002 <HAL_DCMI_RegisterCallback+0x92>
    {
      switch (CallbackID)
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d827      	bhi.n	8004ffc <HAL_DCMI_RegisterCallback+0x8c>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_DCMI_RegisterCallback+0x44>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fcd 	.word	0x08004fcd
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	08004fdd 	.word	0x08004fdd
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004ff5 	.word	0x08004ff5
      {
      case HAL_DCMI_FRAME_EVENT_CB_ID :
        hdcmi->FrameEventCallback = pCallback;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004fd2:	e03b      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>

      case HAL_DCMI_VSYNC_EVENT_CB_ID :
        hdcmi->VsyncEventCallback = pCallback;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004fda:	e037      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>

      case HAL_DCMI_LINE_EVENT_CB_ID :
        hdcmi->LineEventCallback = pCallback;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004fe2:	e033      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>

      case HAL_DCMI_ERROR_CB_ID :
        hdcmi->ErrorCallback = pCallback;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004fea:	e02f      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>

      case HAL_DCMI_MSPINIT_CB_ID :
        hdcmi->MspInitCallback = pCallback;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004ff2:	e02b      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>

      case HAL_DCMI_MSPDEINIT_CB_ID :
        hdcmi->MspDeInitCallback = pCallback;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004ffa:	e027      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	75fb      	strb	r3, [r7, #23]
        break;
 8005000:	e024      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>
      }
    }
    else if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d116      	bne.n	800503c <HAL_DCMI_RegisterCallback+0xcc>
    {
      switch (CallbackID)
 800500e:	7afb      	ldrb	r3, [r7, #11]
 8005010:	2b04      	cmp	r3, #4
 8005012:	d002      	beq.n	800501a <HAL_DCMI_RegisterCallback+0xaa>
 8005014:	2b05      	cmp	r3, #5
 8005016:	d004      	beq.n	8005022 <HAL_DCMI_RegisterCallback+0xb2>
 8005018:	e007      	b.n	800502a <HAL_DCMI_RegisterCallback+0xba>
      {
      case HAL_DCMI_MSPINIT_CB_ID :
        hdcmi->MspInitCallback = pCallback;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8005020:	e014      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>

      case HAL_DCMI_MSPDEINIT_CB_ID :
        hdcmi->MspDeInitCallback = pCallback;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005028:	e010      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>

      default :
        /* update the error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_INVALID_CALLBACK;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	659a      	str	r2, [r3, #88]	; 0x58
        /* update return status */
        status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
        break;
 800503a:	e007      	b.n	800504c <HAL_DCMI_RegisterCallback+0xdc>
      }
    }
    else
    {
      /* update the error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_INVALID_CALLBACK;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	659a      	str	r2, [r3, #88]	; 0x58
      /* update return status */
      status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 800504c:	7dfb      	ldrb	r3, [r7, #23]
}
 800504e:	4618      	mov	r0, r3
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop

0800505c <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	2b00      	cmp	r3, #0
 8005070:	d05d      	beq.n	800512e <DCMI_DMAXferCplt+0xd2>
  {
    if (hdcmi->XferCount == 0xBEBE)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800507a:	4293      	cmp	r3, r2
 800507c:	d10c      	bne.n	8005098 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005096:	e077      	b.n	8005188 <DCMI_DMAXferCplt+0x12c>
      hdcmi->XferCount--;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	1e5a      	subs	r2, r3, #1
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4413      	add	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c6:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050de:	1ad2      	subs	r2, r2, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d103      	bne.n	80050f4 <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80050f8:	6979      	ldr	r1, [r7, #20]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f000 fa81 	bl	8005604 <HAL_DMA_Start_IT>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d03f      	beq.n	8005188 <DCMI_DMAXferCplt+0x12c>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hdcmi->ErrorCallback(hdcmi);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	69f8      	ldr	r0, [r7, #28]
 800512a:	4798      	blx	r3
}
 800512c:	e02c      	b.n	8005188 <DCMI_DMAXferCplt+0x12c>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d125      	bne.n	8005188 <DCMI_DMAXferCplt+0x12c>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01e      	beq.n	8005188 <DCMI_DMAXferCplt+0x12c>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2201      	movs	r2, #1
 8005150:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b02      	cmp	r3, #2
 800515e:	d10f      	bne.n	8005180 <DCMI_DMAXferCplt+0x124>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 021e 	bic.w	r2, r2, #30
 800516e:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hdcmi->FrameEventCallback(hdcmi);
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005184:	69f8      	ldr	r0, [r7, #28]
 8005186:	4798      	blx	r3
}
 8005188:	bf00      	nop
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d03d      	beq.n	8005222 <DCMI_DMAHalfXferCplt+0x92>
  {
    if (hdcmi->XferCount != 0xBEBE)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d037      	beq.n	8005222 <DCMI_DMAHalfXferCplt+0x92>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	1e5a      	subs	r2, r3, #1
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c6:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051cc:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	441a      	add	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f000 fa06 	bl	8005604 <HAL_DMA_Start_IT>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d011      	beq.n	8005222 <DCMI_DMAHalfXferCplt+0x92>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	6978      	ldr	r0, [r7, #20]
 8005220:	4798      	blx	r3
        HAL_DCMI_ErrorCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005222:	bf00      	nop
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	4798      	blx	r3
#else
  HAL_DCMI_ErrorCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b096      	sub	sp, #88	; 0x58
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 8005264:	2301      	movs	r3, #1
 8005266:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t temp = InputSize;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t aPrime[NPRIME] = {0};
 800526c:	f107 030c 	add.w	r3, r7, #12
 8005270:	2240      	movs	r2, #64	; 0x40
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f003 ffe3 	bl	8009240 <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 800527a:	2302      	movs	r3, #2
 800527c:	64fb      	str	r3, [r7, #76]	; 0x4c
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 800527e:	e02d      	b.n	80052dc <DCMI_TransferSize+0x80>
  {
    if (temp < PrimeArray[j])
 8005280:	4a3a      	ldr	r2, [pc, #232]	; (800536c <DCMI_TransferSize+0x110>)
 8005282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800528a:	429a      	cmp	r2, r3
 800528c:	d32a      	bcc.n	80052e4 <DCMI_TransferSize+0x88>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 800528e:	e016      	b.n	80052be <DCMI_TransferSize+0x62>
    {
      aPrime[j]++;
 8005290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005298:	4413      	add	r3, r2
 800529a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80052a8:	440b      	add	r3, r1
 80052aa:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 80052ae:	4a2f      	ldr	r2, [pc, #188]	; (800536c <DCMI_TransferSize+0x110>)
 80052b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	653b      	str	r3, [r7, #80]	; 0x50
    while ((temp % PrimeArray[j]) == 0U)
 80052be:	4a2b      	ldr	r2, [pc, #172]	; (800536c <DCMI_TransferSize+0x110>)
 80052c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80052cc:	fb02 f201 	mul.w	r2, r2, r1
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0dc      	beq.n	8005290 <DCMI_TransferSize+0x34>
    }
    j++;
 80052d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d8:	3301      	adds	r3, #1
 80052da:	657b      	str	r3, [r7, #84]	; 0x54
  while (j < NPRIME)
 80052dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d9ce      	bls.n	8005280 <DCMI_TransferSize+0x24>
 80052e2:	e000      	b.n	80052e6 <DCMI_TransferSize+0x8a>
      break;
 80052e4:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count divider 2 twice */
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	613b      	str	r3, [r7, #16]

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 80052ec:	230f      	movs	r3, #15
 80052ee:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 80052f0:	e02f      	b.n	8005352 <DCMI_TransferSize+0xf6>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 80052f2:	4a1e      	ldr	r2, [pc, #120]	; (800536c <DCMI_TransferSize+0x110>)
 80052f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005304:	4293      	cmp	r3, r2
 8005306:	d820      	bhi.n	800534a <DCMI_TransferSize+0xee>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <DCMI_TransferSize+0x110>)
 800530a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800530c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	64fb      	str	r3, [r7, #76]	; 0x4c
        aPrime[j]--;
 8005318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005320:	4413      	add	r3, r2
 8005322:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005326:	1e5a      	subs	r2, r3, #1
 8005328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005330:	440b      	add	r3, r1
 8005332:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 8005336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800533e:	4413      	add	r3, r2
 8005340:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1d4      	bne.n	80052f2 <DCMI_TransferSize+0x96>
 8005348:	e000      	b.n	800534c <DCMI_TransferSize+0xf0>
        break;
 800534a:	bf00      	nop
      }
    }
    j--;
 800534c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534e:	3b01      	subs	r3, #1
 8005350:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8005352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <DCMI_TransferSize+0x106>
 8005358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800535e:	4293      	cmp	r3, r2
 8005360:	d9e9      	bls.n	8005336 <DCMI_TransferSize+0xda>
  }



  return output;
 8005362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005364:	4618      	mov	r0, r3
 8005366:	3758      	adds	r7, #88	; 0x58
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	08009834 	.word	0x08009834

08005370 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e098      	b.n	80054b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <HAL_DMA_Init+0x150>)
 800538a:	429a      	cmp	r2, r3
 800538c:	d80f      	bhi.n	80053ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	4b4b      	ldr	r3, [pc, #300]	; (80054c4 <HAL_DMA_Init+0x154>)
 8005396:	4413      	add	r3, r2
 8005398:	4a4b      	ldr	r2, [pc, #300]	; (80054c8 <HAL_DMA_Init+0x158>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	009a      	lsls	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a48      	ldr	r2, [pc, #288]	; (80054cc <HAL_DMA_Init+0x15c>)
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
 80053ac:	e00e      	b.n	80053cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	4b46      	ldr	r3, [pc, #280]	; (80054d0 <HAL_DMA_Init+0x160>)
 80053b6:	4413      	add	r3, r2
 80053b8:	4a43      	ldr	r2, [pc, #268]	; (80054c8 <HAL_DMA_Init+0x158>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	009a      	lsls	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a42      	ldr	r2, [pc, #264]	; (80054d4 <HAL_DMA_Init+0x164>)
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005426:	d039      	beq.n	800549c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	4a27      	ldr	r2, [pc, #156]	; (80054cc <HAL_DMA_Init+0x15c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d11a      	bne.n	8005468 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005432:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <HAL_DMA_Init+0x168>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	f003 031c 	and.w	r3, r3, #28
 800543e:	210f      	movs	r1, #15
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	4924      	ldr	r1, [pc, #144]	; (80054d8 <HAL_DMA_Init+0x168>)
 8005448:	4013      	ands	r3, r2
 800544a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800544c:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <HAL_DMA_Init+0x168>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	f003 031c 	and.w	r3, r3, #28
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	491d      	ldr	r1, [pc, #116]	; (80054d8 <HAL_DMA_Init+0x168>)
 8005462:	4313      	orrs	r3, r2
 8005464:	600b      	str	r3, [r1, #0]
 8005466:	e019      	b.n	800549c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005468:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <HAL_DMA_Init+0x16c>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005470:	f003 031c 	and.w	r3, r3, #28
 8005474:	210f      	movs	r1, #15
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	4917      	ldr	r1, [pc, #92]	; (80054dc <HAL_DMA_Init+0x16c>)
 800547e:	4013      	ands	r3, r2
 8005480:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <HAL_DMA_Init+0x16c>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	f003 031c 	and.w	r3, r3, #28
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	4911      	ldr	r1, [pc, #68]	; (80054dc <HAL_DMA_Init+0x16c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	40020407 	.word	0x40020407
 80054c4:	bffdfff8 	.word	0xbffdfff8
 80054c8:	cccccccd 	.word	0xcccccccd
 80054cc:	40020000 	.word	0x40020000
 80054d0:	bffdfbf8 	.word	0xbffdfbf8
 80054d4:	40020400 	.word	0x40020400
 80054d8:	400200a8 	.word	0x400200a8
 80054dc:	400204a8 	.word	0x400204a8

080054e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e072      	b.n	80055d8 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_DMA_DeInit+0x104>)
 800550a:	429a      	cmp	r2, r3
 800550c:	d80f      	bhi.n	800552e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	4b34      	ldr	r3, [pc, #208]	; (80055e8 <HAL_DMA_DeInit+0x108>)
 8005516:	4413      	add	r3, r2
 8005518:	4a34      	ldr	r2, [pc, #208]	; (80055ec <HAL_DMA_DeInit+0x10c>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	009a      	lsls	r2, r3, #2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a31      	ldr	r2, [pc, #196]	; (80055f0 <HAL_DMA_DeInit+0x110>)
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
 800552c:	e00e      	b.n	800554c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	4b2f      	ldr	r3, [pc, #188]	; (80055f4 <HAL_DMA_DeInit+0x114>)
 8005536:	4413      	add	r3, r2
 8005538:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <HAL_DMA_DeInit+0x10c>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	009a      	lsls	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2b      	ldr	r2, [pc, #172]	; (80055f8 <HAL_DMA_DeInit+0x118>)
 800554a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005558:	f003 021c 	and.w	r2, r3, #28
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2101      	movs	r1, #1
 8005562:	fa01 f202 	lsl.w	r2, r1, r2
 8005566:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	4a20      	ldr	r2, [pc, #128]	; (80055f0 <HAL_DMA_DeInit+0x110>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10d      	bne.n	800558e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005572:	4b22      	ldr	r3, [pc, #136]	; (80055fc <HAL_DMA_DeInit+0x11c>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	f003 031c 	and.w	r3, r3, #28
 800557e:	210f      	movs	r1, #15
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	491d      	ldr	r1, [pc, #116]	; (80055fc <HAL_DMA_DeInit+0x11c>)
 8005588:	4013      	ands	r3, r2
 800558a:	600b      	str	r3, [r1, #0]
 800558c:	e00c      	b.n	80055a8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800558e:	4b1c      	ldr	r3, [pc, #112]	; (8005600 <HAL_DMA_DeInit+0x120>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	f003 031c 	and.w	r3, r3, #28
 800559a:	210f      	movs	r1, #15
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	4917      	ldr	r1, [pc, #92]	; (8005600 <HAL_DMA_DeInit+0x120>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40020407 	.word	0x40020407
 80055e8:	bffdfff8 	.word	0xbffdfff8
 80055ec:	cccccccd 	.word	0xcccccccd
 80055f0:	40020000 	.word	0x40020000
 80055f4:	bffdfbf8 	.word	0xbffdfbf8
 80055f8:	40020400 	.word	0x40020400
 80055fc:	400200a8 	.word	0x400200a8
 8005600:	400204a8 	.word	0x400204a8

08005604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_DMA_Start_IT+0x20>
 8005620:	2302      	movs	r3, #2
 8005622:	e04b      	b.n	80056bc <HAL_DMA_Start_IT+0xb8>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	d13a      	bne.n	80056ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0201 	bic.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f872 	bl	8005746 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 020e 	orr.w	r2, r2, #14
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e00f      	b.n	800569c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0204 	bic.w	r2, r2, #4
 800568a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 020a 	orr.w	r2, r2, #10
 800569a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e005      	b.n	80056ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
 80056b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d005      	beq.n	80056e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2204      	movs	r2, #4
 80056e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
 80056e6:	e029      	b.n	800573c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 020e 	bic.w	r2, r2, #14
 80056f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570c:	f003 021c 	and.w	r2, r3, #28
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f202 	lsl.w	r2, r1, r2
 800571a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
    }
  }
  return status;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	f003 021c 	and.w	r2, r3, #28
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2101      	movs	r1, #1
 8005762:	fa01 f202 	lsl.w	r2, r1, r2
 8005766:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b10      	cmp	r3, #16
 8005776:	d108      	bne.n	800578a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005788:	e007      	b.n	800579a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	60da      	str	r2, [r3, #12]
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e04b      	b.n	8005850 <HAL_DMA2D_Init+0xaa>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f843 	bl	8005858 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
#if defined(DMA2D_LINE_OFFSET_MODE_SUPPORT)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
#else
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
  /* DMA2D OPFCCR register configuration ---------------------------------------*/
#if defined(DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
#else
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	f023 0107 	bic.w	r1, r3, #7
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT */

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68d1      	ldr	r1, [r2, #12]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	430b      	orrs	r3, r1
 800581e:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	051a      	lsls	r2, r3, #20
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	055b      	lsls	r3, r3, #21
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_DMA2D_ConfigLayer+0x20>
 8005888:	2302      	movs	r3, #2
 800588a:	e084      	b.n	8005996 <HAL_DMA2D_ConfigLayer+0x12a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	3320      	adds	r3, #32
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80058c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80058cc:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <HAL_DMA2D_ConfigLayer+0x138>)
 80058ce:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b0a      	cmp	r3, #10
 80058d6:	d003      	beq.n	80058e0 <HAL_DMA2D_ConfigLayer+0x74>
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d107      	bne.n	80058f0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	e005      	b.n	80058fc <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d120      	bne.n	8005944 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	43db      	mvns	r3, r3
 800590c:	ea02 0103 	and.w	r1, r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	430a      	orrs	r2, r1
 8005918:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b0a      	cmp	r3, #10
 800592a:	d003      	beq.n	8005934 <HAL_DMA2D_ConfigLayer+0xc8>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b09      	cmp	r3, #9
 8005932:	d127      	bne.n	8005984 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005940:	629a      	str	r2, [r3, #40]	; 0x28
 8005942:	e01f      	b.n	8005984 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69da      	ldr	r2, [r3, #28]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	43db      	mvns	r3, r3
 800594e:	ea02 0103 	and.w	r1, r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	430a      	orrs	r2, r1
 800595a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b0a      	cmp	r3, #10
 800596c:	d003      	beq.n	8005976 <HAL_DMA2D_ConfigLayer+0x10a>
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b09      	cmp	r3, #9
 8005974:	d106      	bne.n	8005984 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005982:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	ff33000f 	.word	0xff33000f

080059a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059b6:	e166      	b.n	8005c86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	2101      	movs	r1, #1
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	4013      	ands	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8158 	beq.w	8005c80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d005      	beq.n	80059e8 <HAL_GPIO_Init+0x40>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d130      	bne.n	8005a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	2203      	movs	r2, #3
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4013      	ands	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a1e:	2201      	movs	r2, #1
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 0201 	and.w	r2, r3, #1
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d017      	beq.n	8005a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	2203      	movs	r2, #3
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d123      	bne.n	8005ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	08da      	lsrs	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3208      	adds	r2, #8
 8005a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	220f      	movs	r2, #15
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	08da      	lsrs	r2, r3, #3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3208      	adds	r2, #8
 8005ad4:	6939      	ldr	r1, [r7, #16]
 8005ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4013      	ands	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0203 	and.w	r2, r3, #3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80b2 	beq.w	8005c80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1c:	4b61      	ldr	r3, [pc, #388]	; (8005ca4 <HAL_GPIO_Init+0x2fc>)
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b20:	4a60      	ldr	r2, [pc, #384]	; (8005ca4 <HAL_GPIO_Init+0x2fc>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	6613      	str	r3, [r2, #96]	; 0x60
 8005b28:	4b5e      	ldr	r3, [pc, #376]	; (8005ca4 <HAL_GPIO_Init+0x2fc>)
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005b34:	4a5c      	ldr	r2, [pc, #368]	; (8005ca8 <HAL_GPIO_Init+0x300>)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	089b      	lsrs	r3, r3, #2
 8005b3a:	3302      	adds	r3, #2
 8005b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	220f      	movs	r2, #15
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	43db      	mvns	r3, r3
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4013      	ands	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b5e:	d02b      	beq.n	8005bb8 <HAL_GPIO_Init+0x210>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a52      	ldr	r2, [pc, #328]	; (8005cac <HAL_GPIO_Init+0x304>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d025      	beq.n	8005bb4 <HAL_GPIO_Init+0x20c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a51      	ldr	r2, [pc, #324]	; (8005cb0 <HAL_GPIO_Init+0x308>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d01f      	beq.n	8005bb0 <HAL_GPIO_Init+0x208>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a50      	ldr	r2, [pc, #320]	; (8005cb4 <HAL_GPIO_Init+0x30c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d019      	beq.n	8005bac <HAL_GPIO_Init+0x204>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a4f      	ldr	r2, [pc, #316]	; (8005cb8 <HAL_GPIO_Init+0x310>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d013      	beq.n	8005ba8 <HAL_GPIO_Init+0x200>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a4e      	ldr	r2, [pc, #312]	; (8005cbc <HAL_GPIO_Init+0x314>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00d      	beq.n	8005ba4 <HAL_GPIO_Init+0x1fc>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a4d      	ldr	r2, [pc, #308]	; (8005cc0 <HAL_GPIO_Init+0x318>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <HAL_GPIO_Init+0x1f8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a4c      	ldr	r2, [pc, #304]	; (8005cc4 <HAL_GPIO_Init+0x31c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <HAL_GPIO_Init+0x1f4>
 8005b98:	2307      	movs	r3, #7
 8005b9a:	e00e      	b.n	8005bba <HAL_GPIO_Init+0x212>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	e00c      	b.n	8005bba <HAL_GPIO_Init+0x212>
 8005ba0:	2306      	movs	r3, #6
 8005ba2:	e00a      	b.n	8005bba <HAL_GPIO_Init+0x212>
 8005ba4:	2305      	movs	r3, #5
 8005ba6:	e008      	b.n	8005bba <HAL_GPIO_Init+0x212>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	e006      	b.n	8005bba <HAL_GPIO_Init+0x212>
 8005bac:	2303      	movs	r3, #3
 8005bae:	e004      	b.n	8005bba <HAL_GPIO_Init+0x212>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e002      	b.n	8005bba <HAL_GPIO_Init+0x212>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_GPIO_Init+0x212>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	f002 0203 	and.w	r2, r2, #3
 8005bc0:	0092      	lsls	r2, r2, #2
 8005bc2:	4093      	lsls	r3, r2
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005bca:	4937      	ldr	r1, [pc, #220]	; (8005ca8 <HAL_GPIO_Init+0x300>)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bd8:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4013      	ands	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bfc:	4a32      	ldr	r2, [pc, #200]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c02:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c26:	4a28      	ldr	r2, [pc, #160]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c2c:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	43db      	mvns	r3, r3
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c50:	4a1d      	ldr	r2, [pc, #116]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005c56:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4013      	ands	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c7a:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	3301      	adds	r3, #1
 8005c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f47f ae91 	bne.w	80059b8 <HAL_GPIO_Init+0x10>
  }
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	48000400 	.word	0x48000400
 8005cb0:	48000800 	.word	0x48000800
 8005cb4:	48000c00 	.word	0x48000c00
 8005cb8:	48001000 	.word	0x48001000
 8005cbc:	48001400 	.word	0x48001400
 8005cc0:	48001800 	.word	0x48001800
 8005cc4:	48001c00 	.word	0x48001c00
 8005cc8:	40010400 	.word	0x40010400

08005ccc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005cda:	e0c9      	b.n	8005e70 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005cdc:	2201      	movs	r2, #1
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80bc 	beq.w	8005e6a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005cf2:	4a66      	ldr	r2, [pc, #408]	; (8005e8c <HAL_GPIO_DeInit+0x1c0>)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	089b      	lsrs	r3, r3, #2
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	220f      	movs	r2, #15
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d1a:	d02b      	beq.n	8005d74 <HAL_GPIO_DeInit+0xa8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a5c      	ldr	r2, [pc, #368]	; (8005e90 <HAL_GPIO_DeInit+0x1c4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d025      	beq.n	8005d70 <HAL_GPIO_DeInit+0xa4>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a5b      	ldr	r2, [pc, #364]	; (8005e94 <HAL_GPIO_DeInit+0x1c8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d01f      	beq.n	8005d6c <HAL_GPIO_DeInit+0xa0>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a5a      	ldr	r2, [pc, #360]	; (8005e98 <HAL_GPIO_DeInit+0x1cc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d019      	beq.n	8005d68 <HAL_GPIO_DeInit+0x9c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a59      	ldr	r2, [pc, #356]	; (8005e9c <HAL_GPIO_DeInit+0x1d0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d013      	beq.n	8005d64 <HAL_GPIO_DeInit+0x98>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <HAL_GPIO_DeInit+0x1d4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00d      	beq.n	8005d60 <HAL_GPIO_DeInit+0x94>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <HAL_GPIO_DeInit+0x1d8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d007      	beq.n	8005d5c <HAL_GPIO_DeInit+0x90>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a56      	ldr	r2, [pc, #344]	; (8005ea8 <HAL_GPIO_DeInit+0x1dc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_GPIO_DeInit+0x8c>
 8005d54:	2307      	movs	r3, #7
 8005d56:	e00e      	b.n	8005d76 <HAL_GPIO_DeInit+0xaa>
 8005d58:	2308      	movs	r3, #8
 8005d5a:	e00c      	b.n	8005d76 <HAL_GPIO_DeInit+0xaa>
 8005d5c:	2306      	movs	r3, #6
 8005d5e:	e00a      	b.n	8005d76 <HAL_GPIO_DeInit+0xaa>
 8005d60:	2305      	movs	r3, #5
 8005d62:	e008      	b.n	8005d76 <HAL_GPIO_DeInit+0xaa>
 8005d64:	2304      	movs	r3, #4
 8005d66:	e006      	b.n	8005d76 <HAL_GPIO_DeInit+0xaa>
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e004      	b.n	8005d76 <HAL_GPIO_DeInit+0xaa>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e002      	b.n	8005d76 <HAL_GPIO_DeInit+0xaa>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_GPIO_DeInit+0xaa>
 8005d74:	2300      	movs	r3, #0
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	f002 0203 	and.w	r2, r2, #3
 8005d7c:	0092      	lsls	r2, r2, #2
 8005d7e:	4093      	lsls	r3, r2
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d132      	bne.n	8005dec <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005d86:	4b49      	ldr	r3, [pc, #292]	; (8005eac <HAL_GPIO_DeInit+0x1e0>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	4947      	ldr	r1, [pc, #284]	; (8005eac <HAL_GPIO_DeInit+0x1e0>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005d94:	4b45      	ldr	r3, [pc, #276]	; (8005eac <HAL_GPIO_DeInit+0x1e0>)
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	4943      	ldr	r1, [pc, #268]	; (8005eac <HAL_GPIO_DeInit+0x1e0>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005da2:	4b42      	ldr	r3, [pc, #264]	; (8005eac <HAL_GPIO_DeInit+0x1e0>)
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	4940      	ldr	r1, [pc, #256]	; (8005eac <HAL_GPIO_DeInit+0x1e0>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005db0:	4b3e      	ldr	r3, [pc, #248]	; (8005eac <HAL_GPIO_DeInit+0x1e0>)
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	43db      	mvns	r3, r3
 8005db8:	493c      	ldr	r1, [pc, #240]	; (8005eac <HAL_GPIO_DeInit+0x1e0>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	220f      	movs	r2, #15
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005dce:	4a2f      	ldr	r2, [pc, #188]	; (8005e8c <HAL_GPIO_DeInit+0x1c0>)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	089b      	lsrs	r3, r3, #2
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	43da      	mvns	r2, r3
 8005dde:	482b      	ldr	r0, [pc, #172]	; (8005e8c <HAL_GPIO_DeInit+0x1c0>)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	089b      	lsrs	r3, r3, #2
 8005de4:	400a      	ands	r2, r1
 8005de6:	3302      	adds	r3, #2
 8005de8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	2103      	movs	r1, #3
 8005df6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	08da      	lsrs	r2, r3, #3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3208      	adds	r2, #8
 8005e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	220f      	movs	r2, #15
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	08d2      	lsrs	r2, r2, #3
 8005e20:	4019      	ands	r1, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3208      	adds	r2, #8
 8005e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	2103      	movs	r1, #3
 8005e34:	fa01 f303 	lsl.w	r3, r1, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	2101      	movs	r1, #1
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	401a      	ands	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	2103      	movs	r1, #3
 8005e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e62:	43db      	mvns	r3, r3
 8005e64:	401a      	ands	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	fa22 f303 	lsr.w	r3, r2, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f47f af2f 	bne.w	8005cdc <HAL_GPIO_DeInit+0x10>
  }
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	48000400 	.word	0x48000400
 8005e94:	48000800 	.word	0x48000800
 8005e98:	48000c00 	.word	0x48000c00
 8005e9c:	48001000 	.word	0x48001000
 8005ea0:	48001400 	.word	0x48001400
 8005ea4:	48001800 	.word	0x48001800
 8005ea8:	48001c00 	.word	0x48001c00
 8005eac:	40010400 	.word	0x40010400

08005eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ec0:	787b      	ldrb	r3, [r7, #1]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ecc:	e002      	b.n	8005ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ece:	887a      	ldrh	r2, [r7, #2]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e081      	b.n	8005ff6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f8a8 	bl	800605c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2224      	movs	r2, #36	; 0x24
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0201 	bic.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d107      	bne.n	8005f5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f56:	609a      	str	r2, [r3, #8]
 8005f58:	e006      	b.n	8005f68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d104      	bne.n	8005f7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69d9      	ldr	r1, [r3, #28]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1a      	ldr	r2, [r3, #32]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e021      	b.n	8006054 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2224      	movs	r2, #36	; 0x24
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f821 	bl	8006070 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	461a      	mov	r2, r3
 8006092:	4603      	mov	r3, r0
 8006094:	817b      	strh	r3, [r7, #10]
 8006096:	460b      	mov	r3, r1
 8006098:	813b      	strh	r3, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	f040 80f9 	bne.w	800629e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_I2C_Mem_Write+0x34>
 80060b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0ed      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_I2C_Mem_Write+0x4e>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0e6      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060da:	f7fe fbad 	bl	8004838 <HAL_GetTick>
 80060de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2319      	movs	r3, #25
 80060e6:	2201      	movs	r2, #1
 80060e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fbe5 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0d1      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2221      	movs	r2, #33	; 0x21
 8006100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2240      	movs	r2, #64	; 0x40
 8006108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800611c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006124:	88f8      	ldrh	r0, [r7, #6]
 8006126:	893a      	ldrh	r2, [r7, #8]
 8006128:	8979      	ldrh	r1, [r7, #10]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	4603      	mov	r3, r0
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 faf5 	bl	8006724 <I2C_RequestMemoryWrite>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0a9      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	2bff      	cmp	r3, #255	; 0xff
 8006154:	d90e      	bls.n	8006174 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	b2da      	uxtb	r2, r3
 8006162:	8979      	ldrh	r1, [r7, #10]
 8006164:	2300      	movs	r3, #0
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fd4d 	bl	8006c0c <I2C_TransferConfig>
 8006172:	e00f      	b.n	8006194 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	b2da      	uxtb	r2, r3
 8006184:	8979      	ldrh	r1, [r7, #10]
 8006186:	2300      	movs	r3, #0
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fd3c 	bl	8006c0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 fbcf 	bl	800693c <I2C_WaitOnTXISFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e07b      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d034      	beq.n	800624c <HAL_I2C_Mem_Write+0x1c8>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d130      	bne.n	800624c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2200      	movs	r2, #0
 80061f2:	2180      	movs	r1, #128	; 0x80
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fb61 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e04d      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2bff      	cmp	r3, #255	; 0xff
 800620c:	d90e      	bls.n	800622c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	b2da      	uxtb	r2, r3
 800621a:	8979      	ldrh	r1, [r7, #10]
 800621c:	2300      	movs	r3, #0
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fcf1 	bl	8006c0c <I2C_TransferConfig>
 800622a:	e00f      	b.n	800624c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623a:	b2da      	uxtb	r2, r3
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	2300      	movs	r3, #0
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fce0 	bl	8006c0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d19e      	bne.n	8006194 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fbae 	bl	80069bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e01a      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2220      	movs	r2, #32
 8006270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <HAL_I2C_Mem_Write+0x224>)
 800627e:	400b      	ands	r3, r1
 8006280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e000      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800629e:	2302      	movs	r3, #2
  }
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	fe00e800 	.word	0xfe00e800

080062ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	4608      	mov	r0, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	817b      	strh	r3, [r7, #10]
 80062be:	460b      	mov	r3, r1
 80062c0:	813b      	strh	r3, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	f040 80fd 	bne.w	80064ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_I2C_Mem_Read+0x34>
 80062da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d105      	bne.n	80062ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0f1      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_I2C_Mem_Read+0x4e>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e0ea      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006302:	f7fe fa99 	bl	8004838 <HAL_GetTick>
 8006306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2319      	movs	r3, #25
 800630e:	2201      	movs	r2, #1
 8006310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fad1 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0d5      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2222      	movs	r2, #34	; 0x22
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2240      	movs	r2, #64	; 0x40
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800634c:	88f8      	ldrh	r0, [r7, #6]
 800634e:	893a      	ldrh	r2, [r7, #8]
 8006350:	8979      	ldrh	r1, [r7, #10]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4603      	mov	r3, r0
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fa35 	bl	80067cc <I2C_RequestMemoryRead>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0ad      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	2bff      	cmp	r3, #255	; 0xff
 800637c:	d90e      	bls.n	800639c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	22ff      	movs	r2, #255	; 0xff
 8006382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006388:	b2da      	uxtb	r2, r3
 800638a:	8979      	ldrh	r1, [r7, #10]
 800638c:	4b52      	ldr	r3, [pc, #328]	; (80064d8 <HAL_I2C_Mem_Read+0x22c>)
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fc39 	bl	8006c0c <I2C_TransferConfig>
 800639a:	e00f      	b.n	80063bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	8979      	ldrh	r1, [r7, #10]
 80063ae:	4b4a      	ldr	r3, [pc, #296]	; (80064d8 <HAL_I2C_Mem_Read+0x22c>)
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fc28 	bl	8006c0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	2200      	movs	r2, #0
 80063c4:	2104      	movs	r1, #4
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fa78 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e07c      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d034      	beq.n	800647c <HAL_I2C_Mem_Read+0x1d0>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d130      	bne.n	800647c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	2200      	movs	r2, #0
 8006422:	2180      	movs	r1, #128	; 0x80
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fa49 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e04d      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2bff      	cmp	r3, #255	; 0xff
 800643c:	d90e      	bls.n	800645c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	22ff      	movs	r2, #255	; 0xff
 8006442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006448:	b2da      	uxtb	r2, r3
 800644a:	8979      	ldrh	r1, [r7, #10]
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fbd9 	bl	8006c0c <I2C_TransferConfig>
 800645a:	e00f      	b.n	800647c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	b2da      	uxtb	r2, r3
 800646c:	8979      	ldrh	r1, [r7, #10]
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fbc8 	bl	8006c0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d19a      	bne.n	80063bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fa96 	bl	80069bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e01a      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2220      	movs	r2, #32
 80064a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6859      	ldr	r1, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <HAL_I2C_Mem_Read+0x230>)
 80064ae:	400b      	ands	r3, r1
 80064b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e000      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
  }
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	80002400 	.word	0x80002400
 80064dc:	fe00e800 	.word	0xfe00e800

080064e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	460b      	mov	r3, r1
 80064ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	f040 80f1 	bne.w	80066e4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006510:	d101      	bne.n	8006516 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006512:	2302      	movs	r3, #2
 8006514:	e0e7      	b.n	80066e6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_I2C_IsDeviceReady+0x44>
 8006520:	2302      	movs	r3, #2
 8006522:	e0e0      	b.n	80066e6 <HAL_I2C_IsDeviceReady+0x206>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2224      	movs	r2, #36	; 0x24
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d107      	bne.n	8006552 <HAL_I2C_IsDeviceReady+0x72>
 8006542:	897b      	ldrh	r3, [r7, #10]
 8006544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800654c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006550:	e004      	b.n	800655c <HAL_I2C_IsDeviceReady+0x7c>
 8006552:	897b      	ldrh	r3, [r7, #10]
 8006554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006558:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006562:	f7fe f969 	bl	8004838 <HAL_GetTick>
 8006566:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b20      	cmp	r3, #32
 8006574:	bf0c      	ite	eq
 8006576:	2301      	moveq	r3, #1
 8006578:	2300      	movne	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b10      	cmp	r3, #16
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006594:	e034      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800659c:	d01a      	beq.n	80065d4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800659e:	f7fe f94b 	bl	8004838 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d302      	bcc.n	80065b4 <HAL_I2C_IsDeviceReady+0xd4>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10f      	bne.n	80065d4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c0:	f043 0220 	orr.w	r2, r3, #32
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e088      	b.n	80066e6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b20      	cmp	r3, #32
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006600:	7ffb      	ldrb	r3, [r7, #31]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_I2C_IsDeviceReady+0x12c>
 8006606:	7fbb      	ldrb	r3, [r7, #30]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0c4      	beq.n	8006596 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b10      	cmp	r3, #16
 8006618:	d01a      	beq.n	8006650 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2200      	movs	r2, #0
 8006622:	2120      	movs	r1, #32
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f949 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e058      	b.n	80066e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2220      	movs	r2, #32
 800663a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	e04a      	b.n	80066e6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	2120      	movs	r1, #32
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f92e 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e03d      	b.n	80066e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2210      	movs	r2, #16
 8006670:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2220      	movs	r2, #32
 8006678:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d118      	bne.n	80066b4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006690:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	2120      	movs	r1, #32
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f90d 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e01c      	b.n	80066e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2220      	movs	r2, #32
 80066b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3301      	adds	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	429a      	cmp	r2, r3
 80066c0:	f63f af3b 	bhi.w	800653a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	f043 0220 	orr.w	r2, r3, #32
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80066e4:	2302      	movs	r3, #2
  }
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066fc:	b2db      	uxtb	r3, r3
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4603      	mov	r3, r0
 8006734:	817b      	strh	r3, [r7, #10]
 8006736:	460b      	mov	r3, r1
 8006738:	813b      	strh	r3, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	8979      	ldrh	r1, [r7, #10]
 8006744:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <I2C_RequestMemoryWrite+0xa4>)
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fa5d 	bl	8006c0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	69b9      	ldr	r1, [r7, #24]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f8f0 	bl	800693c <I2C_WaitOnTXISFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e02c      	b.n	80067c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d105      	bne.n	8006778 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800676c:	893b      	ldrh	r3, [r7, #8]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	629a      	str	r2, [r3, #40]	; 0x28
 8006776:	e015      	b.n	80067a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006778:	893b      	ldrh	r3, [r7, #8]
 800677a:	0a1b      	lsrs	r3, r3, #8
 800677c:	b29b      	uxth	r3, r3
 800677e:	b2da      	uxtb	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	69b9      	ldr	r1, [r7, #24]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 f8d6 	bl	800693c <I2C_WaitOnTXISFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e012      	b.n	80067c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800679a:	893b      	ldrh	r3, [r7, #8]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2200      	movs	r2, #0
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f884 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	80002000 	.word	0x80002000

080067cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	4608      	mov	r0, r1
 80067d6:	4611      	mov	r1, r2
 80067d8:	461a      	mov	r2, r3
 80067da:	4603      	mov	r3, r0
 80067dc:	817b      	strh	r3, [r7, #10]
 80067de:	460b      	mov	r3, r1
 80067e0:	813b      	strh	r3, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	8979      	ldrh	r1, [r7, #10]
 80067ec:	4b20      	ldr	r3, [pc, #128]	; (8006870 <I2C_RequestMemoryRead+0xa4>)
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2300      	movs	r3, #0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 fa0a 	bl	8006c0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	69b9      	ldr	r1, [r7, #24]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f89d 	bl	800693c <I2C_WaitOnTXISFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e02c      	b.n	8006866 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d105      	bne.n	800681e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006812:	893b      	ldrh	r3, [r7, #8]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	629a      	str	r2, [r3, #40]	; 0x28
 800681c:	e015      	b.n	800684a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800681e:	893b      	ldrh	r3, [r7, #8]
 8006820:	0a1b      	lsrs	r3, r3, #8
 8006822:	b29b      	uxth	r3, r3
 8006824:	b2da      	uxtb	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800682c:	69fa      	ldr	r2, [r7, #28]
 800682e:	69b9      	ldr	r1, [r7, #24]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 f883 	bl	800693c <I2C_WaitOnTXISFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e012      	b.n	8006866 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006840:	893b      	ldrh	r3, [r7, #8]
 8006842:	b2da      	uxtb	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2200      	movs	r2, #0
 8006852:	2140      	movs	r1, #64	; 0x40
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f831 	bl	80068bc <I2C_WaitOnFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e000      	b.n	8006866 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	80002000 	.word	0x80002000

08006874 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d103      	bne.n	8006892 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b01      	cmp	r3, #1
 800689e:	d007      	beq.n	80068b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	619a      	str	r2, [r3, #24]
  }
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	4613      	mov	r3, r2
 80068ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068cc:	e022      	b.n	8006914 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d4:	d01e      	beq.n	8006914 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d6:	f7fd ffaf 	bl	8004838 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d113      	bne.n	8006914 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e00f      	b.n	8006934 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4013      	ands	r3, r2
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	461a      	mov	r2, r3
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	429a      	cmp	r2, r3
 8006930:	d0cd      	beq.n	80068ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006948:	e02c      	b.n	80069a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f870 	bl	8006a34 <I2C_IsErrorOccurred>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e02a      	b.n	80069b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006964:	d01e      	beq.n	80069a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006966:	f7fd ff67 	bl	8004838 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d113      	bne.n	80069a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006980:	f043 0220 	orr.w	r2, r3, #32
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e007      	b.n	80069b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d1cb      	bne.n	800694a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069c8:	e028      	b.n	8006a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f830 	bl	8006a34 <I2C_IsErrorOccurred>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e026      	b.n	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069de:	f7fd ff2b 	bl	8004838 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d113      	bne.n	8006a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f8:	f043 0220 	orr.w	r2, r3, #32
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e007      	b.n	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d1cf      	bne.n	80069ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d075      	beq.n	8006b4c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2210      	movs	r2, #16
 8006a66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a68:	e056      	b.n	8006b18 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a70:	d052      	beq.n	8006b18 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a72:	f7fd fee1 	bl	8004838 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <I2C_IsErrorOccurred+0x54>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d147      	bne.n	8006b18 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aaa:	d12e      	bne.n	8006b0a <I2C_IsErrorOccurred+0xd6>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ab2:	d02a      	beq.n	8006b0a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006ab4:	7cfb      	ldrb	r3, [r7, #19]
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d027      	beq.n	8006b0a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ac8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006aca:	f7fd feb5 	bl	8004838 <HAL_GetTick>
 8006ace:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ad0:	e01b      	b.n	8006b0a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ad2:	f7fd feb1 	bl	8004838 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b19      	cmp	r3, #25
 8006ade:	d914      	bls.n	8006b0a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae4:	f043 0220 	orr.w	r2, r3, #32
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d1dc      	bne.n	8006ad2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d003      	beq.n	8006b2e <I2C_IsErrorOccurred+0xfa>
 8006b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d09d      	beq.n	8006a6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d103      	bne.n	8006b3e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	f043 0304 	orr.w	r3, r3, #4
 8006b44:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	f043 0308 	orr.w	r3, r3, #8
 8006b86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f043 0302 	orr.w	r3, r3, #2
 8006ba8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01c      	beq.n	8006bfc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff fe56 	bl	8006874 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6859      	ldr	r1, [r3, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <I2C_IsErrorOccurred+0x1d4>)
 8006bd4:	400b      	ands	r3, r1
 8006bd6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3728      	adds	r7, #40	; 0x28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	fe00e800 	.word	0xfe00e800

08006c0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	817b      	strh	r3, [r7, #10]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c24:	7a7b      	ldrb	r3, [r7, #9]
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	0d5b      	lsrs	r3, r3, #21
 8006c46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c4a:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <I2C_TransferConfig+0x60>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	ea02 0103 	and.w	r1, r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	03ff63ff 	.word	0x03ff63ff

08006c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d138      	bne.n	8006cf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e032      	b.n	8006cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2224      	movs	r2, #36	; 0x24
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d139      	bne.n	8006d90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e033      	b.n	8006d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2224      	movs	r2, #36	; 0x24
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0201 	bic.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e000      	b.n	8006d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006da4:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40007000 	.word	0x40007000

08006dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dca:	d130      	bne.n	8006e2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dcc:	4b23      	ldr	r3, [pc, #140]	; (8006e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd8:	d038      	beq.n	8006e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dda:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006de2:	4a1e      	ldr	r2, [pc, #120]	; (8006e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006de4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006de8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2232      	movs	r2, #50	; 0x32
 8006df0:	fb02 f303 	mul.w	r3, r2, r3
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	0c9b      	lsrs	r3, r3, #18
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e00:	e002      	b.n	8006e08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e08:	4b14      	ldr	r3, [pc, #80]	; (8006e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e14:	d102      	bne.n	8006e1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f2      	bne.n	8006e02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e28:	d110      	bne.n	8006e4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e00f      	b.n	8006e4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e2e:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3a:	d007      	beq.n	8006e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e3c:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e44:	4a05      	ldr	r2, [pc, #20]	; (8006e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40007000 	.word	0x40007000
 8006e60:	200000c8 	.word	0x200000c8
 8006e64:	431bde83 	.word	0x431bde83

08006e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f000 bc04 	b.w	8007684 <HAL_RCC_OscConfig+0x81c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e7c:	4ba0      	ldr	r3, [pc, #640]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 030c 	and.w	r3, r3, #12
 8006e84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e86:	4b9e      	ldr	r3, [pc, #632]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80e4 	beq.w	8007066 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x4c>
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	f040 808b 	bne.w	8006fc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	f040 8087 	bne.w	8006fc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006eb4:	4b92      	ldr	r3, [pc, #584]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_RCC_OscConfig+0x64>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e3db      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1a      	ldr	r2, [r3, #32]
 8006ed0:	4b8b      	ldr	r3, [pc, #556]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x7e>
 8006edc:	4b88      	ldr	r3, [pc, #544]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ee4:	e005      	b.n	8006ef2 <HAL_RCC_OscConfig+0x8a>
 8006ee6:	4b86      	ldr	r3, [pc, #536]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d223      	bcs.n	8006f3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fdc4 	bl	8007a88 <RCC_SetFlashLatencyFromMSIRange>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e3bc      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f0a:	4b7d      	ldr	r3, [pc, #500]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7c      	ldr	r2, [pc, #496]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f10:	f043 0308 	orr.w	r3, r3, #8
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	4b7a      	ldr	r3, [pc, #488]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	4977      	ldr	r1, [pc, #476]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f28:	4b75      	ldr	r3, [pc, #468]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	4972      	ldr	r1, [pc, #456]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	604b      	str	r3, [r1, #4]
 8006f3c:	e025      	b.n	8006f8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f3e:	4b70      	ldr	r3, [pc, #448]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a6f      	ldr	r2, [pc, #444]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f44:	f043 0308 	orr.w	r3, r3, #8
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	4b6d      	ldr	r3, [pc, #436]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	496a      	ldr	r1, [pc, #424]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f5c:	4b68      	ldr	r3, [pc, #416]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	4965      	ldr	r1, [pc, #404]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fd84 	bl	8007a88 <RCC_SetFlashLatencyFromMSIRange>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e37c      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f8a:	f000 fcb9 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	4b5b      	ldr	r3, [pc, #364]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	495a      	ldr	r1, [pc, #360]	; (8007104 <HAL_RCC_OscConfig+0x29c>)
 8006f9c:	5ccb      	ldrb	r3, [r1, r3]
 8006f9e:	f003 031f 	and.w	r3, r3, #31
 8006fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa6:	4a58      	ldr	r2, [pc, #352]	; (8007108 <HAL_RCC_OscConfig+0x2a0>)
 8006fa8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006faa:	4b58      	ldr	r3, [pc, #352]	; (800710c <HAL_RCC_OscConfig+0x2a4>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fd fbf2 	bl	8004798 <HAL_InitTick>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d052      	beq.n	8007064 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	e360      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d032      	beq.n	8007030 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fca:	4b4d      	ldr	r3, [pc, #308]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a4c      	ldr	r2, [pc, #304]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006fd0:	f043 0301 	orr.w	r3, r3, #1
 8006fd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fd6:	f7fd fc2f 	bl	8004838 <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fde:	f7fd fc2b 	bl	8004838 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e349      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ff0:	4b43      	ldr	r3, [pc, #268]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ffc:	4b40      	ldr	r3, [pc, #256]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a3f      	ldr	r2, [pc, #252]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8007002:	f043 0308 	orr.w	r3, r3, #8
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	4b3d      	ldr	r3, [pc, #244]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	493a      	ldr	r1, [pc, #232]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8007016:	4313      	orrs	r3, r2
 8007018:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800701a:	4b39      	ldr	r3, [pc, #228]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	4935      	ldr	r1, [pc, #212]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 800702a:	4313      	orrs	r3, r2
 800702c:	604b      	str	r3, [r1, #4]
 800702e:	e01a      	b.n	8007066 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007030:	4b33      	ldr	r3, [pc, #204]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a32      	ldr	r2, [pc, #200]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800703c:	f7fd fbfc 	bl	8004838 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007044:	f7fd fbf8 	bl	8004838 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e316      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007056:	4b2a      	ldr	r3, [pc, #168]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0x1dc>
 8007062:	e000      	b.n	8007066 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007064:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d073      	beq.n	800715a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d005      	beq.n	8007084 <HAL_RCC_OscConfig+0x21c>
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b0c      	cmp	r3, #12
 800707c:	d10e      	bne.n	800709c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b03      	cmp	r3, #3
 8007082:	d10b      	bne.n	800709c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007084:	4b1e      	ldr	r3, [pc, #120]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d063      	beq.n	8007158 <HAL_RCC_OscConfig+0x2f0>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d15f      	bne.n	8007158 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e2f3      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a4:	d106      	bne.n	80070b4 <HAL_RCC_OscConfig+0x24c>
 80070a6:	4b16      	ldr	r3, [pc, #88]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a15      	ldr	r2, [pc, #84]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e01d      	b.n	80070f0 <HAL_RCC_OscConfig+0x288>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070bc:	d10c      	bne.n	80070d8 <HAL_RCC_OscConfig+0x270>
 80070be:	4b10      	ldr	r3, [pc, #64]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a0f      	ldr	r2, [pc, #60]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a0c      	ldr	r2, [pc, #48]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	e00b      	b.n	80070f0 <HAL_RCC_OscConfig+0x288>
 80070d8:	4b09      	ldr	r3, [pc, #36]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a08      	ldr	r2, [pc, #32]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a05      	ldr	r2, [pc, #20]	; (8007100 <HAL_RCC_OscConfig+0x298>)
 80070ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01b      	beq.n	8007130 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fd fb9e 	bl	8004838 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070fe:	e010      	b.n	8007122 <HAL_RCC_OscConfig+0x2ba>
 8007100:	40021000 	.word	0x40021000
 8007104:	08009874 	.word	0x08009874
 8007108:	200000c8 	.word	0x200000c8
 800710c:	200000c0 	.word	0x200000c0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007110:	f7fd fb92 	bl	8004838 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b64      	cmp	r3, #100	; 0x64
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e2b0      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007122:	4baf      	ldr	r3, [pc, #700]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <HAL_RCC_OscConfig+0x2a8>
 800712e:	e014      	b.n	800715a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fd fb82 	bl	8004838 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007138:	f7fd fb7e 	bl	8004838 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b64      	cmp	r3, #100	; 0x64
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e29c      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800714a:	4ba5      	ldr	r3, [pc, #660]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x2d0>
 8007156:	e000      	b.n	800715a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d060      	beq.n	8007228 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b04      	cmp	r3, #4
 800716a:	d005      	beq.n	8007178 <HAL_RCC_OscConfig+0x310>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b0c      	cmp	r3, #12
 8007170:	d119      	bne.n	80071a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d116      	bne.n	80071a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007178:	4b99      	ldr	r3, [pc, #612]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <HAL_RCC_OscConfig+0x328>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e279      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007190:	4b93      	ldr	r3, [pc, #588]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	4990      	ldr	r1, [pc, #576]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071a4:	e040      	b.n	8007228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d023      	beq.n	80071f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071ae:	4b8c      	ldr	r3, [pc, #560]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a8b      	ldr	r2, [pc, #556]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80071b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ba:	f7fd fb3d 	bl	8004838 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c2:	f7fd fb39 	bl	8004838 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e257      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071d4:	4b82      	ldr	r3, [pc, #520]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0f0      	beq.n	80071c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071e0:	4b7f      	ldr	r3, [pc, #508]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	061b      	lsls	r3, r3, #24
 80071ee:	497c      	ldr	r1, [pc, #496]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	604b      	str	r3, [r1, #4]
 80071f4:	e018      	b.n	8007228 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071f6:	4b7a      	ldr	r3, [pc, #488]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a79      	ldr	r2, [pc, #484]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80071fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007202:	f7fd fb19 	bl	8004838 <HAL_GetTick>
 8007206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007208:	e008      	b.n	800721c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800720a:	f7fd fb15 	bl	8004838 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e233      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800721c:	4b70      	ldr	r3, [pc, #448]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1f0      	bne.n	800720a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0308 	and.w	r3, r3, #8
 8007230:	2b00      	cmp	r3, #0
 8007232:	d03c      	beq.n	80072ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01c      	beq.n	8007276 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800723c:	4b68      	ldr	r3, [pc, #416]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800723e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007242:	4a67      	ldr	r2, [pc, #412]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724c:	f7fd faf4 	bl	8004838 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007254:	f7fd faf0 	bl	8004838 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e20e      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007266:	4b5e      	ldr	r3, [pc, #376]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0ef      	beq.n	8007254 <HAL_RCC_OscConfig+0x3ec>
 8007274:	e01b      	b.n	80072ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007276:	4b5a      	ldr	r3, [pc, #360]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800727c:	4a58      	ldr	r2, [pc, #352]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800727e:	f023 0301 	bic.w	r3, r3, #1
 8007282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007286:	f7fd fad7 	bl	8004838 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800728e:	f7fd fad3 	bl	8004838 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e1f1      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072a0:	4b4f      	ldr	r3, [pc, #316]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80072a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ef      	bne.n	800728e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 80a6 	beq.w	8007408 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072bc:	2300      	movs	r3, #0
 80072be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80072c0:	4b47      	ldr	r3, [pc, #284]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80072c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072cc:	4b44      	ldr	r3, [pc, #272]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	4a43      	ldr	r2, [pc, #268]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80072d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d6:	6593      	str	r3, [r2, #88]	; 0x58
 80072d8:	4b41      	ldr	r3, [pc, #260]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80072da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072e4:	2301      	movs	r3, #1
 80072e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e8:	4b3e      	ldr	r3, [pc, #248]	; (80073e4 <HAL_RCC_OscConfig+0x57c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d118      	bne.n	8007326 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072f4:	4b3b      	ldr	r3, [pc, #236]	; (80073e4 <HAL_RCC_OscConfig+0x57c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a3a      	ldr	r2, [pc, #232]	; (80073e4 <HAL_RCC_OscConfig+0x57c>)
 80072fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007300:	f7fd fa9a 	bl	8004838 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007308:	f7fd fa96 	bl	8004838 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e1b4      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800731a:	4b32      	ldr	r3, [pc, #200]	; (80073e4 <HAL_RCC_OscConfig+0x57c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f0      	beq.n	8007308 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d108      	bne.n	8007340 <HAL_RCC_OscConfig+0x4d8>
 800732e:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007334:	4a2a      	ldr	r2, [pc, #168]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800733e:	e024      	b.n	800738a <HAL_RCC_OscConfig+0x522>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b05      	cmp	r3, #5
 8007346:	d110      	bne.n	800736a <HAL_RCC_OscConfig+0x502>
 8007348:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734e:	4a24      	ldr	r2, [pc, #144]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007350:	f043 0304 	orr.w	r3, r3, #4
 8007354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007358:	4b21      	ldr	r3, [pc, #132]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735e:	4a20      	ldr	r2, [pc, #128]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007368:	e00f      	b.n	800738a <HAL_RCC_OscConfig+0x522>
 800736a:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007370:	4a1b      	ldr	r2, [pc, #108]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800737a:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 800737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007380:	4a17      	ldr	r2, [pc, #92]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 8007382:	f023 0304 	bic.w	r3, r3, #4
 8007386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007392:	f7fd fa51 	bl	8004838 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007398:	e00a      	b.n	80073b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739a:	f7fd fa4d 	bl	8004838 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e169      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <HAL_RCC_OscConfig+0x578>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ed      	beq.n	800739a <HAL_RCC_OscConfig+0x532>
 80073be:	e01a      	b.n	80073f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c0:	f7fd fa3a 	bl	8004838 <HAL_GetTick>
 80073c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073c6:	e00f      	b.n	80073e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c8:	f7fd fa36 	bl	8004838 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d906      	bls.n	80073e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e152      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
 80073de:	bf00      	nop
 80073e0:	40021000 	.word	0x40021000
 80073e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073e8:	4ba8      	ldr	r3, [pc, #672]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e8      	bne.n	80073c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073f6:	7ffb      	ldrb	r3, [r7, #31]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d105      	bne.n	8007408 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073fc:	4ba3      	ldr	r3, [pc, #652]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	4aa2      	ldr	r2, [pc, #648]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007406:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d03c      	beq.n	800748e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01c      	beq.n	8007456 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800741c:	4b9b      	ldr	r3, [pc, #620]	; (800768c <HAL_RCC_OscConfig+0x824>)
 800741e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007422:	4a9a      	ldr	r2, [pc, #616]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742c:	f7fd fa04 	bl	8004838 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007434:	f7fd fa00 	bl	8004838 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e11e      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007446:	4b91      	ldr	r3, [pc, #580]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0ef      	beq.n	8007434 <HAL_RCC_OscConfig+0x5cc>
 8007454:	e01b      	b.n	800748e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007456:	4b8d      	ldr	r3, [pc, #564]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800745c:	4a8b      	ldr	r2, [pc, #556]	; (800768c <HAL_RCC_OscConfig+0x824>)
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007466:	f7fd f9e7 	bl	8004838 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800746e:	f7fd f9e3 	bl	8004838 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e101      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007480:	4b82      	ldr	r3, [pc, #520]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1ef      	bne.n	800746e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80f5 	beq.w	8007682 <HAL_RCC_OscConfig+0x81a>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	2b02      	cmp	r3, #2
 800749e:	f040 80cb 	bne.w	8007638 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80074a2:	4b7a      	ldr	r3, [pc, #488]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f003 0203 	and.w	r2, r3, #3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d12c      	bne.n	8007510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	3b01      	subs	r3, #1
 80074c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d123      	bne.n	8007510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d11b      	bne.n	8007510 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d113      	bne.n	8007510 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f2:	085b      	lsrs	r3, r3, #1
 80074f4:	3b01      	subs	r3, #1
 80074f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d109      	bne.n	8007510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	3b01      	subs	r3, #1
 800750a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800750c:	429a      	cmp	r2, r3
 800750e:	d06d      	beq.n	80075ec <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b0c      	cmp	r3, #12
 8007514:	d068      	beq.n	80075e8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007516:	4b5d      	ldr	r3, [pc, #372]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007522:	4b5a      	ldr	r3, [pc, #360]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e0a8      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007532:	4b56      	ldr	r3, [pc, #344]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a55      	ldr	r2, [pc, #340]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800753c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800753e:	f7fd f97b 	bl	8004838 <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007546:	f7fd f977 	bl	8004838 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e095      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007558:	4b4c      	ldr	r3, [pc, #304]	; (800768c <HAL_RCC_OscConfig+0x824>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1f0      	bne.n	8007546 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007564:	4b49      	ldr	r3, [pc, #292]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	4b49      	ldr	r3, [pc, #292]	; (8007690 <HAL_RCC_OscConfig+0x828>)
 800756a:	4013      	ands	r3, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007574:	3a01      	subs	r2, #1
 8007576:	0112      	lsls	r2, r2, #4
 8007578:	4311      	orrs	r1, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800757e:	0212      	lsls	r2, r2, #8
 8007580:	4311      	orrs	r1, r2
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007586:	0852      	lsrs	r2, r2, #1
 8007588:	3a01      	subs	r2, #1
 800758a:	0552      	lsls	r2, r2, #21
 800758c:	4311      	orrs	r1, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007592:	0852      	lsrs	r2, r2, #1
 8007594:	3a01      	subs	r2, #1
 8007596:	0652      	lsls	r2, r2, #25
 8007598:	4311      	orrs	r1, r2
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800759e:	06d2      	lsls	r2, r2, #27
 80075a0:	430a      	orrs	r2, r1
 80075a2:	493a      	ldr	r1, [pc, #232]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075a8:	4b38      	ldr	r3, [pc, #224]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a37      	ldr	r2, [pc, #220]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075b4:	4b35      	ldr	r3, [pc, #212]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4a34      	ldr	r2, [pc, #208]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075c0:	f7fd f93a 	bl	8004838 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c8:	f7fd f936 	bl	8004838 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e054      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075da:	4b2c      	ldr	r3, [pc, #176]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0f0      	beq.n	80075c8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075e6:	e04c      	b.n	8007682 <HAL_RCC_OscConfig+0x81a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e04b      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ec:	4b27      	ldr	r3, [pc, #156]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d144      	bne.n	8007682 <HAL_RCC_OscConfig+0x81a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80075f8:	4b24      	ldr	r3, [pc, #144]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a23      	ldr	r2, [pc, #140]	; (800768c <HAL_RCC_OscConfig+0x824>)
 80075fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007602:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007604:	4b21      	ldr	r3, [pc, #132]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	4a20      	ldr	r2, [pc, #128]	; (800768c <HAL_RCC_OscConfig+0x824>)
 800760a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800760e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007610:	f7fd f912 	bl	8004838 <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007618:	f7fd f90e 	bl	8004838 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e02c      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800762a:	4b18      	ldr	r3, [pc, #96]	; (800768c <HAL_RCC_OscConfig+0x824>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCC_OscConfig+0x7b0>
 8007636:	e024      	b.n	8007682 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	2b0c      	cmp	r3, #12
 800763c:	d01f      	beq.n	800767e <HAL_RCC_OscConfig+0x816>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800763e:	4b13      	ldr	r3, [pc, #76]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a12      	ldr	r2, [pc, #72]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764a:	f7fd f8f5 	bl	8004838 <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x7fc>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007652:	f7fd f8f1 	bl	8004838 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x7fc>
          {
            return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e00f      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1f0      	bne.n	8007652 <HAL_RCC_OscConfig+0x7ea>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007670:	4b06      	ldr	r3, [pc, #24]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	4905      	ldr	r1, [pc, #20]	; (800768c <HAL_RCC_OscConfig+0x824>)
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <HAL_RCC_OscConfig+0x82c>)
 8007678:	4013      	ands	r3, r2
 800767a:	60cb      	str	r3, [r1, #12]
 800767c:	e001      	b.n	8007682 <HAL_RCC_OscConfig+0x81a>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <HAL_RCC_OscConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40021000 	.word	0x40021000
 8007690:	019d808c 	.word	0x019d808c
 8007694:	feeefffc 	.word	0xfeeefffc

08007698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e0e7      	b.n	800787c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076ac:	4b75      	ldr	r3, [pc, #468]	; (8007884 <HAL_RCC_ClockConfig+0x1ec>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d910      	bls.n	80076dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ba:	4b72      	ldr	r3, [pc, #456]	; (8007884 <HAL_RCC_ClockConfig+0x1ec>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f023 0207 	bic.w	r2, r3, #7
 80076c2:	4970      	ldr	r1, [pc, #448]	; (8007884 <HAL_RCC_ClockConfig+0x1ec>)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ca:	4b6e      	ldr	r3, [pc, #440]	; (8007884 <HAL_RCC_ClockConfig+0x1ec>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d001      	beq.n	80076dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0cf      	b.n	800787c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d010      	beq.n	800770a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	4b66      	ldr	r3, [pc, #408]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d908      	bls.n	800770a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076f8:	4b63      	ldr	r3, [pc, #396]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4960      	ldr	r1, [pc, #384]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007706:	4313      	orrs	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d04c      	beq.n	80077b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b03      	cmp	r3, #3
 800771c:	d107      	bne.n	800772e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800771e:	4b5a      	ldr	r3, [pc, #360]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d121      	bne.n	800776e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e0a6      	b.n	800787c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b02      	cmp	r3, #2
 8007734:	d107      	bne.n	8007746 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007736:	4b54      	ldr	r3, [pc, #336]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d115      	bne.n	800776e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e09a      	b.n	800787c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d107      	bne.n	800775e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800774e:	4b4e      	ldr	r3, [pc, #312]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d109      	bne.n	800776e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e08e      	b.n	800787c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800775e:	4b4a      	ldr	r3, [pc, #296]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e086      	b.n	800787c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800776e:	4b46      	ldr	r3, [pc, #280]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f023 0203 	bic.w	r2, r3, #3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	4943      	ldr	r1, [pc, #268]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 800777c:	4313      	orrs	r3, r2
 800777e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007780:	f7fd f85a 	bl	8004838 <HAL_GetTick>
 8007784:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007786:	e00a      	b.n	800779e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007788:	f7fd f856 	bl	8004838 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	f241 3288 	movw	r2, #5000	; 0x1388
 8007796:	4293      	cmp	r3, r2
 8007798:	d901      	bls.n	800779e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e06e      	b.n	800787c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779e:	4b3a      	ldr	r3, [pc, #232]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 020c 	and.w	r2, r3, #12
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d1eb      	bne.n	8007788 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d010      	beq.n	80077de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	4b31      	ldr	r3, [pc, #196]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d208      	bcs.n	80077de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077cc:	4b2e      	ldr	r3, [pc, #184]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	492b      	ldr	r1, [pc, #172]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077de:	4b29      	ldr	r3, [pc, #164]	; (8007884 <HAL_RCC_ClockConfig+0x1ec>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d210      	bcs.n	800780e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ec:	4b25      	ldr	r3, [pc, #148]	; (8007884 <HAL_RCC_ClockConfig+0x1ec>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f023 0207 	bic.w	r2, r3, #7
 80077f4:	4923      	ldr	r1, [pc, #140]	; (8007884 <HAL_RCC_ClockConfig+0x1ec>)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fc:	4b21      	ldr	r3, [pc, #132]	; (8007884 <HAL_RCC_ClockConfig+0x1ec>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d001      	beq.n	800780e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e036      	b.n	800787c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800781a:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	4918      	ldr	r1, [pc, #96]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007828:	4313      	orrs	r3, r2
 800782a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d009      	beq.n	800784c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007838:	4b13      	ldr	r3, [pc, #76]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4910      	ldr	r1, [pc, #64]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007848:	4313      	orrs	r3, r2
 800784a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800784c:	f000 f858 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b0d      	ldr	r3, [pc, #52]	; (8007888 <HAL_RCC_ClockConfig+0x1f0>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	490b      	ldr	r1, [pc, #44]	; (800788c <HAL_RCC_ClockConfig+0x1f4>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <HAL_RCC_ClockConfig+0x1f8>)
 800786a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <HAL_RCC_ClockConfig+0x1fc>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fc ff91 	bl	8004798 <HAL_InitTick>
 8007876:	4603      	mov	r3, r0
 8007878:	72fb      	strb	r3, [r7, #11]

  return status;
 800787a:	7afb      	ldrb	r3, [r7, #11]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40022000 	.word	0x40022000
 8007888:	40021000 	.word	0x40021000
 800788c:	08009874 	.word	0x08009874
 8007890:	200000c8 	.word	0x200000c8
 8007894:	200000c0 	.word	0x200000c0

08007898 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80078a4:	4b15      	ldr	r3, [pc, #84]	; (80078fc <HAL_RCC_MCOConfig+0x64>)
 80078a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a8:	4a14      	ldr	r2, [pc, #80]	; (80078fc <HAL_RCC_MCOConfig+0x64>)
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078b0:	4b12      	ldr	r3, [pc, #72]	; (80078fc <HAL_RCC_MCOConfig+0x64>)
 80078b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80078bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c2:	2302      	movs	r3, #2
 80078c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80078c6:	2302      	movs	r3, #2
 80078c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80078ce:	2300      	movs	r3, #0
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80078d2:	f107 0314 	add.w	r3, r7, #20
 80078d6:	4619      	mov	r1, r3
 80078d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078dc:	f7fe f864 	bl	80059a8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80078e0:	4b06      	ldr	r3, [pc, #24]	; (80078fc <HAL_RCC_MCOConfig+0x64>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	430b      	orrs	r3, r1
 80078ee:	4903      	ldr	r1, [pc, #12]	; (80078fc <HAL_RCC_MCOConfig+0x64>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	608b      	str	r3, [r1, #8]
}
 80078f4:	bf00      	nop
 80078f6:	3728      	adds	r7, #40	; 0x28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40021000 	.word	0x40021000

08007900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007900:	b480      	push	{r7}
 8007902:	b089      	sub	sp, #36	; 0x24
 8007904:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	61fb      	str	r3, [r7, #28]
 800790a:	2300      	movs	r3, #0
 800790c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800790e:	4b3e      	ldr	r3, [pc, #248]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 030c 	and.w	r3, r3, #12
 8007916:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007918:	4b3b      	ldr	r3, [pc, #236]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0303 	and.w	r3, r3, #3
 8007920:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0x34>
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2b0c      	cmp	r3, #12
 800792c:	d121      	bne.n	8007972 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d11e      	bne.n	8007972 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007934:	4b34      	ldr	r3, [pc, #208]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0308 	and.w	r3, r3, #8
 800793c:	2b00      	cmp	r3, #0
 800793e:	d107      	bne.n	8007950 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007940:	4b31      	ldr	r3, [pc, #196]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8007942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	61fb      	str	r3, [r7, #28]
 800794e:	e005      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007950:	4b2d      	ldr	r3, [pc, #180]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800795c:	4a2b      	ldr	r2, [pc, #172]	; (8007a0c <HAL_RCC_GetSysClockFreq+0x10c>)
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007964:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10d      	bne.n	8007988 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007970:	e00a      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b04      	cmp	r3, #4
 8007976:	d102      	bne.n	800797e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007978:	4b25      	ldr	r3, [pc, #148]	; (8007a10 <HAL_RCC_GetSysClockFreq+0x110>)
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	e004      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b08      	cmp	r3, #8
 8007982:	d101      	bne.n	8007988 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007984:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <HAL_RCC_GetSysClockFreq+0x114>)
 8007986:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b0c      	cmp	r3, #12
 800798c:	d134      	bne.n	80079f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800798e:	4b1e      	ldr	r3, [pc, #120]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b02      	cmp	r3, #2
 800799c:	d003      	beq.n	80079a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d003      	beq.n	80079ac <HAL_RCC_GetSysClockFreq+0xac>
 80079a4:	e005      	b.n	80079b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <HAL_RCC_GetSysClockFreq+0x110>)
 80079a8:	617b      	str	r3, [r7, #20]
      break;
 80079aa:	e005      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80079ac:	4b19      	ldr	r3, [pc, #100]	; (8007a14 <HAL_RCC_GetSysClockFreq+0x114>)
 80079ae:	617b      	str	r3, [r7, #20]
      break;
 80079b0:	e002      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	617b      	str	r3, [r7, #20]
      break;
 80079b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079b8:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	3301      	adds	r3, #1
 80079c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80079c6:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	fb02 f203 	mul.w	r2, r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	0e5b      	lsrs	r3, r3, #25
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	3301      	adds	r3, #1
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80079f8:	69bb      	ldr	r3, [r7, #24]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3724      	adds	r7, #36	; 0x24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	0800988c 	.word	0x0800988c
 8007a10:	00f42400 	.word	0x00f42400
 8007a14:	007a1200 	.word	0x007a1200

08007a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a1c:	4b03      	ldr	r3, [pc, #12]	; (8007a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	200000c8 	.word	0x200000c8

08007a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a34:	f7ff fff0 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	4904      	ldr	r1, [pc, #16]	; (8007a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a46:	5ccb      	ldrb	r3, [r1, r3]
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	40021000 	.word	0x40021000
 8007a58:	08009884 	.word	0x08009884

08007a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a60:	f7ff ffda 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8007a64:	4602      	mov	r2, r0
 8007a66:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	0adb      	lsrs	r3, r3, #11
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	4904      	ldr	r1, [pc, #16]	; (8007a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a72:	5ccb      	ldrb	r3, [r1, r3]
 8007a74:	f003 031f 	and.w	r3, r3, #31
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40021000 	.word	0x40021000
 8007a84:	08009884 	.word	0x08009884

08007a88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a94:	4b2a      	ldr	r3, [pc, #168]	; (8007b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007aa0:	f7ff f97e 	bl	8006da0 <HAL_PWREx_GetVoltageRange>
 8007aa4:	6178      	str	r0, [r7, #20]
 8007aa6:	e014      	b.n	8007ad2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007aa8:	4b25      	ldr	r3, [pc, #148]	; (8007b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aac:	4a24      	ldr	r2, [pc, #144]	; (8007b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ab4:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007ac0:	f7ff f96e 	bl	8006da0 <HAL_PWREx_GetVoltageRange>
 8007ac4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007ac6:	4b1e      	ldr	r3, [pc, #120]	; (8007b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aca:	4a1d      	ldr	r2, [pc, #116]	; (8007b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad8:	d10b      	bne.n	8007af2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b80      	cmp	r3, #128	; 0x80
 8007ade:	d919      	bls.n	8007b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2ba0      	cmp	r3, #160	; 0xa0
 8007ae4:	d902      	bls.n	8007aec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	e013      	b.n	8007b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007aec:	2301      	movs	r3, #1
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	e010      	b.n	8007b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b80      	cmp	r3, #128	; 0x80
 8007af6:	d902      	bls.n	8007afe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007af8:	2303      	movs	r3, #3
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	e00a      	b.n	8007b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b80      	cmp	r3, #128	; 0x80
 8007b02:	d102      	bne.n	8007b0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b04:	2302      	movs	r3, #2
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	e004      	b.n	8007b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b70      	cmp	r3, #112	; 0x70
 8007b0e:	d101      	bne.n	8007b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b10:	2301      	movs	r3, #1
 8007b12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b14:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f023 0207 	bic.w	r2, r3, #7
 8007b1c:	4909      	ldr	r1, [pc, #36]	; (8007b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007b24:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d001      	beq.n	8007b36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e000      	b.n	8007b38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	40021000 	.word	0x40021000
 8007b44:	40022000 	.word	0x40022000

08007b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b50:	2300      	movs	r3, #0
 8007b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b54:	2300      	movs	r3, #0
 8007b56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d041      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b6c:	d02a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b72:	d824      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b78:	d008      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b7e:	d81e      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b88:	d010      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b8a:	e018      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007b8c:	4b86      	ldr	r3, [pc, #536]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4a85      	ldr	r2, [pc, #532]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b98:	e015      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 facd 	bl	8008140 <RCCEx_PLLSAI1_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007baa:	e00c      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3320      	adds	r3, #32
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fbb6 	bl	8008324 <RCCEx_PLLSAI2_Config>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007bbc:	e003      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc6:	7cfb      	ldrb	r3, [r7, #19]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bcc:	4b76      	ldr	r3, [pc, #472]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bda:	4973      	ldr	r1, [pc, #460]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007be2:	e001      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be4:	7cfb      	ldrb	r3, [r7, #19]
 8007be6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d041      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bfc:	d02a      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007bfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c02:	d824      	bhi.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007c04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c08:	d008      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c0e:	d81e      	bhi.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c18:	d010      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007c1a:	e018      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c1c:	4b62      	ldr	r3, [pc, #392]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	4a61      	ldr	r2, [pc, #388]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007c28:	e015      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fa85 	bl	8008140 <RCCEx_PLLSAI1_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007c3a:	e00c      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3320      	adds	r3, #32
 8007c40:	2100      	movs	r1, #0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fb6e 	bl	8008324 <RCCEx_PLLSAI2_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007c4c:	e003      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	74fb      	strb	r3, [r7, #19]
      break;
 8007c52:	e000      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c56:	7cfb      	ldrb	r3, [r7, #19]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c5c:	4b52      	ldr	r3, [pc, #328]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c6a:	494f      	ldr	r1, [pc, #316]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c72:	e001      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c74:	7cfb      	ldrb	r3, [r7, #19]
 8007c76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80a0 	beq.w	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c86:	2300      	movs	r3, #0
 8007c88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c8a:	4b47      	ldr	r3, [pc, #284]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00d      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ca0:	4b41      	ldr	r3, [pc, #260]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca4:	4a40      	ldr	r2, [pc, #256]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007caa:	6593      	str	r3, [r2, #88]	; 0x58
 8007cac:	4b3e      	ldr	r3, [pc, #248]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cbc:	4b3b      	ldr	r3, [pc, #236]	; (8007dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a3a      	ldr	r2, [pc, #232]	; (8007dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cc8:	f7fc fdb6 	bl	8004838 <HAL_GetTick>
 8007ccc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007cce:	e009      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cd0:	f7fc fdb2 	bl	8004838 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d902      	bls.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	74fb      	strb	r3, [r7, #19]
        break;
 8007ce2:	e005      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ce4:	4b31      	ldr	r3, [pc, #196]	; (8007dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0ef      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007cf0:	7cfb      	ldrb	r3, [r7, #19]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d15c      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01f      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d019      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d14:	4b24      	ldr	r3, [pc, #144]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d20:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	4a20      	ldr	r2, [pc, #128]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d30:	4b1d      	ldr	r3, [pc, #116]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d36:	4a1c      	ldr	r2, [pc, #112]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d40:	4a19      	ldr	r2, [pc, #100]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d016      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d52:	f7fc fd71 	bl	8004838 <HAL_GetTick>
 8007d56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d58:	e00b      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d5a:	f7fc fd6d 	bl	8004838 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d902      	bls.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	74fb      	strb	r3, [r7, #19]
            break;
 8007d70:	e006      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d72:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d0ec      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007d80:	7cfb      	ldrb	r3, [r7, #19]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10c      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d86:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d96:	4904      	ldr	r1, [pc, #16]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d9e:	e009      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007da0:	7cfb      	ldrb	r3, [r7, #19]
 8007da2:	74bb      	strb	r3, [r7, #18]
 8007da4:	e006      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007da6:	bf00      	nop
 8007da8:	40021000 	.word	0x40021000
 8007dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db0:	7cfb      	ldrb	r3, [r7, #19]
 8007db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007db4:	7c7b      	ldrb	r3, [r7, #17]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d105      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dba:	4ba6      	ldr	r3, [pc, #664]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dbe:	4aa5      	ldr	r2, [pc, #660]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007dd2:	4ba0      	ldr	r3, [pc, #640]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd8:	f023 0203 	bic.w	r2, r3, #3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	499c      	ldr	r1, [pc, #624]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007df4:	4b97      	ldr	r3, [pc, #604]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfa:	f023 020c 	bic.w	r2, r3, #12
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e02:	4994      	ldr	r1, [pc, #592]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e16:	4b8f      	ldr	r3, [pc, #572]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	498b      	ldr	r1, [pc, #556]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0308 	and.w	r3, r3, #8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e38:	4b86      	ldr	r3, [pc, #536]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	4983      	ldr	r1, [pc, #524]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0310 	and.w	r3, r3, #16
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e5a:	4b7e      	ldr	r3, [pc, #504]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e68:	497a      	ldr	r1, [pc, #488]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00a      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e7c:	4b75      	ldr	r3, [pc, #468]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	4972      	ldr	r1, [pc, #456]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e9e:	4b6d      	ldr	r3, [pc, #436]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eac:	4969      	ldr	r1, [pc, #420]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ec0:	4b64      	ldr	r3, [pc, #400]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ece:	4961      	ldr	r1, [pc, #388]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ee2:	4b5c      	ldr	r3, [pc, #368]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef0:	4958      	ldr	r1, [pc, #352]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f04:	4b53      	ldr	r3, [pc, #332]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f12:	4950      	ldr	r1, [pc, #320]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f26:	4b4b      	ldr	r3, [pc, #300]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f34:	4947      	ldr	r1, [pc, #284]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f48:	4b42      	ldr	r3, [pc, #264]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f4e:	f023 0203 	bic.w	r2, r3, #3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f56:	493f      	ldr	r1, [pc, #252]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d028      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f6a:	4b3a      	ldr	r3, [pc, #232]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f78:	4936      	ldr	r1, [pc, #216]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f88:	d106      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f8a:	4b32      	ldr	r3, [pc, #200]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	4a31      	ldr	r2, [pc, #196]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f94:	60d3      	str	r3, [r2, #12]
 8007f96:	e011      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fa0:	d10c      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 f8c9 	bl	8008140 <RCCEx_PLLSAI1_Config>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007fb2:	7cfb      	ldrb	r3, [r7, #19]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007fb8:	7cfb      	ldrb	r3, [r7, #19]
 8007fba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d028      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007fc8:	4b22      	ldr	r3, [pc, #136]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd6:	491f      	ldr	r1, [pc, #124]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fe6:	d106      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fe8:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	4a19      	ldr	r2, [pc, #100]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ff2:	60d3      	str	r3, [r2, #12]
 8007ff4:	e011      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ffe:	d10c      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	2101      	movs	r1, #1
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f89a 	bl	8008140 <RCCEx_PLLSAI1_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008010:	7cfb      	ldrb	r3, [r7, #19]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8008016:	7cfb      	ldrb	r3, [r7, #19]
 8008018:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d02a      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008034:	4907      	ldr	r1, [pc, #28]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008044:	d108      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008046:	4b03      	ldr	r3, [pc, #12]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	4a02      	ldr	r2, [pc, #8]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800804c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008050:	60d3      	str	r3, [r2, #12]
 8008052:	e013      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8008054:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800805c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008060:	d10c      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3304      	adds	r3, #4
 8008066:	2101      	movs	r1, #1
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f869 	bl	8008140 <RCCEx_PLLSAI1_Config>
 800806e:	4603      	mov	r3, r0
 8008070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008072:	7cfb      	ldrb	r3, [r7, #19]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d02f      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008088:	4b2c      	ldr	r3, [pc, #176]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008096:	4929      	ldr	r1, [pc, #164]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008098:	4313      	orrs	r3, r2
 800809a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080a6:	d10d      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3304      	adds	r3, #4
 80080ac:	2102      	movs	r1, #2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f846 	bl	8008140 <RCCEx_PLLSAI1_Config>
 80080b4:	4603      	mov	r3, r0
 80080b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80080b8:	7cfb      	ldrb	r3, [r7, #19]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d014      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80080be:	7cfb      	ldrb	r3, [r7, #19]
 80080c0:	74bb      	strb	r3, [r7, #18]
 80080c2:	e011      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080cc:	d10c      	bne.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3320      	adds	r3, #32
 80080d2:	2102      	movs	r1, #2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f925 	bl	8008324 <RCCEx_PLLSAI2_Config>
 80080da:	4603      	mov	r3, r0
 80080dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80080de:	7cfb      	ldrb	r3, [r7, #19]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80080e4:	7cfb      	ldrb	r3, [r7, #19]
 80080e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080f4:	4b11      	ldr	r3, [pc, #68]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80080f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008104:	490d      	ldr	r1, [pc, #52]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008118:	4b08      	ldr	r3, [pc, #32]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008128:	4904      	ldr	r1, [pc, #16]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008130:	7cbb      	ldrb	r3, [r7, #18]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	40021000 	.word	0x40021000

08008140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800814e:	4b74      	ldr	r3, [pc, #464]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d018      	beq.n	800818c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800815a:	4b71      	ldr	r3, [pc, #452]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f003 0203 	and.w	r2, r3, #3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	d10d      	bne.n	8008186 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
       ||
 800816e:	2b00      	cmp	r3, #0
 8008170:	d009      	beq.n	8008186 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008172:	4b6b      	ldr	r3, [pc, #428]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	091b      	lsrs	r3, r3, #4
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
       ||
 8008182:	429a      	cmp	r2, r3
 8008184:	d047      	beq.n	8008216 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	73fb      	strb	r3, [r7, #15]
 800818a:	e044      	b.n	8008216 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b03      	cmp	r3, #3
 8008192:	d018      	beq.n	80081c6 <RCCEx_PLLSAI1_Config+0x86>
 8008194:	2b03      	cmp	r3, #3
 8008196:	d825      	bhi.n	80081e4 <RCCEx_PLLSAI1_Config+0xa4>
 8008198:	2b01      	cmp	r3, #1
 800819a:	d002      	beq.n	80081a2 <RCCEx_PLLSAI1_Config+0x62>
 800819c:	2b02      	cmp	r3, #2
 800819e:	d009      	beq.n	80081b4 <RCCEx_PLLSAI1_Config+0x74>
 80081a0:	e020      	b.n	80081e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80081a2:	4b5f      	ldr	r3, [pc, #380]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d11d      	bne.n	80081ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081b2:	e01a      	b.n	80081ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80081b4:	4b5a      	ldr	r3, [pc, #360]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d116      	bne.n	80081ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081c4:	e013      	b.n	80081ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80081c6:	4b56      	ldr	r3, [pc, #344]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10f      	bne.n	80081f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80081d2:	4b53      	ldr	r3, [pc, #332]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081e2:	e006      	b.n	80081f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
      break;
 80081e8:	e004      	b.n	80081f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80081ea:	bf00      	nop
 80081ec:	e002      	b.n	80081f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80081ee:	bf00      	nop
 80081f0:	e000      	b.n	80081f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80081f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10d      	bne.n	8008216 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80081fa:	4b49      	ldr	r3, [pc, #292]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	3b01      	subs	r3, #1
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	430b      	orrs	r3, r1
 8008210:	4943      	ldr	r1, [pc, #268]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008212:	4313      	orrs	r3, r2
 8008214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d17c      	bne.n	8008316 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800821c:	4b40      	ldr	r3, [pc, #256]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a3f      	ldr	r2, [pc, #252]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008222:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008228:	f7fc fb06 	bl	8004838 <HAL_GetTick>
 800822c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800822e:	e009      	b.n	8008244 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008230:	f7fc fb02 	bl	8004838 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d902      	bls.n	8008244 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	73fb      	strb	r3, [r7, #15]
        break;
 8008242:	e005      	b.n	8008250 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008244:	4b36      	ldr	r3, [pc, #216]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1ef      	bne.n	8008230 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d15f      	bne.n	8008316 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d110      	bne.n	800827e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800825c:	4b30      	ldr	r3, [pc, #192]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6892      	ldr	r2, [r2, #8]
 800826c:	0211      	lsls	r1, r2, #8
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	68d2      	ldr	r2, [r2, #12]
 8008272:	06d2      	lsls	r2, r2, #27
 8008274:	430a      	orrs	r2, r1
 8008276:	492a      	ldr	r1, [pc, #168]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008278:	4313      	orrs	r3, r2
 800827a:	610b      	str	r3, [r1, #16]
 800827c:	e027      	b.n	80082ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d112      	bne.n	80082aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008284:	4b26      	ldr	r3, [pc, #152]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800828c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6892      	ldr	r2, [r2, #8]
 8008294:	0211      	lsls	r1, r2, #8
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6912      	ldr	r2, [r2, #16]
 800829a:	0852      	lsrs	r2, r2, #1
 800829c:	3a01      	subs	r2, #1
 800829e:	0552      	lsls	r2, r2, #21
 80082a0:	430a      	orrs	r2, r1
 80082a2:	491f      	ldr	r1, [pc, #124]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	610b      	str	r3, [r1, #16]
 80082a8:	e011      	b.n	80082ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082aa:	4b1d      	ldr	r3, [pc, #116]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80082b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6892      	ldr	r2, [r2, #8]
 80082ba:	0211      	lsls	r1, r2, #8
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6952      	ldr	r2, [r2, #20]
 80082c0:	0852      	lsrs	r2, r2, #1
 80082c2:	3a01      	subs	r2, #1
 80082c4:	0652      	lsls	r2, r2, #25
 80082c6:	430a      	orrs	r2, r1
 80082c8:	4915      	ldr	r1, [pc, #84]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80082ce:	4b14      	ldr	r3, [pc, #80]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a13      	ldr	r2, [pc, #76]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082da:	f7fc faad 	bl	8004838 <HAL_GetTick>
 80082de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80082e0:	e009      	b.n	80082f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082e2:	f7fc faa9 	bl	8004838 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d902      	bls.n	80082f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	73fb      	strb	r3, [r7, #15]
          break;
 80082f4:	e005      	b.n	8008302 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0ef      	beq.n	80082e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800830a:	691a      	ldr	r2, [r3, #16]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	4903      	ldr	r1, [pc, #12]	; (8008320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008312:	4313      	orrs	r3, r2
 8008314:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40021000 	.word	0x40021000

08008324 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008332:	4b69      	ldr	r3, [pc, #420]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d018      	beq.n	8008370 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800833e:	4b66      	ldr	r3, [pc, #408]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f003 0203 	and.w	r2, r3, #3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d10d      	bne.n	800836a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
       ||
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008356:	4b60      	ldr	r3, [pc, #384]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	091b      	lsrs	r3, r3, #4
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
       ||
 8008366:	429a      	cmp	r2, r3
 8008368:	d047      	beq.n	80083fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]
 800836e:	e044      	b.n	80083fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b03      	cmp	r3, #3
 8008376:	d018      	beq.n	80083aa <RCCEx_PLLSAI2_Config+0x86>
 8008378:	2b03      	cmp	r3, #3
 800837a:	d825      	bhi.n	80083c8 <RCCEx_PLLSAI2_Config+0xa4>
 800837c:	2b01      	cmp	r3, #1
 800837e:	d002      	beq.n	8008386 <RCCEx_PLLSAI2_Config+0x62>
 8008380:	2b02      	cmp	r3, #2
 8008382:	d009      	beq.n	8008398 <RCCEx_PLLSAI2_Config+0x74>
 8008384:	e020      	b.n	80083c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008386:	4b54      	ldr	r3, [pc, #336]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d11d      	bne.n	80083ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008396:	e01a      	b.n	80083ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008398:	4b4f      	ldr	r3, [pc, #316]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d116      	bne.n	80083d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083a8:	e013      	b.n	80083d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80083aa:	4b4b      	ldr	r3, [pc, #300]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10f      	bne.n	80083d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80083b6:	4b48      	ldr	r3, [pc, #288]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d109      	bne.n	80083d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083c6:	e006      	b.n	80083d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
      break;
 80083cc:	e004      	b.n	80083d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80083ce:	bf00      	nop
 80083d0:	e002      	b.n	80083d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80083d2:	bf00      	nop
 80083d4:	e000      	b.n	80083d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80083d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10d      	bne.n	80083fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80083de:	4b3e      	ldr	r3, [pc, #248]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6819      	ldr	r1, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	430b      	orrs	r3, r1
 80083f4:	4938      	ldr	r1, [pc, #224]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d166      	bne.n	80084ce <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008400:	4b35      	ldr	r3, [pc, #212]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a34      	ldr	r2, [pc, #208]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800840a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800840c:	f7fc fa14 	bl	8004838 <HAL_GetTick>
 8008410:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008412:	e009      	b.n	8008428 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008414:	f7fc fa10 	bl	8004838 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d902      	bls.n	8008428 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	73fb      	strb	r3, [r7, #15]
        break;
 8008426:	e005      	b.n	8008434 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008428:	4b2b      	ldr	r3, [pc, #172]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1ef      	bne.n	8008414 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d149      	bne.n	80084ce <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d110      	bne.n	8008462 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008440:	4b25      	ldr	r3, [pc, #148]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008448:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6892      	ldr	r2, [r2, #8]
 8008450:	0211      	lsls	r1, r2, #8
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	68d2      	ldr	r2, [r2, #12]
 8008456:	06d2      	lsls	r2, r2, #27
 8008458:	430a      	orrs	r2, r1
 800845a:	491f      	ldr	r1, [pc, #124]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800845c:	4313      	orrs	r3, r2
 800845e:	614b      	str	r3, [r1, #20]
 8008460:	e011      	b.n	8008486 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008462:	4b1d      	ldr	r3, [pc, #116]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800846a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	6892      	ldr	r2, [r2, #8]
 8008472:	0211      	lsls	r1, r2, #8
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6912      	ldr	r2, [r2, #16]
 8008478:	0852      	lsrs	r2, r2, #1
 800847a:	3a01      	subs	r2, #1
 800847c:	0652      	lsls	r2, r2, #25
 800847e:	430a      	orrs	r2, r1
 8008480:	4915      	ldr	r1, [pc, #84]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008482:	4313      	orrs	r3, r2
 8008484:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008486:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a13      	ldr	r2, [pc, #76]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800848c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008490:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008492:	f7fc f9d1 	bl	8004838 <HAL_GetTick>
 8008496:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008498:	e009      	b.n	80084ae <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800849a:	f7fc f9cd 	bl	8004838 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d902      	bls.n	80084ae <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	73fb      	strb	r3, [r7, #15]
          break;
 80084ac:	e005      	b.n	80084ba <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80084ae:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0ef      	beq.n	800849a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80084c2:	695a      	ldr	r2, [r3, #20]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	4903      	ldr	r1, [pc, #12]	; (80084d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40021000 	.word	0x40021000

080084dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e040      	b.n	8008570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d106      	bne.n	8008504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f83a 	bl	8008578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2224      	movs	r2, #36	; 0x24
 8008508:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0201 	bic.w	r2, r2, #1
 8008518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f836 	bl	800858c <UART_SetConfig>
 8008520:	4603      	mov	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e022      	b.n	8008570 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fab4 	bl	8008aa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0201 	orr.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fb3b 	bl	8008be4 <UART_CheckIdleState>
 800856e:	4603      	mov	r3, r0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800858c:	b5b0      	push	{r4, r5, r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4bad      	ldr	r3, [pc, #692]	; (800886c <UART_SetConfig+0x2e0>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	6812      	ldr	r2, [r2, #0]
 80085be:	69f9      	ldr	r1, [r7, #28]
 80085c0:	430b      	orrs	r3, r1
 80085c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4aa2      	ldr	r2, [pc, #648]	; (8008870 <UART_SetConfig+0x2e4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d004      	beq.n	80085f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	430a      	orrs	r2, r1
 8008606:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a99      	ldr	r2, [pc, #612]	; (8008874 <UART_SetConfig+0x2e8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d121      	bne.n	8008656 <UART_SetConfig+0xca>
 8008612:	4b99      	ldr	r3, [pc, #612]	; (8008878 <UART_SetConfig+0x2ec>)
 8008614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	2b03      	cmp	r3, #3
 800861e:	d817      	bhi.n	8008650 <UART_SetConfig+0xc4>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <UART_SetConfig+0x9c>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	08008639 	.word	0x08008639
 800862c:	08008645 	.word	0x08008645
 8008630:	0800863f 	.word	0x0800863f
 8008634:	0800864b 	.word	0x0800864b
 8008638:	2301      	movs	r3, #1
 800863a:	76fb      	strb	r3, [r7, #27]
 800863c:	e0e7      	b.n	800880e <UART_SetConfig+0x282>
 800863e:	2302      	movs	r3, #2
 8008640:	76fb      	strb	r3, [r7, #27]
 8008642:	e0e4      	b.n	800880e <UART_SetConfig+0x282>
 8008644:	2304      	movs	r3, #4
 8008646:	76fb      	strb	r3, [r7, #27]
 8008648:	e0e1      	b.n	800880e <UART_SetConfig+0x282>
 800864a:	2308      	movs	r3, #8
 800864c:	76fb      	strb	r3, [r7, #27]
 800864e:	e0de      	b.n	800880e <UART_SetConfig+0x282>
 8008650:	2310      	movs	r3, #16
 8008652:	76fb      	strb	r3, [r7, #27]
 8008654:	e0db      	b.n	800880e <UART_SetConfig+0x282>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a88      	ldr	r2, [pc, #544]	; (800887c <UART_SetConfig+0x2f0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d132      	bne.n	80086c6 <UART_SetConfig+0x13a>
 8008660:	4b85      	ldr	r3, [pc, #532]	; (8008878 <UART_SetConfig+0x2ec>)
 8008662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008666:	f003 030c 	and.w	r3, r3, #12
 800866a:	2b0c      	cmp	r3, #12
 800866c:	d828      	bhi.n	80086c0 <UART_SetConfig+0x134>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0xe8>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	080086a9 	.word	0x080086a9
 8008678:	080086c1 	.word	0x080086c1
 800867c:	080086c1 	.word	0x080086c1
 8008680:	080086c1 	.word	0x080086c1
 8008684:	080086b5 	.word	0x080086b5
 8008688:	080086c1 	.word	0x080086c1
 800868c:	080086c1 	.word	0x080086c1
 8008690:	080086c1 	.word	0x080086c1
 8008694:	080086af 	.word	0x080086af
 8008698:	080086c1 	.word	0x080086c1
 800869c:	080086c1 	.word	0x080086c1
 80086a0:	080086c1 	.word	0x080086c1
 80086a4:	080086bb 	.word	0x080086bb
 80086a8:	2300      	movs	r3, #0
 80086aa:	76fb      	strb	r3, [r7, #27]
 80086ac:	e0af      	b.n	800880e <UART_SetConfig+0x282>
 80086ae:	2302      	movs	r3, #2
 80086b0:	76fb      	strb	r3, [r7, #27]
 80086b2:	e0ac      	b.n	800880e <UART_SetConfig+0x282>
 80086b4:	2304      	movs	r3, #4
 80086b6:	76fb      	strb	r3, [r7, #27]
 80086b8:	e0a9      	b.n	800880e <UART_SetConfig+0x282>
 80086ba:	2308      	movs	r3, #8
 80086bc:	76fb      	strb	r3, [r7, #27]
 80086be:	e0a6      	b.n	800880e <UART_SetConfig+0x282>
 80086c0:	2310      	movs	r3, #16
 80086c2:	76fb      	strb	r3, [r7, #27]
 80086c4:	e0a3      	b.n	800880e <UART_SetConfig+0x282>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a6d      	ldr	r2, [pc, #436]	; (8008880 <UART_SetConfig+0x2f4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d120      	bne.n	8008712 <UART_SetConfig+0x186>
 80086d0:	4b69      	ldr	r3, [pc, #420]	; (8008878 <UART_SetConfig+0x2ec>)
 80086d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086da:	2b30      	cmp	r3, #48	; 0x30
 80086dc:	d013      	beq.n	8008706 <UART_SetConfig+0x17a>
 80086de:	2b30      	cmp	r3, #48	; 0x30
 80086e0:	d814      	bhi.n	800870c <UART_SetConfig+0x180>
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	d009      	beq.n	80086fa <UART_SetConfig+0x16e>
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d810      	bhi.n	800870c <UART_SetConfig+0x180>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <UART_SetConfig+0x168>
 80086ee:	2b10      	cmp	r3, #16
 80086f0:	d006      	beq.n	8008700 <UART_SetConfig+0x174>
 80086f2:	e00b      	b.n	800870c <UART_SetConfig+0x180>
 80086f4:	2300      	movs	r3, #0
 80086f6:	76fb      	strb	r3, [r7, #27]
 80086f8:	e089      	b.n	800880e <UART_SetConfig+0x282>
 80086fa:	2302      	movs	r3, #2
 80086fc:	76fb      	strb	r3, [r7, #27]
 80086fe:	e086      	b.n	800880e <UART_SetConfig+0x282>
 8008700:	2304      	movs	r3, #4
 8008702:	76fb      	strb	r3, [r7, #27]
 8008704:	e083      	b.n	800880e <UART_SetConfig+0x282>
 8008706:	2308      	movs	r3, #8
 8008708:	76fb      	strb	r3, [r7, #27]
 800870a:	e080      	b.n	800880e <UART_SetConfig+0x282>
 800870c:	2310      	movs	r3, #16
 800870e:	76fb      	strb	r3, [r7, #27]
 8008710:	e07d      	b.n	800880e <UART_SetConfig+0x282>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a5b      	ldr	r2, [pc, #364]	; (8008884 <UART_SetConfig+0x2f8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d120      	bne.n	800875e <UART_SetConfig+0x1d2>
 800871c:	4b56      	ldr	r3, [pc, #344]	; (8008878 <UART_SetConfig+0x2ec>)
 800871e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008726:	2bc0      	cmp	r3, #192	; 0xc0
 8008728:	d013      	beq.n	8008752 <UART_SetConfig+0x1c6>
 800872a:	2bc0      	cmp	r3, #192	; 0xc0
 800872c:	d814      	bhi.n	8008758 <UART_SetConfig+0x1cc>
 800872e:	2b80      	cmp	r3, #128	; 0x80
 8008730:	d009      	beq.n	8008746 <UART_SetConfig+0x1ba>
 8008732:	2b80      	cmp	r3, #128	; 0x80
 8008734:	d810      	bhi.n	8008758 <UART_SetConfig+0x1cc>
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <UART_SetConfig+0x1b4>
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d006      	beq.n	800874c <UART_SetConfig+0x1c0>
 800873e:	e00b      	b.n	8008758 <UART_SetConfig+0x1cc>
 8008740:	2300      	movs	r3, #0
 8008742:	76fb      	strb	r3, [r7, #27]
 8008744:	e063      	b.n	800880e <UART_SetConfig+0x282>
 8008746:	2302      	movs	r3, #2
 8008748:	76fb      	strb	r3, [r7, #27]
 800874a:	e060      	b.n	800880e <UART_SetConfig+0x282>
 800874c:	2304      	movs	r3, #4
 800874e:	76fb      	strb	r3, [r7, #27]
 8008750:	e05d      	b.n	800880e <UART_SetConfig+0x282>
 8008752:	2308      	movs	r3, #8
 8008754:	76fb      	strb	r3, [r7, #27]
 8008756:	e05a      	b.n	800880e <UART_SetConfig+0x282>
 8008758:	2310      	movs	r3, #16
 800875a:	76fb      	strb	r3, [r7, #27]
 800875c:	e057      	b.n	800880e <UART_SetConfig+0x282>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a49      	ldr	r2, [pc, #292]	; (8008888 <UART_SetConfig+0x2fc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d125      	bne.n	80087b4 <UART_SetConfig+0x228>
 8008768:	4b43      	ldr	r3, [pc, #268]	; (8008878 <UART_SetConfig+0x2ec>)
 800876a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008776:	d017      	beq.n	80087a8 <UART_SetConfig+0x21c>
 8008778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800877c:	d817      	bhi.n	80087ae <UART_SetConfig+0x222>
 800877e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008782:	d00b      	beq.n	800879c <UART_SetConfig+0x210>
 8008784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008788:	d811      	bhi.n	80087ae <UART_SetConfig+0x222>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <UART_SetConfig+0x20a>
 800878e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008792:	d006      	beq.n	80087a2 <UART_SetConfig+0x216>
 8008794:	e00b      	b.n	80087ae <UART_SetConfig+0x222>
 8008796:	2300      	movs	r3, #0
 8008798:	76fb      	strb	r3, [r7, #27]
 800879a:	e038      	b.n	800880e <UART_SetConfig+0x282>
 800879c:	2302      	movs	r3, #2
 800879e:	76fb      	strb	r3, [r7, #27]
 80087a0:	e035      	b.n	800880e <UART_SetConfig+0x282>
 80087a2:	2304      	movs	r3, #4
 80087a4:	76fb      	strb	r3, [r7, #27]
 80087a6:	e032      	b.n	800880e <UART_SetConfig+0x282>
 80087a8:	2308      	movs	r3, #8
 80087aa:	76fb      	strb	r3, [r7, #27]
 80087ac:	e02f      	b.n	800880e <UART_SetConfig+0x282>
 80087ae:	2310      	movs	r3, #16
 80087b0:	76fb      	strb	r3, [r7, #27]
 80087b2:	e02c      	b.n	800880e <UART_SetConfig+0x282>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a2d      	ldr	r2, [pc, #180]	; (8008870 <UART_SetConfig+0x2e4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d125      	bne.n	800880a <UART_SetConfig+0x27e>
 80087be:	4b2e      	ldr	r3, [pc, #184]	; (8008878 <UART_SetConfig+0x2ec>)
 80087c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087cc:	d017      	beq.n	80087fe <UART_SetConfig+0x272>
 80087ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087d2:	d817      	bhi.n	8008804 <UART_SetConfig+0x278>
 80087d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d8:	d00b      	beq.n	80087f2 <UART_SetConfig+0x266>
 80087da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087de:	d811      	bhi.n	8008804 <UART_SetConfig+0x278>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <UART_SetConfig+0x260>
 80087e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e8:	d006      	beq.n	80087f8 <UART_SetConfig+0x26c>
 80087ea:	e00b      	b.n	8008804 <UART_SetConfig+0x278>
 80087ec:	2300      	movs	r3, #0
 80087ee:	76fb      	strb	r3, [r7, #27]
 80087f0:	e00d      	b.n	800880e <UART_SetConfig+0x282>
 80087f2:	2302      	movs	r3, #2
 80087f4:	76fb      	strb	r3, [r7, #27]
 80087f6:	e00a      	b.n	800880e <UART_SetConfig+0x282>
 80087f8:	2304      	movs	r3, #4
 80087fa:	76fb      	strb	r3, [r7, #27]
 80087fc:	e007      	b.n	800880e <UART_SetConfig+0x282>
 80087fe:	2308      	movs	r3, #8
 8008800:	76fb      	strb	r3, [r7, #27]
 8008802:	e004      	b.n	800880e <UART_SetConfig+0x282>
 8008804:	2310      	movs	r3, #16
 8008806:	76fb      	strb	r3, [r7, #27]
 8008808:	e001      	b.n	800880e <UART_SetConfig+0x282>
 800880a:	2310      	movs	r3, #16
 800880c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a17      	ldr	r2, [pc, #92]	; (8008870 <UART_SetConfig+0x2e4>)
 8008814:	4293      	cmp	r3, r2
 8008816:	f040 8087 	bne.w	8008928 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800881a:	7efb      	ldrb	r3, [r7, #27]
 800881c:	2b08      	cmp	r3, #8
 800881e:	d837      	bhi.n	8008890 <UART_SetConfig+0x304>
 8008820:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0x29c>)
 8008822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008826:	bf00      	nop
 8008828:	0800884d 	.word	0x0800884d
 800882c:	08008891 	.word	0x08008891
 8008830:	08008855 	.word	0x08008855
 8008834:	08008891 	.word	0x08008891
 8008838:	0800885b 	.word	0x0800885b
 800883c:	08008891 	.word	0x08008891
 8008840:	08008891 	.word	0x08008891
 8008844:	08008891 	.word	0x08008891
 8008848:	08008863 	.word	0x08008863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800884c:	f7ff f8f0 	bl	8007a30 <HAL_RCC_GetPCLK1Freq>
 8008850:	6178      	str	r0, [r7, #20]
        break;
 8008852:	e022      	b.n	800889a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008854:	4b0d      	ldr	r3, [pc, #52]	; (800888c <UART_SetConfig+0x300>)
 8008856:	617b      	str	r3, [r7, #20]
        break;
 8008858:	e01f      	b.n	800889a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800885a:	f7ff f851 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 800885e:	6178      	str	r0, [r7, #20]
        break;
 8008860:	e01b      	b.n	800889a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008866:	617b      	str	r3, [r7, #20]
        break;
 8008868:	e017      	b.n	800889a <UART_SetConfig+0x30e>
 800886a:	bf00      	nop
 800886c:	efff69f3 	.word	0xefff69f3
 8008870:	40008000 	.word	0x40008000
 8008874:	40013800 	.word	0x40013800
 8008878:	40021000 	.word	0x40021000
 800887c:	40004400 	.word	0x40004400
 8008880:	40004800 	.word	0x40004800
 8008884:	40004c00 	.word	0x40004c00
 8008888:	40005000 	.word	0x40005000
 800888c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	76bb      	strb	r3, [r7, #26]
        break;
 8008898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 80f1 	beq.w	8008a84 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	4613      	mov	r3, r2
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	4413      	add	r3, r2
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d305      	bcc.n	80088be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d902      	bls.n	80088c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	76bb      	strb	r3, [r7, #26]
 80088c2:	e0df      	b.n	8008a84 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f04f 0100 	mov.w	r1, #0
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	020b      	lsls	r3, r1, #8
 80088d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088da:	0202      	lsls	r2, r0, #8
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	6849      	ldr	r1, [r1, #4]
 80088e0:	0849      	lsrs	r1, r1, #1
 80088e2:	4608      	mov	r0, r1
 80088e4:	f04f 0100 	mov.w	r1, #0
 80088e8:	1814      	adds	r4, r2, r0
 80088ea:	eb43 0501 	adc.w	r5, r3, r1
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f04f 0300 	mov.w	r3, #0
 80088f8:	4620      	mov	r0, r4
 80088fa:	4629      	mov	r1, r5
 80088fc:	f7f7 fc76 	bl	80001ec <__aeabi_uldivmod>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4613      	mov	r3, r2
 8008906:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890e:	d308      	bcc.n	8008922 <UART_SetConfig+0x396>
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008916:	d204      	bcs.n	8008922 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	60da      	str	r2, [r3, #12]
 8008920:	e0b0      	b.n	8008a84 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	76bb      	strb	r3, [r7, #26]
 8008926:	e0ad      	b.n	8008a84 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008930:	d15b      	bne.n	80089ea <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008932:	7efb      	ldrb	r3, [r7, #27]
 8008934:	2b08      	cmp	r3, #8
 8008936:	d828      	bhi.n	800898a <UART_SetConfig+0x3fe>
 8008938:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <UART_SetConfig+0x3b4>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	08008965 	.word	0x08008965
 8008944:	0800896d 	.word	0x0800896d
 8008948:	08008975 	.word	0x08008975
 800894c:	0800898b 	.word	0x0800898b
 8008950:	0800897b 	.word	0x0800897b
 8008954:	0800898b 	.word	0x0800898b
 8008958:	0800898b 	.word	0x0800898b
 800895c:	0800898b 	.word	0x0800898b
 8008960:	08008983 	.word	0x08008983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008964:	f7ff f864 	bl	8007a30 <HAL_RCC_GetPCLK1Freq>
 8008968:	6178      	str	r0, [r7, #20]
        break;
 800896a:	e013      	b.n	8008994 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800896c:	f7ff f876 	bl	8007a5c <HAL_RCC_GetPCLK2Freq>
 8008970:	6178      	str	r0, [r7, #20]
        break;
 8008972:	e00f      	b.n	8008994 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008974:	4b49      	ldr	r3, [pc, #292]	; (8008a9c <UART_SetConfig+0x510>)
 8008976:	617b      	str	r3, [r7, #20]
        break;
 8008978:	e00c      	b.n	8008994 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897a:	f7fe ffc1 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 800897e:	6178      	str	r0, [r7, #20]
        break;
 8008980:	e008      	b.n	8008994 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008986:	617b      	str	r3, [r7, #20]
        break;
 8008988:	e004      	b.n	8008994 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	76bb      	strb	r3, [r7, #26]
        break;
 8008992:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d074      	beq.n	8008a84 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	005a      	lsls	r2, r3, #1
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	085b      	lsrs	r3, r3, #1
 80089a4:	441a      	add	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2b0f      	cmp	r3, #15
 80089b4:	d916      	bls.n	80089e4 <UART_SetConfig+0x458>
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089bc:	d212      	bcs.n	80089e4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f023 030f 	bic.w	r3, r3, #15
 80089c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	89fb      	ldrh	r3, [r7, #14]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	89fa      	ldrh	r2, [r7, #14]
 80089e0:	60da      	str	r2, [r3, #12]
 80089e2:	e04f      	b.n	8008a84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	76bb      	strb	r3, [r7, #26]
 80089e8:	e04c      	b.n	8008a84 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089ea:	7efb      	ldrb	r3, [r7, #27]
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d828      	bhi.n	8008a42 <UART_SetConfig+0x4b6>
 80089f0:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0x46c>)
 80089f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f6:	bf00      	nop
 80089f8:	08008a1d 	.word	0x08008a1d
 80089fc:	08008a25 	.word	0x08008a25
 8008a00:	08008a2d 	.word	0x08008a2d
 8008a04:	08008a43 	.word	0x08008a43
 8008a08:	08008a33 	.word	0x08008a33
 8008a0c:	08008a43 	.word	0x08008a43
 8008a10:	08008a43 	.word	0x08008a43
 8008a14:	08008a43 	.word	0x08008a43
 8008a18:	08008a3b 	.word	0x08008a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a1c:	f7ff f808 	bl	8007a30 <HAL_RCC_GetPCLK1Freq>
 8008a20:	6178      	str	r0, [r7, #20]
        break;
 8008a22:	e013      	b.n	8008a4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a24:	f7ff f81a 	bl	8007a5c <HAL_RCC_GetPCLK2Freq>
 8008a28:	6178      	str	r0, [r7, #20]
        break;
 8008a2a:	e00f      	b.n	8008a4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <UART_SetConfig+0x510>)
 8008a2e:	617b      	str	r3, [r7, #20]
        break;
 8008a30:	e00c      	b.n	8008a4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a32:	f7fe ff65 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 8008a36:	6178      	str	r0, [r7, #20]
        break;
 8008a38:	e008      	b.n	8008a4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a3e:	617b      	str	r3, [r7, #20]
        break;
 8008a40:	e004      	b.n	8008a4c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	76bb      	strb	r3, [r7, #26]
        break;
 8008a4a:	bf00      	nop
    }

    if (pclk != 0U)
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d018      	beq.n	8008a84 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	085a      	lsrs	r2, r3, #1
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	441a      	add	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a64:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b0f      	cmp	r3, #15
 8008a6a:	d909      	bls.n	8008a80 <UART_SetConfig+0x4f4>
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a72:	d205      	bcs.n	8008a80 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60da      	str	r2, [r3, #12]
 8008a7e:	e001      	b.n	8008a84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008a90:	7ebb      	ldrb	r3, [r7, #26]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bdb0      	pop	{r4, r5, r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	00f42400 	.word	0x00f42400

08008aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00a      	beq.n	8008b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b12:	f003 0308 	and.w	r3, r3, #8
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00a      	beq.n	8008b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01a      	beq.n	8008bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b9e:	d10a      	bne.n	8008bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	605a      	str	r2, [r3, #4]
  }
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bf4:	f7fb fe20 	bl	8004838 <HAL_GetTick>
 8008bf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0308 	and.w	r3, r3, #8
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d10e      	bne.n	8008c26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f82d 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e023      	b.n	8008c6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d10e      	bne.n	8008c52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f817 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e00d      	b.n	8008c6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b09c      	sub	sp, #112	; 0x70
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	603b      	str	r3, [r7, #0]
 8008c82:	4613      	mov	r3, r2
 8008c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c86:	e0a5      	b.n	8008dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c8e:	f000 80a1 	beq.w	8008dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c92:	f7fb fdd1 	bl	8004838 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d302      	bcc.n	8008ca8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d13e      	bne.n	8008d26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e6      	bne.n	8008ca8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8008cfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e5      	bne.n	8008cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2220      	movs	r2, #32
 8008d18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e067      	b.n	8008df6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d04f      	beq.n	8008dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d42:	d147      	bne.n	8008dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e6      	bne.n	8008d4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3308      	adds	r3, #8
 8008d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f023 0301 	bic.w	r3, r3, #1
 8008d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008da0:	623a      	str	r2, [r7, #32]
 8008da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	69f9      	ldr	r1, [r7, #28]
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e5      	bne.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2220      	movs	r2, #32
 8008db8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e010      	b.n	8008df6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69da      	ldr	r2, [r3, #28]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	bf0c      	ite	eq
 8008de4:	2301      	moveq	r3, #1
 8008de6:	2300      	movne	r3, #0
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	461a      	mov	r2, r3
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	f43f af4a 	beq.w	8008c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3770      	adds	r7, #112	; 0x70
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e04:	f7fb fcb0 	bl	8004768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e08:	f000 f822 	bl	8008e50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED2);
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	f7fb f8eb 	bl	8003fe8 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 8008e12:	2000      	movs	r0, #0
 8008e14:	f7fb f8e8 	bl	8003fe8 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  IO_Init();
 8008e18:	f000 f86e 	bl	8008ef8 <IO_Init>
  MX_USART2_UART_Init();
 8008e1c:	f000 f91e 	bl	800905c <MX_USART2_UART_Init>
  DMA2D_Config();
 8008e20:	f000 f898 	bl	8008f54 <DMA2D_Config>

  if(BSP_CAMERA_Init(0,CAMERA_R320x240,CAMERA_PF_RGB565) != BSP_ERROR_NONE)
 8008e24:	2200      	movs	r2, #0
 8008e26:	2101      	movs	r1, #1
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f7fa fcf1 	bl	8003810 <BSP_CAMERA_Init>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <main+0x38>
  {
    Error_Handler();
 8008e34:	f000 f942 	bl	80090bc <Error_Handler>
  }

  /* Wait 1s to let auto-loops in the camera module converge and lead to correct exposure */
  HAL_Delay(1000);
 8008e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e3c:	f7fb fd08 	bl	8004850 <HAL_Delay>

  /* Start the Camera Snapshot Capture */
  BSP_CAMERA_Start(0,(uint8_t *)CAMERA_FRAME_BUFFER,CAMERA_MODE_SNAPSHOT);
 8008e40:	2202      	movs	r2, #2
 8008e42:	4902      	ldr	r1, [pc, #8]	; (8008e4c <main+0x4c>)
 8008e44:	2000      	movs	r0, #0
 8008e46:	f7fa fe25 	bl	8003a94 <BSP_CAMERA_Start>
//  HAL_Delay(1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008e4a:	e7fe      	b.n	8008e4a <main+0x4a>
 8008e4c:	d0200000 	.word	0xd0200000

08008e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b096      	sub	sp, #88	; 0x58
 8008e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008e56:	f107 0314 	add.w	r3, r7, #20
 8008e5a:	2244      	movs	r2, #68	; 0x44
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f9ee 	bl	8009240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008e64:	463b      	mov	r3, r7
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	605a      	str	r2, [r3, #4]
 8008e6c:	609a      	str	r2, [r3, #8]
 8008e6e:	60da      	str	r2, [r3, #12]
 8008e70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008e72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008e76:	f7fd ffa1 	bl	8006dbc <HAL_PWREx_ControlVoltageScaling>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008e80:	f000 f91c 	bl	80090bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008e84:	2310      	movs	r3, #16
 8008e86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008e90:	2360      	movs	r3, #96	; 0x60
 8008e92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e94:	2302      	movs	r3, #2
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8008ea0:	2328      	movs	r3, #40	; 0x28
 8008ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008eac:	2302      	movs	r3, #2
 8008eae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd ffd7 	bl	8006e68 <HAL_RCC_OscConfig>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8008ec0:	f000 f8fc 	bl	80090bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ec4:	230f      	movs	r3, #15
 8008ec6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eda:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008edc:	463b      	mov	r3, r7
 8008ede:	2104      	movs	r1, #4
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fbd9 	bl	8007698 <HAL_RCC_ClockConfig>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8008eec:	f000 f8e6 	bl	80090bc <Error_Handler>
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	3758      	adds	r7, #88	; 0x58
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <IO_Init>:
  * @note  GPIO PH.00 setting to activate STM32L496 Discovery I/Os
  *        and I/O initialization.
  * @retval None
  */
static void IO_Init(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;


  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008efe:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <IO_Init+0x54>)
 8008f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f02:	4a12      	ldr	r2, [pc, #72]	; (8008f4c <IO_Init+0x54>)
 8008f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f0a:	4b10      	ldr	r3, [pc, #64]	; (8008f4c <IO_Init+0x54>)
 8008f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008f16:	2301      	movs	r3, #1
 8008f18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008f1a:	2311      	movs	r3, #17
 8008f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull =   GPIO_NOPULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008f26:	2300      	movs	r3, #0
 8008f28:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init( GPIOH, &GPIO_InitStruct );
 8008f2a:	1d3b      	adds	r3, r7, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4808      	ldr	r0, [pc, #32]	; (8008f50 <IO_Init+0x58>)
 8008f30:	f7fc fd3a 	bl	80059a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin( GPIOH, GPIO_PIN_0, GPIO_PIN_RESET);
 8008f34:	2200      	movs	r2, #0
 8008f36:	2101      	movs	r1, #1
 8008f38:	4805      	ldr	r0, [pc, #20]	; (8008f50 <IO_Init+0x58>)
 8008f3a:	f7fc ffb9 	bl	8005eb0 <HAL_GPIO_WritePin>

  /* Initialize the IO functionalities */
  BSP_IO_Init();
 8008f3e:	f7fb fb97 	bl	8004670 <BSP_IO_Init>
}
 8008f42:	bf00      	nop
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	40021000 	.word	0x40021000
 8008f50:	48001c00 	.word	0x48001c00

08008f54 <DMA2D_Config>:


static void DMA2D_Config(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	71fb      	strb	r3, [r7, #7]

  /* Enable DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008f5e:	4b2f      	ldr	r3, [pc, #188]	; (800901c <DMA2D_Config+0xc8>)
 8008f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f62:	4a2e      	ldr	r2, [pc, #184]	; (800901c <DMA2D_Config+0xc8>)
 8008f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f68:	6493      	str	r3, [r2, #72]	; 0x48
 8008f6a:	4b2c      	ldr	r3, [pc, #176]	; (800901c <DMA2D_Config+0xc8>)
 8008f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	683b      	ldr	r3, [r7, #0]

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8008f76:	2200      	movs	r2, #0
 8008f78:	2100      	movs	r1, #0
 8008f7a:	205a      	movs	r0, #90	; 0x5a
 8008f7c:	f7fb fd8b 	bl	8004a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8008f80:	205a      	movs	r0, #90	; 0x5a
 8008f82:	f7fb fda4 	bl	8004ace <HAL_NVIC_EnableIRQ>

  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandle.Init.Mode         = DMA2D_M2M;              /* DMA2D Mode memory to memory */
 8008f86:	4b26      	ldr	r3, [pc, #152]	; (8009020 <DMA2D_Config+0xcc>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	605a      	str	r2, [r3, #4]
  Dma2dHandle.Init.ColorMode    = DMA2D_OUTPUT_RGB565;    /* Output color mode is RGB565 : 16 bpp */
 8008f8c:	4b24      	ldr	r3, [pc, #144]	; (8009020 <DMA2D_Config+0xcc>)
 8008f8e:	2202      	movs	r2, #2
 8008f90:	609a      	str	r2, [r3, #8]
  Dma2dHandle.Init.OutputOffset = 0x0;                    /* No offset in output */
 8008f92:	4b23      	ldr	r3, [pc, #140]	; (8009020 <DMA2D_Config+0xcc>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	60da      	str	r2, [r3, #12]
  Dma2dHandle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;      /* No R&B swap for the output image */
 8008f98:	4b21      	ldr	r3, [pc, #132]	; (8009020 <DMA2D_Config+0xcc>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	615a      	str	r2, [r3, #20]
  Dma2dHandle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;   /* No alpha inversion for the output image */
 8008f9e:	4b20      	ldr	r3, [pc, #128]	; (8009020 <DMA2D_Config+0xcc>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	611a      	str	r2, [r3, #16]

  /* DMA2D Callbacks Configuration */
  Dma2dHandle.XferCpltCallback  = TransferComplete;
 8008fa4:	4b1e      	ldr	r3, [pc, #120]	; (8009020 <DMA2D_Config+0xcc>)
 8008fa6:	4a1f      	ldr	r2, [pc, #124]	; (8009024 <DMA2D_Config+0xd0>)
 8008fa8:	619a      	str	r2, [r3, #24]
  Dma2dHandle.XferErrorCallback = TransferError;
 8008faa:	4b1d      	ldr	r3, [pc, #116]	; (8009020 <DMA2D_Config+0xcc>)
 8008fac:	4a1e      	ldr	r2, [pc, #120]	; (8009028 <DMA2D_Config+0xd4>)
 8008fae:	61da      	str	r2, [r3, #28]

  /* Foreground Configuration : Layer 1 */
  Dma2dHandle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008fb0:	4b1b      	ldr	r3, [pc, #108]	; (8009020 <DMA2D_Config+0xcc>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	641a      	str	r2, [r3, #64]	; 0x40
  Dma2dHandle.LayerCfg[1].InputAlpha = 0xFF;                    /* Fully opaque */
 8008fb6:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <DMA2D_Config+0xcc>)
 8008fb8:	22ff      	movs	r2, #255	; 0xff
 8008fba:	645a      	str	r2, [r3, #68]	; 0x44
  Dma2dHandle.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;  /* Foreground layer format is RGB565 : 16 bpp */
 8008fbc:	4b18      	ldr	r3, [pc, #96]	; (8009020 <DMA2D_Config+0xcc>)
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	63da      	str	r2, [r3, #60]	; 0x3c
  Dma2dHandle.LayerCfg[1].InputOffset = 0x0;                    /* No offset in input */
 8008fc2:	4b17      	ldr	r3, [pc, #92]	; (8009020 <DMA2D_Config+0xcc>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
  Dma2dHandle.LayerCfg[1].RedBlueSwap   = DMA2D_RB_REGULAR;     /* No R&B swap for the input foreground image */
 8008fc8:	4b15      	ldr	r3, [pc, #84]	; (8009020 <DMA2D_Config+0xcc>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  Dma2dHandle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No alpha inversion for the input foreground image */
 8008fce:	4b14      	ldr	r3, [pc, #80]	; (8009020 <DMA2D_Config+0xcc>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	649a      	str	r2, [r3, #72]	; 0x48

  Dma2dHandle.Instance = DMA2D;
 8008fd4:	4b12      	ldr	r3, [pc, #72]	; (8009020 <DMA2D_Config+0xcc>)
 8008fd6:	4a15      	ldr	r2, [pc, #84]	; (800902c <DMA2D_Config+0xd8>)
 8008fd8:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  hal_status = HAL_DMA2D_Init(&Dma2dHandle);
 8008fda:	4811      	ldr	r0, [pc, #68]	; (8009020 <DMA2D_Config+0xcc>)
 8008fdc:	f7fc fbe3 	bl	80057a6 <HAL_DMA2D_Init>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(hal_status != HAL_OK);
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bf14      	ite	ne
 8008fea:	2301      	movne	r3, #1
 8008fec:	2300      	moveq	r3, #0
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f868 	bl	80090c6 <OnError_Handler>

  hal_status = HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	4809      	ldr	r0, [pc, #36]	; (8009020 <DMA2D_Config+0xcc>)
 8008ffa:	f7fc fc37 	bl	800586c <HAL_DMA2D_ConfigLayer>
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(hal_status != HAL_OK);
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	2b00      	cmp	r3, #0
 8009006:	bf14      	ite	ne
 8009008:	2301      	movne	r3, #1
 800900a:	2300      	moveq	r3, #0
 800900c:	b2db      	uxtb	r3, r3
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f859 	bl	80090c6 <OnError_Handler>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	40021000 	.word	0x40021000
 8009020:	20000cfc 	.word	0x20000cfc
 8009024:	08009031 	.word	0x08009031
 8009028:	08009047 	.word	0x08009047
 800902c:	4002b000 	.word	0x4002b000

08009030 <TransferComplete>:
  * @note   This example shows a simple way to report end of DMA2D transfer, and
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Set LED2 On */
  BSP_LED_On(LED2);
 8009038:	2001      	movs	r0, #1
 800903a:	f7fb f823 	bl	8004084 <BSP_LED_On>
}
 800903e:	bf00      	nop
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <TransferError>:
  * @note   This example shows a simple way to report DMA2D transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
static void TransferError(DMA2D_HandleTypeDef *hdma2d)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  /* Set LED1 On */
  BSP_LED_On(LED1);
 800904e:	2000      	movs	r0, #0
 8009050:	f7fb f818 	bl	8004084 <BSP_LED_On>
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009060:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 8009062:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <MX_USART2_UART_Init+0x5c>)
 8009064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 8009068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800906c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800906e:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 8009070:	2200      	movs	r2, #0
 8009072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009074:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 8009076:	2200      	movs	r2, #0
 8009078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800907a:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 800907c:	2200      	movs	r2, #0
 800907e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009080:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 8009082:	220c      	movs	r2, #12
 8009084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009086:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 8009088:	2200      	movs	r2, #0
 800908a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 800908e:	2200      	movs	r2, #0
 8009090:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009092:	4b08      	ldr	r3, [pc, #32]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 8009094:	2200      	movs	r2, #0
 8009096:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009098:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 800909a:	2200      	movs	r2, #0
 800909c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <MX_USART2_UART_Init+0x58>)
 80090a0:	f7ff fa1c 	bl	80084dc <HAL_UART_Init>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80090aa:	f000 f807 	bl	80090bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80090ae:	bf00      	nop
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20000d54 	.word	0x20000d54
 80090b8:	40004400 	.word	0x40004400

080090bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80090c0:	b672      	cpsid	i
}
 80090c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80090c4:	e7fe      	b.n	80090c4 <Error_Handler+0x8>

080090c6 <OnError_Handler>:
  * @brief  On Error Handler on condition TRUE.
  * @param  condition : Can be TRUE or FALSE
  * @retval None
  */
static void OnError_Handler(uint32_t condition)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  if(condition)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <OnError_Handler+0x16>
  {
    BSP_LED_On(LED1);
 80090d4:	2000      	movs	r0, #0
 80090d6:	f7fa ffd5 	bl	8004084 <BSP_LED_On>
    while(1) { ; } /* Blocking on error */
 80090da:	e7fe      	b.n	80090da <OnError_Handler+0x14>
  }
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090ea:	4b0f      	ldr	r3, [pc, #60]	; (8009128 <HAL_MspInit+0x44>)
 80090ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ee:	4a0e      	ldr	r2, [pc, #56]	; (8009128 <HAL_MspInit+0x44>)
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	6613      	str	r3, [r2, #96]	; 0x60
 80090f6:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <HAL_MspInit+0x44>)
 80090f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	607b      	str	r3, [r7, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009102:	4b09      	ldr	r3, [pc, #36]	; (8009128 <HAL_MspInit+0x44>)
 8009104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009106:	4a08      	ldr	r2, [pc, #32]	; (8009128 <HAL_MspInit+0x44>)
 8009108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800910c:	6593      	str	r3, [r2, #88]	; 0x58
 800910e:	4b06      	ldr	r3, [pc, #24]	; (8009128 <HAL_MspInit+0x44>)
 8009110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40021000 	.word	0x40021000

0800912c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009130:	e7fe      	b.n	8009130 <NMI_Handler+0x4>

08009132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009132:	b480      	push	{r7}
 8009134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009136:	e7fe      	b.n	8009136 <HardFault_Handler+0x4>

08009138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800913c:	e7fe      	b.n	800913c <MemManage_Handler+0x4>

0800913e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800913e:	b480      	push	{r7}
 8009140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009142:	e7fe      	b.n	8009142 <BusFault_Handler+0x4>

08009144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009148:	e7fe      	b.n	8009148 <UsageFault_Handler+0x4>

0800914a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800914a:	b480      	push	{r7}
 800914c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800914e:	bf00      	nop
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800915c:	bf00      	nop
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009166:	b480      	push	{r7}
 8009168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800916a:	bf00      	nop
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009178:	f7fb fb4a 	bl	8004810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800917c:	bf00      	nop
 800917e:	bd80      	pop	{r7, pc}

08009180 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009180:	b480      	push	{r7}
 8009182:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009184:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <SystemInit+0x20>)
 8009186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918a:	4a05      	ldr	r2, [pc, #20]	; (80091a0 <SystemInit+0x20>)
 800918c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009194:	bf00      	nop
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	e000ed00 	.word	0xe000ed00

080091a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80091a4:	480d      	ldr	r0, [pc, #52]	; (80091dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80091a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80091a8:	f7ff ffea 	bl	8009180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091ac:	480c      	ldr	r0, [pc, #48]	; (80091e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80091ae:	490d      	ldr	r1, [pc, #52]	; (80091e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80091b0:	4a0d      	ldr	r2, [pc, #52]	; (80091e8 <LoopForever+0xe>)
  movs r3, #0
 80091b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091b4:	e002      	b.n	80091bc <LoopCopyDataInit>

080091b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091ba:	3304      	adds	r3, #4

080091bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091c0:	d3f9      	bcc.n	80091b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091c2:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80091c4:	4c0a      	ldr	r4, [pc, #40]	; (80091f0 <LoopForever+0x16>)
  movs r3, #0
 80091c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091c8:	e001      	b.n	80091ce <LoopFillZerobss>

080091ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091cc:	3204      	adds	r2, #4

080091ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091d0:	d3fb      	bcc.n	80091ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80091d2:	f000 f811 	bl	80091f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091d6:	f7ff fe13 	bl	8008e00 <main>

080091da <LoopForever>:

LoopForever:
    b LoopForever
 80091da:	e7fe      	b.n	80091da <LoopForever>
  ldr   r0, =_estack
 80091dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80091e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091e4:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80091e8:	080098cc 	.word	0x080098cc
  ldr r2, =_sbss
 80091ec:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80091f0:	20000dd8 	.word	0x20000dd8

080091f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80091f4:	e7fe      	b.n	80091f4 <ADC1_2_IRQHandler>
	...

080091f8 <__libc_init_array>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	4d0d      	ldr	r5, [pc, #52]	; (8009230 <__libc_init_array+0x38>)
 80091fc:	4c0d      	ldr	r4, [pc, #52]	; (8009234 <__libc_init_array+0x3c>)
 80091fe:	1b64      	subs	r4, r4, r5
 8009200:	10a4      	asrs	r4, r4, #2
 8009202:	2600      	movs	r6, #0
 8009204:	42a6      	cmp	r6, r4
 8009206:	d109      	bne.n	800921c <__libc_init_array+0x24>
 8009208:	4d0b      	ldr	r5, [pc, #44]	; (8009238 <__libc_init_array+0x40>)
 800920a:	4c0c      	ldr	r4, [pc, #48]	; (800923c <__libc_init_array+0x44>)
 800920c:	f000 f820 	bl	8009250 <_init>
 8009210:	1b64      	subs	r4, r4, r5
 8009212:	10a4      	asrs	r4, r4, #2
 8009214:	2600      	movs	r6, #0
 8009216:	42a6      	cmp	r6, r4
 8009218:	d105      	bne.n	8009226 <__libc_init_array+0x2e>
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009220:	4798      	blx	r3
 8009222:	3601      	adds	r6, #1
 8009224:	e7ee      	b.n	8009204 <__libc_init_array+0xc>
 8009226:	f855 3b04 	ldr.w	r3, [r5], #4
 800922a:	4798      	blx	r3
 800922c:	3601      	adds	r6, #1
 800922e:	e7f2      	b.n	8009216 <__libc_init_array+0x1e>
 8009230:	080098c4 	.word	0x080098c4
 8009234:	080098c4 	.word	0x080098c4
 8009238:	080098c4 	.word	0x080098c4
 800923c:	080098c8 	.word	0x080098c8

08009240 <memset>:
 8009240:	4402      	add	r2, r0
 8009242:	4603      	mov	r3, r0
 8009244:	4293      	cmp	r3, r2
 8009246:	d100      	bne.n	800924a <memset+0xa>
 8009248:	4770      	bx	lr
 800924a:	f803 1b01 	strb.w	r1, [r3], #1
 800924e:	e7f9      	b.n	8009244 <memset+0x4>

08009250 <_init>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr

0800925c <_fini>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	bf00      	nop
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr
